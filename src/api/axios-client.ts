//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

//-----ClientClass--Client---
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming


export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * Get all article types and subtypes
     * @return Error
     */
    types( cancelToken?: CancelToken | undefined): Promise<GetArticleTypesRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/articles/types";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTypes(_response);
        });
    }

    protected processTypes(response: AxiosResponse): Promise<GetArticleTypesRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetArticleTypesRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetArticleTypesRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get articles by condition
     * @param articleId (optional) Article Id for troubleshooting
     * @param frontendId (optional) Frontend id
    null: All
     * @param title (optional) Article title
     * @param isProofread (optional) Is Proofread
     * @param siteSectionId (optional) Site Section Id
    null: All
     * @param createdFrom (optional) Created From
     * @param createdTo (optional) Created To
     * @param author (optional) Creator user name
     * @param state (optional) Article state
    Published: 1
    Unpublished: 2
    Deleted: 3
    Featured: 4
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    articlesGET(articleId: number | undefined, frontendId: number | undefined, title: string | undefined, isProofread: boolean | undefined, siteSectionId: number | undefined, createdFrom: number | undefined, createdTo: number | undefined, author: string | undefined, state: EnumArticleState | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetArticlesRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/articles?";
        if (articleId === null)
            throw new Error("The parameter 'articleId' cannot be null.");
        else if (articleId !== undefined)
            url_ += "ArticleId=" + encodeURIComponent("" + articleId) + "&";
        if (frontendId === null)
            throw new Error("The parameter 'frontendId' cannot be null.");
        else if (frontendId !== undefined)
            url_ += "FrontendId=" + encodeURIComponent("" + frontendId) + "&";
        if (title === null)
            throw new Error("The parameter 'title' cannot be null.");
        else if (title !== undefined)
            url_ += "Title=" + encodeURIComponent("" + title) + "&";
        if (isProofread === null)
            throw new Error("The parameter 'isProofread' cannot be null.");
        else if (isProofread !== undefined)
            url_ += "IsProofread=" + encodeURIComponent("" + isProofread) + "&";
        if (siteSectionId === null)
            throw new Error("The parameter 'siteSectionId' cannot be null.");
        else if (siteSectionId !== undefined)
            url_ += "SiteSectionId=" + encodeURIComponent("" + siteSectionId) + "&";
        if (createdFrom === null)
            throw new Error("The parameter 'createdFrom' cannot be null.");
        else if (createdFrom !== undefined)
            url_ += "CreatedFrom=" + encodeURIComponent("" + createdFrom) + "&";
        if (createdTo === null)
            throw new Error("The parameter 'createdTo' cannot be null.");
        else if (createdTo !== undefined)
            url_ += "CreatedTo=" + encodeURIComponent("" + createdTo) + "&";
        if (author === null)
            throw new Error("The parameter 'author' cannot be null.");
        else if (author !== undefined)
            url_ += "Author=" + encodeURIComponent("" + author) + "&";
        if (state === null)
            throw new Error("The parameter 'state' cannot be null.");
        else if (state !== undefined)
            url_ += "State=" + encodeURIComponent("" + state) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processArticlesGET(_response);
        });
    }

    protected processArticlesGET(response: AxiosResponse): Promise<GetArticlesRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetArticlesRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetArticlesRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add new article
     * @param subTypeId (optional) Article SubtypeId
     * @param frontendId (optional) Article frontend id
     * @param localeId (optional) Article locale id
     * @param siteSectionIds (optional) Article site sections
     * @param title (optional) Article title
     * @param teaser (optional) Article Teaser
     * @param content (optional) Article content
     * @param headlineImgFile (optional) Headline image file
     * @param headlineImageText (optional) Headline image text
     * @param squareHeadlineImgFile (optional) Square headline image file
     * @param isPublished (optional) Is published
     * @param publishedAt (optional) Published At
     * @param isFeatured (optional) Is featured
     * @param isSectionSticky (optional) Is section sticky
     * @param timeSpent (optional) Time spent
     * @param playerIds (optional) Related players
     * @param teamIds (optional) Related teams
     * @param tournamentIds (optional) Related tournaments
     * @param quickPoll_Question (optional) Questions
     * @param quickPoll_Options (optional) Options
     * @return Error
     */
    articlesPOST(subTypeId: number | undefined, frontendId: number | undefined, localeId: number | undefined, siteSectionIds: number[] | undefined, title: string | undefined, teaser: string | undefined, content: string | undefined, headlineImgFile: FileParameter | undefined, headlineImageText: string | undefined, squareHeadlineImgFile: FileParameter | undefined, isPublished: boolean | undefined, publishedAt: number | undefined, isFeatured: boolean | undefined, isSectionSticky: boolean | undefined, timeSpent: number | undefined, playerIds: number[] | undefined, teamIds: number[] | undefined, tournamentIds: number[] | undefined, quickPoll_Question: string | undefined, quickPoll_Options: string[] | undefined, cancelToken?: CancelToken | undefined): Promise<AddArticleRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/articles";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (subTypeId === null || subTypeId === undefined)
            throw new Error("The parameter 'subTypeId' cannot be null.");
        else
            content_.append("SubTypeId", subTypeId.toString());
        if (frontendId === null || frontendId === undefined)
            throw new Error("The parameter 'frontendId' cannot be null.");
        else
            content_.append("FrontendId", frontendId.toString());
        if (localeId === null || localeId === undefined)
            throw new Error("The parameter 'localeId' cannot be null.");
        else
            content_.append("LocaleId", localeId.toString());
        if (siteSectionIds === null || siteSectionIds === undefined)
            throw new Error("The parameter 'siteSectionIds' cannot be null.");
        else
            siteSectionIds.forEach(item_ => content_.append("SiteSectionIds", item_.toString()));
        if (title === null || title === undefined)
            throw new Error("The parameter 'title' cannot be null.");
        else
            content_.append("Title", title.toString());
        if (teaser === null || teaser === undefined)
            throw new Error("The parameter 'teaser' cannot be null.");
        else
            content_.append("Teaser", teaser.toString());
        if (content === null || content === undefined)
            throw new Error("The parameter 'content' cannot be null.");
        else
            content_.append("Content", content.toString());
        if (headlineImgFile === null || headlineImgFile === undefined)
            throw new Error("The parameter 'headlineImgFile' cannot be null.");
        else
            content_.append("HeadlineImgFile", headlineImgFile.data, headlineImgFile.fileName ? headlineImgFile.fileName : "HeadlineImgFile");
        if (headlineImageText === null || headlineImageText === undefined)
            throw new Error("The parameter 'headlineImageText' cannot be null.");
        else
            content_.append("HeadlineImageText", headlineImageText.toString());
        if (squareHeadlineImgFile === null || squareHeadlineImgFile === undefined)
            throw new Error("The parameter 'squareHeadlineImgFile' cannot be null.");
        else
            content_.append("SquareHeadlineImgFile", squareHeadlineImgFile.data, squareHeadlineImgFile.fileName ? squareHeadlineImgFile.fileName : "SquareHeadlineImgFile");
        if (isPublished === null || isPublished === undefined)
            throw new Error("The parameter 'isPublished' cannot be null.");
        else
            content_.append("IsPublished", isPublished.toString());
        if (publishedAt === null || publishedAt === undefined)
            throw new Error("The parameter 'publishedAt' cannot be null.");
        else
            content_.append("PublishedAt", publishedAt.toString());
        if (isFeatured === null || isFeatured === undefined)
            throw new Error("The parameter 'isFeatured' cannot be null.");
        else
            content_.append("IsFeatured", isFeatured.toString());
        if (isSectionSticky === null || isSectionSticky === undefined)
            throw new Error("The parameter 'isSectionSticky' cannot be null.");
        else
            content_.append("IsSectionSticky", isSectionSticky.toString());
        if (timeSpent === null || timeSpent === undefined)
            throw new Error("The parameter 'timeSpent' cannot be null.");
        else
            content_.append("TimeSpent", timeSpent.toString());
        if (playerIds === null || playerIds === undefined)
            throw new Error("The parameter 'playerIds' cannot be null.");
        else
            playerIds.forEach(item_ => content_.append("PlayerIds", item_.toString()));
        if (teamIds === null || teamIds === undefined)
            throw new Error("The parameter 'teamIds' cannot be null.");
        else
            teamIds.forEach(item_ => content_.append("TeamIds", item_.toString()));
        if (tournamentIds === null || tournamentIds === undefined)
            throw new Error("The parameter 'tournamentIds' cannot be null.");
        else
            tournamentIds.forEach(item_ => content_.append("TournamentIds", item_.toString()));
        if (quickPoll_Question === null || quickPoll_Question === undefined)
            throw new Error("The parameter 'quickPoll_Question' cannot be null.");
        else
            content_.append("QuickPoll.Question", quickPoll_Question.toString());
        if (quickPoll_Options === null || quickPoll_Options === undefined)
            throw new Error("The parameter 'quickPoll_Options' cannot be null.");
        else
            quickPoll_Options.forEach(item_ => content_.append("QuickPoll.Options", item_.toString()));

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processArticlesPOST(_response);
        });
    }

    protected processArticlesPOST(response: AxiosResponse): Promise<AddArticleRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddArticleRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddArticleRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get article
     * @param id ArticleId
     * @return Error
     */
    articlesGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetArticleRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/articles/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processArticlesGET2(_response);
        });
    }

    protected processArticlesGET2(response: AxiosResponse): Promise<GetArticleRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetArticleRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetArticleRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify article
     * @param id ArticleId
     * @param id (optional) Article id
     * @param subTypeId (optional) Article SubtypeId
     * @param frontendId (optional) Article frontend id
     * @param localeId (optional) Article locale id
     * @param siteSectionIds (optional) Article site sections
     * @param title (optional) Article title
     * @param teaser (optional) Article teaser
     * @param content (optional) Article content
     * @param headlineImgFile (optional) Headline image file
     * @param headlineImageText (optional) Headline image text
     * @param squareHeadlineImgFile (optional) Square headline image file
     * @param isPublished (optional) Is published
     * @param publishedAt (optional) Published At
     * @param isProofread (optional) Is proofread
     * @param timeSpentProofreading (optional) Time spent for proofreading
     * @param isFeatured (optional) Is featured
     * @param isSectionSticky (optional) Is section sticky
     * @param timeSpent (optional) Time spent
     * @param isClearAllPlayers (optional) Is Clear All Players
     * @param playerIds (optional) Related players
     * @param isClearAllTeams (optional) Is Clear All Teams
     * @param teamIds (optional) Related teams
     * @param isClearAllTournaments (optional) Is Clear All Tournaments
     * @param tournamentIds (optional) Related tournaments
     * @param quickPoll_Question (optional) Questions
     * @param quickPoll_Options (optional) Options
     * @return Error
     */
    articlesPATCH(id: number, id: number | undefined, subTypeId: number | undefined, frontendId: number | undefined, localeId: number | undefined, siteSectionIds: number[] | undefined, title: string | undefined, teaser: string | undefined, content: string | undefined, headlineImgFile: FileParameter | undefined, headlineImageText: string | undefined, squareHeadlineImgFile: FileParameter | undefined, isPublished: boolean | undefined, publishedAt: number | undefined, isProofread: boolean | undefined, timeSpentProofreading: number | undefined, isFeatured: boolean | undefined, isSectionSticky: boolean | undefined, timeSpent: number | undefined, isClearAllPlayers: boolean | undefined, playerIds: number[] | undefined, isClearAllTeams: boolean | undefined, teamIds: number[] | undefined, isClearAllTournaments: boolean | undefined, tournamentIds: number[] | undefined, quickPoll_Question: string | undefined, quickPoll_Options: string[] | undefined, cancelToken?: CancelToken | undefined): Promise<ModArticleRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/articles/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("Id", id.toString());
        if (subTypeId === null || subTypeId === undefined)
            throw new Error("The parameter 'subTypeId' cannot be null.");
        else
            content_.append("SubTypeId", subTypeId.toString());
        if (frontendId === null || frontendId === undefined)
            throw new Error("The parameter 'frontendId' cannot be null.");
        else
            content_.append("FrontendId", frontendId.toString());
        if (localeId === null || localeId === undefined)
            throw new Error("The parameter 'localeId' cannot be null.");
        else
            content_.append("LocaleId", localeId.toString());
        if (siteSectionIds === null || siteSectionIds === undefined)
            throw new Error("The parameter 'siteSectionIds' cannot be null.");
        else
            siteSectionIds.forEach(item_ => content_.append("SiteSectionIds", item_.toString()));
        if (title === null || title === undefined)
            throw new Error("The parameter 'title' cannot be null.");
        else
            content_.append("Title", title.toString());
        if (teaser === null || teaser === undefined)
            throw new Error("The parameter 'teaser' cannot be null.");
        else
            content_.append("Teaser", teaser.toString());
        if (content === null || content === undefined)
            throw new Error("The parameter 'content' cannot be null.");
        else
            content_.append("Content", content.toString());
        if (headlineImgFile === null || headlineImgFile === undefined)
            throw new Error("The parameter 'headlineImgFile' cannot be null.");
        else
            content_.append("HeadlineImgFile", headlineImgFile.data, headlineImgFile.fileName ? headlineImgFile.fileName : "HeadlineImgFile");
        if (headlineImageText === null || headlineImageText === undefined)
            throw new Error("The parameter 'headlineImageText' cannot be null.");
        else
            content_.append("HeadlineImageText", headlineImageText.toString());
        if (squareHeadlineImgFile === null || squareHeadlineImgFile === undefined)
            throw new Error("The parameter 'squareHeadlineImgFile' cannot be null.");
        else
            content_.append("SquareHeadlineImgFile", squareHeadlineImgFile.data, squareHeadlineImgFile.fileName ? squareHeadlineImgFile.fileName : "SquareHeadlineImgFile");
        if (isPublished === null || isPublished === undefined)
            throw new Error("The parameter 'isPublished' cannot be null.");
        else
            content_.append("IsPublished", isPublished.toString());
        if (publishedAt === null || publishedAt === undefined)
            throw new Error("The parameter 'publishedAt' cannot be null.");
        else
            content_.append("PublishedAt", publishedAt.toString());
        if (isProofread === null || isProofread === undefined)
            throw new Error("The parameter 'isProofread' cannot be null.");
        else
            content_.append("IsProofread", isProofread.toString());
        if (timeSpentProofreading === null || timeSpentProofreading === undefined)
            throw new Error("The parameter 'timeSpentProofreading' cannot be null.");
        else
            content_.append("TimeSpentProofreading", timeSpentProofreading.toString());
        if (isFeatured === null || isFeatured === undefined)
            throw new Error("The parameter 'isFeatured' cannot be null.");
        else
            content_.append("IsFeatured", isFeatured.toString());
        if (isSectionSticky === null || isSectionSticky === undefined)
            throw new Error("The parameter 'isSectionSticky' cannot be null.");
        else
            content_.append("IsSectionSticky", isSectionSticky.toString());
        if (timeSpent === null || timeSpent === undefined)
            throw new Error("The parameter 'timeSpent' cannot be null.");
        else
            content_.append("TimeSpent", timeSpent.toString());
        if (isClearAllPlayers === null || isClearAllPlayers === undefined)
            throw new Error("The parameter 'isClearAllPlayers' cannot be null.");
        else
            content_.append("IsClearAllPlayers", isClearAllPlayers.toString());
        if (playerIds === null || playerIds === undefined)
            throw new Error("The parameter 'playerIds' cannot be null.");
        else
            playerIds.forEach(item_ => content_.append("PlayerIds", item_.toString()));
        if (isClearAllTeams === null || isClearAllTeams === undefined)
            throw new Error("The parameter 'isClearAllTeams' cannot be null.");
        else
            content_.append("IsClearAllTeams", isClearAllTeams.toString());
        if (teamIds === null || teamIds === undefined)
            throw new Error("The parameter 'teamIds' cannot be null.");
        else
            teamIds.forEach(item_ => content_.append("TeamIds", item_.toString()));
        if (isClearAllTournaments === null || isClearAllTournaments === undefined)
            throw new Error("The parameter 'isClearAllTournaments' cannot be null.");
        else
            content_.append("IsClearAllTournaments", isClearAllTournaments.toString());
        if (tournamentIds === null || tournamentIds === undefined)
            throw new Error("The parameter 'tournamentIds' cannot be null.");
        else
            tournamentIds.forEach(item_ => content_.append("TournamentIds", item_.toString()));
        if (quickPoll_Question === null || quickPoll_Question === undefined)
            throw new Error("The parameter 'quickPoll_Question' cannot be null.");
        else
            content_.append("QuickPoll.Question", quickPoll_Question.toString());
        if (quickPoll_Options === null || quickPoll_Options === undefined)
            throw new Error("The parameter 'quickPoll_Options' cannot be null.");
        else
            quickPoll_Options.forEach(item_ => content_.append("QuickPoll.Options", item_.toString()));

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processArticlesPATCH(_response);
        });
    }

    protected processArticlesPATCH(response: AxiosResponse): Promise<ModArticleRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModArticleRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModArticleRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete article
     * @param id ArticleId
     * @return Error
     */
    articlesDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelArticleRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/articles/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processArticlesDELETE(_response);
        });
    }

    protected processArticlesDELETE(response: AxiosResponse): Promise<DelArticleRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelArticleRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelArticleRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Login
     * @param api_version (optional) 
     * @return Success
     */
    login(api_version: string | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/login?";
        if (api_version === null)
            throw new Error("The parameter 'api_version' cannot be null.");
        else if (api_version !== undefined)
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Register
     * @param api_version (optional) 
     * @return Success
     */
    register(api_version: string | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/register?";
        if (api_version === null)
            throw new Error("The parameter 'api_version' cannot be null.");
        else if (api_version !== undefined)
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param api_version (optional) 
     * @return Success
     */
    logoutGET(api_version: string | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/logout?";
        if (api_version === null)
            throw new Error("The parameter 'api_version' cannot be null.");
        else if (api_version !== undefined)
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogoutGET(_response);
        });
    }

    protected processLogoutGET(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param code (optional) 
     * @param locale (optional) 
     * @param state (optional) 
     * @param userState (optional) 
     * @param api_version (optional) 
     * @return Success
     */
    oauthCallback(code: string | undefined, locale: string | undefined, state: string | undefined, userState: string | undefined, api_version: string | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/oauth-callback?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "Code=" + encodeURIComponent("" + code) + "&";
        if (locale === null)
            throw new Error("The parameter 'locale' cannot be null.");
        else if (locale !== undefined)
            url_ += "Locale=" + encodeURIComponent("" + locale) + "&";
        if (state === null)
            throw new Error("The parameter 'state' cannot be null.");
        else if (state !== undefined)
            url_ += "State=" + encodeURIComponent("" + state) + "&";
        if (userState === null)
            throw new Error("The parameter 'userState' cannot be null.");
        else if (userState !== undefined)
            url_ += "UserState=" + encodeURIComponent("" + userState) + "&";
        if (api_version === null)
            throw new Error("The parameter 'api_version' cannot be null.");
        else if (api_version !== undefined)
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processOauthCallback(_response);
        });
    }

    protected processOauthCallback(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Get broadcast talents by condition
     * @param nickName (optional) Name
     * @param name (optional) FirstName/LastName
     * @param gameId (optional) Primary game Id
     * @param languageId (optional) LanguageId
     * @param countryId (optional) CountryId
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    broadcasttalentsGET(nickName: string | undefined, name: string | undefined, gameId: number | undefined, languageId: number | undefined, countryId: number | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetBroadcastTalentsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/broadcasttalents?";
        if (nickName === null)
            throw new Error("The parameter 'nickName' cannot be null.");
        else if (nickName !== undefined)
            url_ += "NickName=" + encodeURIComponent("" + nickName) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (gameId === null)
            throw new Error("The parameter 'gameId' cannot be null.");
        else if (gameId !== undefined)
            url_ += "GameId=" + encodeURIComponent("" + gameId) + "&";
        if (languageId === null)
            throw new Error("The parameter 'languageId' cannot be null.");
        else if (languageId !== undefined)
            url_ += "LanguageId=" + encodeURIComponent("" + languageId) + "&";
        if (countryId === null)
            throw new Error("The parameter 'countryId' cannot be null.");
        else if (countryId !== undefined)
            url_ += "CountryId=" + encodeURIComponent("" + countryId) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBroadcasttalentsGET(_response);
        });
    }

    protected processBroadcasttalentsGET(response: AxiosResponse): Promise<GetBroadcastTalentsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetBroadcastTalentsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetBroadcastTalentsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add new broadcast talent
     * @param name (optional) Name
     * @param firstName (optional) First Name
     * @param lastName (optional) Last Name
     * @param countryId (optional) Country Id
     * @param languageId (optional) Language Id
     * @param type (optional) 
     * @param isActive (optional) IsActive
     * @param about (optional) About
     * @param gender (optional) Gender (Male=0/Female=1)
     * @param dateOfBirth (optional) DateOfBirth (ex:2022-12-01)
     * @param primaryGameId (optional) Primary Game Id
     * @param profileImage (optional) Profile Image
     * @param headerImage (optional) Header Image
     * @param playerId (optional) Player Id
     * @param personalStreamId (optional) Person Stream Id
     * @param website (optional) WebSite
     * @param facebook (optional) Facebook
     * @param twitter (optional) Twitter
     * @param youtube (optional) Youtube
     * @return Error
     */
    broadcasttalentsPOST(name: string | undefined, firstName: string | undefined, lastName: string | undefined, countryId: number | undefined, languageId: number | undefined, type: EnumBroadcastTalentType | undefined, isActive: boolean | undefined, about: string | undefined, gender: number | undefined, dateOfBirth: Date | undefined, primaryGameId: number | undefined, profileImage: FileParameter | undefined, headerImage: FileParameter | undefined, playerId: number | undefined, personalStreamId: number | undefined, website: string | undefined, facebook: string | undefined, twitter: string | undefined, youtube: string | undefined, cancelToken?: CancelToken | undefined): Promise<AddBroadcastTalentRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/broadcasttalents";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (firstName === null || firstName === undefined)
            throw new Error("The parameter 'firstName' cannot be null.");
        else
            content_.append("FirstName", firstName.toString());
        if (lastName === null || lastName === undefined)
            throw new Error("The parameter 'lastName' cannot be null.");
        else
            content_.append("LastName", lastName.toString());
        if (countryId === null || countryId === undefined)
            throw new Error("The parameter 'countryId' cannot be null.");
        else
            content_.append("CountryId", countryId.toString());
        if (languageId === null || languageId === undefined)
            throw new Error("The parameter 'languageId' cannot be null.");
        else
            content_.append("LanguageId", languageId.toString());
        if (type === null || type === undefined)
            throw new Error("The parameter 'type' cannot be null.");
        else
            content_.append("Type", type.toString());
        if (isActive === null || isActive === undefined)
            throw new Error("The parameter 'isActive' cannot be null.");
        else
            content_.append("IsActive", isActive.toString());
        if (about === null || about === undefined)
            throw new Error("The parameter 'about' cannot be null.");
        else
            content_.append("About", about.toString());
        if (gender === null || gender === undefined)
            throw new Error("The parameter 'gender' cannot be null.");
        else
            content_.append("Gender", gender.toString());
        if (dateOfBirth === null || dateOfBirth === undefined)
            throw new Error("The parameter 'dateOfBirth' cannot be null.");
        else
            content_.append("DateOfBirth", dateOfBirth.toJSON());
        if (primaryGameId === null || primaryGameId === undefined)
            throw new Error("The parameter 'primaryGameId' cannot be null.");
        else
            content_.append("PrimaryGameId", primaryGameId.toString());
        if (profileImage === null || profileImage === undefined)
            throw new Error("The parameter 'profileImage' cannot be null.");
        else
            content_.append("ProfileImage", profileImage.data, profileImage.fileName ? profileImage.fileName : "ProfileImage");
        if (headerImage === null || headerImage === undefined)
            throw new Error("The parameter 'headerImage' cannot be null.");
        else
            content_.append("HeaderImage", headerImage.data, headerImage.fileName ? headerImage.fileName : "HeaderImage");
        if (playerId === null || playerId === undefined)
            throw new Error("The parameter 'playerId' cannot be null.");
        else
            content_.append("PlayerId", playerId.toString());
        if (personalStreamId === null || personalStreamId === undefined)
            throw new Error("The parameter 'personalStreamId' cannot be null.");
        else
            content_.append("PersonalStreamId", personalStreamId.toString());
        if (website === null || website === undefined)
            throw new Error("The parameter 'website' cannot be null.");
        else
            content_.append("Website", website.toString());
        if (facebook === null || facebook === undefined)
            throw new Error("The parameter 'facebook' cannot be null.");
        else
            content_.append("Facebook", facebook.toString());
        if (twitter === null || twitter === undefined)
            throw new Error("The parameter 'twitter' cannot be null.");
        else
            content_.append("Twitter", twitter.toString());
        if (youtube === null || youtube === undefined)
            throw new Error("The parameter 'youtube' cannot be null.");
        else
            content_.append("Youtube", youtube.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBroadcasttalentsPOST(_response);
        });
    }

    protected processBroadcasttalentsPOST(response: AxiosResponse): Promise<AddBroadcastTalentRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddBroadcastTalentRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddBroadcastTalentRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get broadcast talent
     * @param id Broadcast Talent Id
     * @return Error
     */
    broadcasttalentsGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetBroadcastTalentRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/broadcasttalents/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBroadcasttalentsGET2(_response);
        });
    }

    protected processBroadcasttalentsGET2(response: AxiosResponse): Promise<GetBroadcastTalentRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetBroadcastTalentRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetBroadcastTalentRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify broadcast talent
     * @param id Broadcast Talent Id
     * @param id (optional) Broadcast Talent Id
     * @param name (optional) Name
     * @param firstName (optional) First Name
     * @param lastName (optional) Last Name
     * @param countryId (optional) Country Id
     * @param languageId (optional) Language Id
     * @param type (optional) 
     * @param isActive (optional) IsActive
     * @param about (optional) About
     * @param gender (optional) Gender (Male=0/Female=1)
     * @param dateOfBirth (optional) DateOfBirth (ex:2022-12-01)
     * @param primaryGameId (optional) Primary Game Id
     * @param profileImage (optional) Profile Image
     * @param headerImage (optional) Header Image
     * @param playerId (optional) Player Id
     * @param personalStreamId (optional) Person Stream Id
     * @param website (optional) Website
     * @param facebook (optional) Facebook
     * @param twitter (optional) Twitter
     * @param youtube (optional) Youtube
     * @return Error
     */
    broadcasttalentsPATCH(id: number, id: number | undefined, name: string | undefined, firstName: string | undefined, lastName: string | undefined, countryId: number | undefined, languageId: number | undefined, type: EnumBroadcastTalentType | undefined, isActive: boolean | undefined, about: string | undefined, gender: number | undefined, dateOfBirth: Date | undefined, primaryGameId: number | undefined, profileImage: FileParameter | undefined, headerImage: FileParameter | undefined, playerId: number | undefined, personalStreamId: number | undefined, website: string | undefined, facebook: string | undefined, twitter: string | undefined, youtube: string | undefined, cancelToken?: CancelToken | undefined): Promise<ModBroadcastTalentRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/broadcasttalents/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("Id", id.toString());
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (firstName === null || firstName === undefined)
            throw new Error("The parameter 'firstName' cannot be null.");
        else
            content_.append("FirstName", firstName.toString());
        if (lastName === null || lastName === undefined)
            throw new Error("The parameter 'lastName' cannot be null.");
        else
            content_.append("LastName", lastName.toString());
        if (countryId === null || countryId === undefined)
            throw new Error("The parameter 'countryId' cannot be null.");
        else
            content_.append("CountryId", countryId.toString());
        if (languageId === null || languageId === undefined)
            throw new Error("The parameter 'languageId' cannot be null.");
        else
            content_.append("LanguageId", languageId.toString());
        if (type === null || type === undefined)
            throw new Error("The parameter 'type' cannot be null.");
        else
            content_.append("Type", type.toString());
        if (isActive === null || isActive === undefined)
            throw new Error("The parameter 'isActive' cannot be null.");
        else
            content_.append("IsActive", isActive.toString());
        if (about === null || about === undefined)
            throw new Error("The parameter 'about' cannot be null.");
        else
            content_.append("About", about.toString());
        if (gender === null || gender === undefined)
            throw new Error("The parameter 'gender' cannot be null.");
        else
            content_.append("Gender", gender.toString());
        if (dateOfBirth === null || dateOfBirth === undefined)
            throw new Error("The parameter 'dateOfBirth' cannot be null.");
        else
            content_.append("DateOfBirth", dateOfBirth.toJSON());
        if (primaryGameId === null || primaryGameId === undefined)
            throw new Error("The parameter 'primaryGameId' cannot be null.");
        else
            content_.append("PrimaryGameId", primaryGameId.toString());
        if (profileImage === null || profileImage === undefined)
            throw new Error("The parameter 'profileImage' cannot be null.");
        else
            content_.append("ProfileImage", profileImage.data, profileImage.fileName ? profileImage.fileName : "ProfileImage");
        if (headerImage === null || headerImage === undefined)
            throw new Error("The parameter 'headerImage' cannot be null.");
        else
            content_.append("HeaderImage", headerImage.data, headerImage.fileName ? headerImage.fileName : "HeaderImage");
        if (playerId === null || playerId === undefined)
            throw new Error("The parameter 'playerId' cannot be null.");
        else
            content_.append("PlayerId", playerId.toString());
        if (personalStreamId === null || personalStreamId === undefined)
            throw new Error("The parameter 'personalStreamId' cannot be null.");
        else
            content_.append("PersonalStreamId", personalStreamId.toString());
        if (website === null || website === undefined)
            throw new Error("The parameter 'website' cannot be null.");
        else
            content_.append("Website", website.toString());
        if (facebook === null || facebook === undefined)
            throw new Error("The parameter 'facebook' cannot be null.");
        else
            content_.append("Facebook", facebook.toString());
        if (twitter === null || twitter === undefined)
            throw new Error("The parameter 'twitter' cannot be null.");
        else
            content_.append("Twitter", twitter.toString());
        if (youtube === null || youtube === undefined)
            throw new Error("The parameter 'youtube' cannot be null.");
        else
            content_.append("Youtube", youtube.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBroadcasttalentsPATCH(_response);
        });
    }

    protected processBroadcasttalentsPATCH(response: AxiosResponse): Promise<ModBroadcastTalentRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModBroadcastTalentRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModBroadcastTalentRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete broadcast talent
     * @param id Broadcast Talent Id
     * @return Error
     */
    broadcasttalentsDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelBroadcastTalentRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/broadcasttalents/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBroadcasttalentsDELETE(_response);
        });
    }

    protected processBroadcasttalentsDELETE(response: AxiosResponse): Promise<DelBroadcastTalentRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelBroadcastTalentRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelBroadcastTalentRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get broadcast talents Media items
     * @param id (optional) Broadcast Talent Id
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    mediaItemsGET(id: number | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetMediaItemsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/broadcasttalents/media-items?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMediaItemsGET(_response);
        });
    }

    protected processMediaItemsGET(response: AxiosResponse): Promise<GetMediaItemsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetMediaItemsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetMediaItemsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add broadcast talent new Media items
     * @param broadcastTalentId Broadcast Talent Id
     * @param mediaItems Media item Ids
     * @return Error
     */
    mediaItemsPOST(broadcastTalentId: number, mediaItems: number[], cancelToken?: CancelToken | undefined): Promise<AddMediaItemsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/broadcasttalents/media-items?";
          if (broadcastTalentId === undefined || broadcastTalentId === null)
            throw new Error("The parameter 'broadcastTalentId' must be defined and cannot be null.");
          else
            url_ += "BroadcastTalentId=" + encodeURIComponent("" + broadcastTalentId) + "&";
          if (mediaItems === undefined || mediaItems === null)
            throw new Error("The parameter 'mediaItems' must be defined and cannot be null.");
          else
            mediaItems && mediaItems.forEach(item => { url_ += "MediaItems=" + encodeURIComponent("" + item) + "&"; });
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMediaItemsPOST(_response);
        });
    }

    protected processMediaItemsPOST(response: AxiosResponse): Promise<AddMediaItemsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddMediaItemsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddMediaItemsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete broadcast talent Media item
     * @param broadcastid Broadcast Talent Id
     * @param mediaitemid Media Item Id
     * @return Error
     */
    mediaItemsDELETE(broadcastid: number, mediaitemid: number, cancelToken?: CancelToken | undefined): Promise<DelMediaItemRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/broadcasttalents/{broadcastid}/media-items/{mediaitemid}";
        if (broadcastid === undefined || broadcastid === null)
          throw new Error("The parameter 'broadcastid' must be defined.");
        url_ = url_.replace("{broadcastid}", encodeURIComponent("" + broadcastid));
        if (mediaitemid === undefined || mediaitemid === null)
          throw new Error("The parameter 'mediaitemid' must be defined.");
        url_ = url_.replace("{mediaitemid}", encodeURIComponent("" + mediaitemid));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMediaItemsDELETE(_response);
        });
    }

    protected processMediaItemsDELETE(response: AxiosResponse): Promise<DelMediaItemRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelMediaItemRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelMediaItemRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get EnumRet List
     * @param api_version (optional) 
     * @return Success
     */
    enumret(api_version: string | undefined, cancelToken?: CancelToken | undefined): Promise<Int32StringDictionaryApiRespBase> {
        let url_ = this.baseUrl + "/enumret?";
        if (api_version === null)
            throw new Error("The parameter 'api_version' cannot be null.");
        else if (api_version !== undefined)
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEnumret(_response);
        });
    }

    protected processEnumret(response: AxiosResponse): Promise<Int32StringDictionaryApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Int32StringDictionaryApiRespBase.fromJS(resultData200);
            return Promise.resolve<Int32StringDictionaryApiRespBase>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Int32StringDictionaryApiRespBase>(null as any);
    }

    /**
     * Get folders
     * @param parentId (optional) 
     * @param uploadType (optional) 
     * @param sort (optional) 
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    crewFoldersGET(parentId: number | undefined, uploadType: string | undefined, sort: EnumFieldSort | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetCrewFoldersRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/files/crew-folders?";
        if (parentId === null)
            throw new Error("The parameter 'parentId' cannot be null.");
        else if (parentId !== undefined)
            url_ += "ParentId=" + encodeURIComponent("" + parentId) + "&";
        if (uploadType === null)
            throw new Error("The parameter 'uploadType' cannot be null.");
        else if (uploadType !== undefined)
            url_ += "UploadType=" + encodeURIComponent("" + uploadType) + "&";
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        else if (sort !== undefined)
            url_ += "Sort=" + encodeURIComponent("" + sort) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCrewFoldersGET(_response);
        });
    }

    protected processCrewFoldersGET(response: AxiosResponse): Promise<GetCrewFoldersRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetCrewFoldersRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetCrewFoldersRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add folder
     * @param parentId (optional) 
     * @param folderName (optional) 
     * @return Error
     */
    crewFoldersPOST(parentId: number | undefined, folderName: string | undefined, cancelToken?: CancelToken | undefined): Promise<AddFolderRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/files/crew-folders";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (parentId === null || parentId === undefined)
            throw new Error("The parameter 'parentId' cannot be null.");
        else
            content_.append("ParentId", parentId.toString());
        if (folderName === null || folderName === undefined)
            throw new Error("The parameter 'folderName' cannot be null.");
        else
            content_.append("FolderName", folderName.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCrewFoldersPOST(_response);
        });
    }

    protected processCrewFoldersPOST(response: AxiosResponse): Promise<AddFolderRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddFolderRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddFolderRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get files
     * @param fileName (optional) 
     * @param uploader (optional) 
     * @param uploadedFrom (optional) 
     * @param uploadedTo (optional) 
     * @param nameSort (optional) 
     * @param uploadedSort (optional) 
     * @param uploaderSort (optional) 
     * @param sizeSort (optional) 
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    crewFilesGET(folderId: number, fileName: string | undefined, uploader: string | undefined, uploadedFrom: number | undefined, uploadedTo: number | undefined, nameSort: EnumFieldSort | undefined, uploadedSort: EnumFieldSort | undefined, uploaderSort: EnumFieldSort | undefined, sizeSort: EnumFieldSort | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetCrewFilesRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/files/crew-files?";
          if (folderId === undefined || folderId === null)
            throw new Error("The parameter 'folderId' must be defined and cannot be null.");
          else
            url_ += "FolderId=" + encodeURIComponent("" + folderId) + "&";
        if (fileName === null)
            throw new Error("The parameter 'fileName' cannot be null.");
        else if (fileName !== undefined)
            url_ += "FileName=" + encodeURIComponent("" + fileName) + "&";
        if (uploader === null)
            throw new Error("The parameter 'uploader' cannot be null.");
        else if (uploader !== undefined)
            url_ += "Uploader=" + encodeURIComponent("" + uploader) + "&";
        if (uploadedFrom === null)
            throw new Error("The parameter 'uploadedFrom' cannot be null.");
        else if (uploadedFrom !== undefined)
            url_ += "UploadedFrom=" + encodeURIComponent("" + uploadedFrom) + "&";
        if (uploadedTo === null)
            throw new Error("The parameter 'uploadedTo' cannot be null.");
        else if (uploadedTo !== undefined)
            url_ += "UploadedTo=" + encodeURIComponent("" + uploadedTo) + "&";
        if (nameSort === null)
            throw new Error("The parameter 'nameSort' cannot be null.");
        else if (nameSort !== undefined)
            url_ += "NameSort=" + encodeURIComponent("" + nameSort) + "&";
        if (uploadedSort === null)
            throw new Error("The parameter 'uploadedSort' cannot be null.");
        else if (uploadedSort !== undefined)
            url_ += "UploadedSort=" + encodeURIComponent("" + uploadedSort) + "&";
        if (uploaderSort === null)
            throw new Error("The parameter 'uploaderSort' cannot be null.");
        else if (uploaderSort !== undefined)
            url_ += "UploaderSort=" + encodeURIComponent("" + uploaderSort) + "&";
        if (sizeSort === null)
            throw new Error("The parameter 'sizeSort' cannot be null.");
        else if (sizeSort !== undefined)
            url_ += "SizeSort=" + encodeURIComponent("" + sizeSort) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCrewFilesGET(_response);
        });
    }

    protected processCrewFilesGET(response: AxiosResponse): Promise<GetCrewFilesRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetCrewFilesRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetCrewFilesRespApiRespBase>(resultdefault);

        }
    }

    /**
     * add crew file
     * @param folderId (optional) 
     * @param fileName (optional) 
     * @param file (optional) 
     * @return Error
     */
    crewFilesPOST(folderId: number | undefined, fileName: string | undefined, file: FileParameter | undefined, cancelToken?: CancelToken | undefined): Promise<AddFileRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/files/crew-files";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (folderId === null || folderId === undefined)
            throw new Error("The parameter 'folderId' cannot be null.");
        else
            content_.append("FolderId", folderId.toString());
        if (fileName === null || fileName === undefined)
            throw new Error("The parameter 'fileName' cannot be null.");
        else
            content_.append("FileName", fileName.toString());
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("File", file.data, file.fileName ? file.fileName : "File");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCrewFilesPOST(_response);
        });
    }

    protected processCrewFilesPOST(response: AxiosResponse): Promise<AddFileRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddFileRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddFileRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify folder
     * @param id FolderId
     * @param id (optional) 
     * @param parentId (optional) 
     * @param name (optional) 
     * @return Error
     */
    crewFoldersPATCH(id: number, id: number | undefined, parentId: number | undefined, name: string | undefined, cancelToken?: CancelToken | undefined): Promise<ModFolderRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/files/crew-folders/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("Id", id.toString());
        if (parentId === null || parentId === undefined)
            throw new Error("The parameter 'parentId' cannot be null.");
        else
            content_.append("ParentId", parentId.toString());
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCrewFoldersPATCH(_response);
        });
    }

    protected processCrewFoldersPATCH(response: AxiosResponse): Promise<ModFolderRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModFolderRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModFolderRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete folder
     * @param id FolderId
     * @return Error
     */
    crewFoldersDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelFolderRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/files/crew-folders/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCrewFoldersDELETE(_response);
        });
    }

    protected processCrewFoldersDELETE(response: AxiosResponse): Promise<DelFolderRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelFolderRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelFolderRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get fuzzy folders
     * @param maxCount (optional) 
     * @return Error
     */
    fuzzyFolders(folderId: number, fuzzyName: string, maxCount: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetFuzzyFoldersRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/files/fuzzy-folders?";
          if (folderId === undefined || folderId === null)
            throw new Error("The parameter 'folderId' must be defined and cannot be null.");
          else
            url_ += "FolderId=" + encodeURIComponent("" + folderId) + "&";
          if (fuzzyName === undefined || fuzzyName === null)
            throw new Error("The parameter 'fuzzyName' must be defined and cannot be null.");
          else
            url_ += "FuzzyName=" + encodeURIComponent("" + fuzzyName) + "&";
        if (maxCount === null)
            throw new Error("The parameter 'maxCount' cannot be null.");
        else if (maxCount !== undefined)
            url_ += "MaxCount=" + encodeURIComponent("" + maxCount) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFuzzyFolders(_response);
        });
    }

    protected processFuzzyFolders(response: AxiosResponse): Promise<GetFuzzyFoldersRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetFuzzyFoldersRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetFuzzyFoldersRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify file
     * @param id FileId
     * @param fileId (optional) 
     * @param folderId (optional) 
     * @param fileName (optional) 
     * @return Error
     */
    crewFilesPATCH(id: number, fileId: number | undefined, folderId: number | undefined, fileName: string | undefined, cancelToken?: CancelToken | undefined): Promise<ModFileRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/files/crew-files/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (fileId === null || fileId === undefined)
            throw new Error("The parameter 'fileId' cannot be null.");
        else
            content_.append("FileId", fileId.toString());
        if (folderId === null || folderId === undefined)
            throw new Error("The parameter 'folderId' cannot be null.");
        else
            content_.append("FolderId", folderId.toString());
        if (fileName === null || fileName === undefined)
            throw new Error("The parameter 'fileName' cannot be null.");
        else
            content_.append("FileName", fileName.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCrewFilesPATCH(_response);
        });
    }

    protected processCrewFilesPATCH(response: AxiosResponse): Promise<ModFileRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModFileRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModFileRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete file
     * @param id FileId
     * @return Error
     */
    crewFilesDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelFileRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/files/crew-files/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCrewFilesDELETE(_response);
        });
    }

    protected processCrewFilesDELETE(response: AxiosResponse): Promise<DelFileRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelFileRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelFileRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get frontend site sections
     * @param id FrontendId
     * @return Error
     */
    frontendSiteSectionsGET(id: number, cancelToken?: CancelToken | undefined): Promise<GetFrontendSiteSectionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/frontend-site-sections/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFrontendSiteSectionsGET(_response);
        });
    }

    protected processFrontendSiteSectionsGET(response: AxiosResponse): Promise<GetFrontendSiteSectionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetFrontendSiteSectionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetFrontendSiteSectionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add frontend site sections
     * @param body (optional) Request
     * @return Error
     */
    frontendSiteSectionsPOST(body: AddFrontendSiteSectionsReq | undefined, cancelToken?: CancelToken | undefined): Promise<AddFrontendSiteSectionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/frontend-site-sections";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFrontendSiteSectionsPOST(_response);
        });
    }

    protected processFrontendSiteSectionsPOST(response: AxiosResponse): Promise<AddFrontendSiteSectionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddFrontendSiteSectionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddFrontendSiteSectionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify frontend site section
     * @param body (optional) Request
     * @return Error
     */
    frontendSiteSectionsPATCH(body: ModFrontendSiteSectionReq | undefined, cancelToken?: CancelToken | undefined): Promise<ModFrontendSiteSectionRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/frontend-site-sections";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFrontendSiteSectionsPATCH(_response);
        });
    }

    protected processFrontendSiteSectionsPATCH(response: AxiosResponse): Promise<ModFrontendSiteSectionRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModFrontendSiteSectionRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModFrontendSiteSectionRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete frontend site section
     * @param body (optional) Request
     * @return Error
     */
    frontendSiteSectionsDELETE(body: DelFrontendSiteSectionReq | undefined, cancelToken?: CancelToken | undefined): Promise<DelFrontendSiteSectionRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/frontend-site-sections";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFrontendSiteSectionsDELETE(_response);
        });
    }

    protected processFrontendSiteSectionsDELETE(response: AxiosResponse): Promise<DelFrontendSiteSectionRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelFrontendSiteSectionRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelFrontendSiteSectionRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get Func Types
     * @return Error
     */
    types2( cancelToken?: CancelToken | undefined): Promise<GetFuncTypesRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/funcs/types";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTypes2(_response);
        });
    }

    protected processTypes2(response: AxiosResponse): Promise<GetFuncTypesRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetFuncTypesRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetFuncTypesRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get Func Options
     * @return Error
     */
    options( cancelToken?: CancelToken | undefined): Promise<GetFuncOptionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/funcs/options";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processOptions(_response);
        });
    }

    protected processOptions(response: AxiosResponse): Promise<GetFuncOptionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetFuncOptionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetFuncOptionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get Funcs
     * @return Error
     */
    funcsGET( cancelToken?: CancelToken | undefined): Promise<GetFuncsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/funcs";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFuncsGET(_response);
        });
    }

    protected processFuncsGET(response: AxiosResponse): Promise<GetFuncsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetFuncsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetFuncsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add Func
     * @param funcId (optional) Func id
     * @param name (optional) Func name
     * @param code (optional) Func code
     * @param type (optional) 
     * @param parentId (optional) Parent func id
     * @param position (optional) Func position
     * @param url (optional) Func url
     * @param icon (optional) Func icon
     * @return Error
     */
    funcsPOST(funcId: number | undefined, name: string | undefined, code: string | undefined, type: EnumFuncType | undefined, parentId: number | undefined, position: number | undefined, url: string | undefined, icon: string | undefined, cancelToken?: CancelToken | undefined): Promise<AddFuncRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/funcs";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (funcId === null || funcId === undefined)
            throw new Error("The parameter 'funcId' cannot be null.");
        else
            content_.append("FuncId", funcId.toString());
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (code === null || code === undefined)
            throw new Error("The parameter 'code' cannot be null.");
        else
            content_.append("Code", code.toString());
        if (type === null || type === undefined)
            throw new Error("The parameter 'type' cannot be null.");
        else
            content_.append("Type", type.toString());
        if (parentId === null || parentId === undefined)
            throw new Error("The parameter 'parentId' cannot be null.");
        else
            content_.append("ParentId", parentId.toString());
        if (position === null || position === undefined)
            throw new Error("The parameter 'position' cannot be null.");
        else
            content_.append("Position", position.toString());
        if (url === null || url === undefined)
            throw new Error("The parameter 'url' cannot be null.");
        else
            content_.append("Url", url.toString());
        if (icon === null || icon === undefined)
            throw new Error("The parameter 'icon' cannot be null.");
        else
            content_.append("Icon", icon.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFuncsPOST(_response);
        });
    }

    protected processFuncsPOST(response: AxiosResponse): Promise<AddFuncRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddFuncRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddFuncRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get Func
     * @param id FuncId
     * @return Error
     */
    funcsGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetFuncRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/funcs/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFuncsGET2(_response);
        });
    }

    protected processFuncsGET2(response: AxiosResponse): Promise<GetFuncRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetFuncRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetFuncRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify Func
     * @param id FuncId
     * @param funcId (optional) Func id
     * @param name (optional) Func name
     * @param code (optional) Func code
     * @param type (optional) 
     * @param parentId (optional) Parent func id
     * @param position (optional) Func position
     * @param state (optional) 
     * @param url (optional) Func url
     * @param icon (optional) Func icon
     * @return Error
     */
    funcsPATCH(id: number, funcId: number | undefined, name: string | undefined, code: string | undefined, type: EnumFuncType | undefined, parentId: number | undefined, position: number | undefined, state: EnumState | undefined, url: string | undefined, icon: string | undefined, cancelToken?: CancelToken | undefined): Promise<ModFuncRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/funcs/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (funcId === null || funcId === undefined)
            throw new Error("The parameter 'funcId' cannot be null.");
        else
            content_.append("FuncId", funcId.toString());
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (code === null || code === undefined)
            throw new Error("The parameter 'code' cannot be null.");
        else
            content_.append("Code", code.toString());
        if (type === null || type === undefined)
            throw new Error("The parameter 'type' cannot be null.");
        else
            content_.append("Type", type.toString());
        if (parentId === null || parentId === undefined)
            throw new Error("The parameter 'parentId' cannot be null.");
        else
            content_.append("ParentId", parentId.toString());
        if (position === null || position === undefined)
            throw new Error("The parameter 'position' cannot be null.");
        else
            content_.append("Position", position.toString());
        if (state === null || state === undefined)
            throw new Error("The parameter 'state' cannot be null.");
        else
            content_.append("State", state.toString());
        if (url === null || url === undefined)
            throw new Error("The parameter 'url' cannot be null.");
        else
            content_.append("Url", url.toString());
        if (icon === null || icon === undefined)
            throw new Error("The parameter 'icon' cannot be null.");
        else
            content_.append("Icon", icon.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFuncsPATCH(_response);
        });
    }

    protected processFuncsPATCH(response: AxiosResponse): Promise<ModFuncRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModFuncRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModFuncRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete Func
     * @param id FuncId
     * @return Error
     */
    funcsDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelFuncRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/funcs/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFuncsDELETE(_response);
        });
    }

    protected processFuncsDELETE(response: AxiosResponse): Promise<DelFuncRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelFuncRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelFuncRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get fuzzy gameRaces
     * @param fuzzyPrefix (optional) if FuzzyPrefix = null will get list of all GameRaces
     * @param maxCount (optional) 
     * @return Error
     */
    fuzzy(fuzzyPrefix: string | undefined, maxCount: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetFuzzyGameRaceRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/gameraces/fuzzy?";
        if (fuzzyPrefix === null)
            throw new Error("The parameter 'fuzzyPrefix' cannot be null.");
        else if (fuzzyPrefix !== undefined)
            url_ += "FuzzyPrefix=" + encodeURIComponent("" + fuzzyPrefix) + "&";
        if (maxCount === null)
            throw new Error("The parameter 'maxCount' cannot be null.");
        else if (maxCount !== undefined)
            url_ += "MaxCount=" + encodeURIComponent("" + maxCount) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFuzzy(_response);
        });
    }

    protected processFuzzy(response: AxiosResponse): Promise<GetFuzzyGameRaceRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetFuzzyGameRaceRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetFuzzyGameRaceRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get game regions
     * @param gameId (optional) Game id
     * @param regionName (optional) Region name
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    gameRegionsGET(gameId: number | undefined, regionName: string | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetGameRegionsResp> {
        let url_ = this.baseUrl + "/api/v4/game-regions?";
        if (gameId === null)
            throw new Error("The parameter 'gameId' cannot be null.");
        else if (gameId !== undefined)
            url_ += "GameId=" + encodeURIComponent("" + gameId) + "&";
        if (regionName === null)
            throw new Error("The parameter 'regionName' cannot be null.");
        else if (regionName !== undefined)
            url_ += "RegionName=" + encodeURIComponent("" + regionName) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGameRegionsGET(_response);
        });
    }

    protected processGameRegionsGET(response: AxiosResponse): Promise<GetGameRegionsResp> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetGameRegionsResp.fromJS(resultDatadefault);
            return Promise.resolve<GetGameRegionsResp>(resultdefault);

        }
    }

    /**
     * Add game region
     * @param body (optional) 
     * @return Error
     */
    gameRegionsPOST(body: AddGameRegionReq | undefined, cancelToken?: CancelToken | undefined): Promise<AddGameRegionResp> {
        let url_ = this.baseUrl + "/api/v4/game-regions";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGameRegionsPOST(_response);
        });
    }

    protected processGameRegionsPOST(response: AxiosResponse): Promise<AddGameRegionResp> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddGameRegionResp.fromJS(resultDatadefault);
            return Promise.resolve<AddGameRegionResp>(resultdefault);

        }
    }

    /**
     * Get game region detail
     * @return Error
     */
    gameRegionsGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetGameRegionResp> {
        let url_ = this.baseUrl + "/api/v4/game-regions/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGameRegionsGET2(_response);
        });
    }

    protected processGameRegionsGET2(response: AxiosResponse): Promise<GetGameRegionResp> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetGameRegionResp.fromJS(resultDatadefault);
            return Promise.resolve<GetGameRegionResp>(resultdefault);

        }
    }

    /**
     * Modify game region
     * @param body (optional) 
     * @return Error
     */
    gameRegionsPATCH(id: number, body: ModGameRegionReq | undefined, cancelToken?: CancelToken | undefined): Promise<ModGameRegionResp> {
        let url_ = this.baseUrl + "/api/v4/game-regions/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGameRegionsPATCH(_response);
        });
    }

    protected processGameRegionsPATCH(response: AxiosResponse): Promise<ModGameRegionResp> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModGameRegionResp.fromJS(resultDatadefault);
            return Promise.resolve<ModGameRegionResp>(resultdefault);

        }
    }

    /**
     * Delete game region
     * @return Error
     */
    gameRegionsDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelGameRegionResp> {
        let url_ = this.baseUrl + "/api/v4/game-regions/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGameRegionsDELETE(_response);
        });
    }

    protected processGameRegionsDELETE(response: AxiosResponse): Promise<DelGameRegionResp> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelGameRegionResp.fromJS(resultDatadefault);
            return Promise.resolve<DelGameRegionResp>(resultdefault);

        }
    }

    /**
     * Get game region translations
     * @return Error
     */
    translationsGET(id: number, cancelToken?: CancelToken | undefined): Promise<GetGameRegionTranslationResp> {
        let url_ = this.baseUrl + "/api/v4/game-regions/{id}/translations";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTranslationsGET(_response);
        });
    }

    protected processTranslationsGET(response: AxiosResponse): Promise<GetGameRegionTranslationResp> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetGameRegionTranslationResp.fromJS(resultDatadefault);
            return Promise.resolve<GetGameRegionTranslationResp>(resultdefault);

        }
    }

    /**
     * Modify game region translation
     * @param body (optional) 
     * @return Error
     */
    translationsPATCH(id: number, body: ModGameRegionTranslationReq | undefined, cancelToken?: CancelToken | undefined): Promise<ModGameRegionTranslationRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/game-regions/{id}/translations";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTranslationsPATCH(_response);
        });
    }

    protected processTranslationsPATCH(response: AxiosResponse): Promise<ModGameRegionTranslationRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModGameRegionTranslationRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModGameRegionTranslationRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get games by condition
     * @param gameName (optional) Game name
     * @param isLegacy (optional) Is legacy
     * @param hasPlayerRankings (optional) Has player rankings
     * @param hasTeamRankings (optional) Has team rankings
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    gamesGET(gameName: string | undefined, isLegacy: boolean | undefined, hasPlayerRankings: boolean | undefined, hasTeamRankings: boolean | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetGamesRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/games?";
        if (gameName === null)
            throw new Error("The parameter 'gameName' cannot be null.");
        else if (gameName !== undefined)
            url_ += "GameName=" + encodeURIComponent("" + gameName) + "&";
        if (isLegacy === null)
            throw new Error("The parameter 'isLegacy' cannot be null.");
        else if (isLegacy !== undefined)
            url_ += "IsLegacy=" + encodeURIComponent("" + isLegacy) + "&";
        if (hasPlayerRankings === null)
            throw new Error("The parameter 'hasPlayerRankings' cannot be null.");
        else if (hasPlayerRankings !== undefined)
            url_ += "HasPlayerRankings=" + encodeURIComponent("" + hasPlayerRankings) + "&";
        if (hasTeamRankings === null)
            throw new Error("The parameter 'hasTeamRankings' cannot be null.");
        else if (hasTeamRankings !== undefined)
            url_ += "HasTeamRankings=" + encodeURIComponent("" + hasTeamRankings) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGamesGET(_response);
        });
    }

    protected processGamesGET(response: AxiosResponse): Promise<GetGamesRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetGamesRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetGamesRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add game
     * @param name (optional) Game name
     * @param hasPlayerRankings (optional) Has player rankings
     * @param hasTeamRankings (optional) Has team rankings
     * @param hasStreams (optional) Has streams
     * @param gridId (optional) Grid id
     * @param steamAppId (optional) Steam app id
     * @param twitchGameId (optional) Twitch game id
     * @param iconImageFile (optional) Icon image file
     * @param isLegacy (optional) Is legacy
     * @param recommendedReplayCount (optional) Recommended replay count
     * @return Error
     */
    gamesPOST(name: string | undefined, hasPlayerRankings: boolean | undefined, hasTeamRankings: boolean | undefined, hasStreams: boolean | undefined, gridId: number | undefined, steamAppId: number | undefined, twitchGameId: number | undefined, iconImageFile: FileParameter | undefined, isLegacy: boolean | undefined, recommendedReplayCount: number | undefined, cancelToken?: CancelToken | undefined): Promise<AddGameRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/games";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (hasPlayerRankings === null || hasPlayerRankings === undefined)
            throw new Error("The parameter 'hasPlayerRankings' cannot be null.");
        else
            content_.append("HasPlayerRankings", hasPlayerRankings.toString());
        if (hasTeamRankings === null || hasTeamRankings === undefined)
            throw new Error("The parameter 'hasTeamRankings' cannot be null.");
        else
            content_.append("HasTeamRankings", hasTeamRankings.toString());
        if (hasStreams === null || hasStreams === undefined)
            throw new Error("The parameter 'hasStreams' cannot be null.");
        else
            content_.append("HasStreams", hasStreams.toString());
        if (gridId === null || gridId === undefined)
            throw new Error("The parameter 'gridId' cannot be null.");
        else
            content_.append("GridId", gridId.toString());
        if (steamAppId === null || steamAppId === undefined)
            throw new Error("The parameter 'steamAppId' cannot be null.");
        else
            content_.append("SteamAppId", steamAppId.toString());
        if (twitchGameId === null || twitchGameId === undefined)
            throw new Error("The parameter 'twitchGameId' cannot be null.");
        else
            content_.append("TwitchGameId", twitchGameId.toString());
        if (iconImageFile === null || iconImageFile === undefined)
            throw new Error("The parameter 'iconImageFile' cannot be null.");
        else
            content_.append("IconImageFile", iconImageFile.data, iconImageFile.fileName ? iconImageFile.fileName : "IconImageFile");
        if (isLegacy === null || isLegacy === undefined)
            throw new Error("The parameter 'isLegacy' cannot be null.");
        else
            content_.append("IsLegacy", isLegacy.toString());
        if (recommendedReplayCount === null || recommendedReplayCount === undefined)
            throw new Error("The parameter 'recommendedReplayCount' cannot be null.");
        else
            content_.append("RecommendedReplayCount", recommendedReplayCount.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGamesPOST(_response);
        });
    }

    protected processGamesPOST(response: AxiosResponse): Promise<AddGameRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddGameRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddGameRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get game
     * @param id GameId
     * @return Error
     */
    gamesGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetGameRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/games/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGamesGET2(_response);
        });
    }

    protected processGamesGET2(response: AxiosResponse): Promise<GetGameRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetGameRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetGameRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete game
     * @param id GameId
     * @return Error
     */
    gamesDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelGameRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/games/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGamesDELETE(_response);
        });
    }

    protected processGamesDELETE(response: AxiosResponse): Promise<DelGameRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelGameRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelGameRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify game
     * @param id (optional) GameId
     * @param gameId (optional) Game id
     * @param name (optional) Game name
     * @param hasPlayerRankings (optional) Has player rankings
     * @param hasTeamRankings (optional) Has team rankings
     * @param hasStreams (optional) Has streams
     * @param gridId (optional) Grid id
     * @param steamAppId (optional) Steam app id
     * @param twitchGameId (optional) Twitch game id
     * @param iconImageFile (optional) Icon image file
     * @param isLegacy (optional) Is legacy
     * @param recommendedReplayCount (optional) Recommended replay count
     * @return Error
     */
    id(id: number | undefined, gameId: number | undefined, name: string | undefined, hasPlayerRankings: boolean | undefined, hasTeamRankings: boolean | undefined, hasStreams: boolean | undefined, gridId: number | undefined, steamAppId: number | undefined, twitchGameId: number | undefined, iconImageFile: FileParameter | undefined, isLegacy: boolean | undefined, recommendedReplayCount: number | undefined, cancelToken?: CancelToken | undefined): Promise<ModGameRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/games/id?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (gameId === null || gameId === undefined)
            throw new Error("The parameter 'gameId' cannot be null.");
        else
            content_.append("GameId", gameId.toString());
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (hasPlayerRankings === null || hasPlayerRankings === undefined)
            throw new Error("The parameter 'hasPlayerRankings' cannot be null.");
        else
            content_.append("HasPlayerRankings", hasPlayerRankings.toString());
        if (hasTeamRankings === null || hasTeamRankings === undefined)
            throw new Error("The parameter 'hasTeamRankings' cannot be null.");
        else
            content_.append("HasTeamRankings", hasTeamRankings.toString());
        if (hasStreams === null || hasStreams === undefined)
            throw new Error("The parameter 'hasStreams' cannot be null.");
        else
            content_.append("HasStreams", hasStreams.toString());
        if (gridId === null || gridId === undefined)
            throw new Error("The parameter 'gridId' cannot be null.");
        else
            content_.append("GridId", gridId.toString());
        if (steamAppId === null || steamAppId === undefined)
            throw new Error("The parameter 'steamAppId' cannot be null.");
        else
            content_.append("SteamAppId", steamAppId.toString());
        if (twitchGameId === null || twitchGameId === undefined)
            throw new Error("The parameter 'twitchGameId' cannot be null.");
        else
            content_.append("TwitchGameId", twitchGameId.toString());
        if (iconImageFile === null || iconImageFile === undefined)
            throw new Error("The parameter 'iconImageFile' cannot be null.");
        else
            content_.append("IconImageFile", iconImageFile.data, iconImageFile.fileName ? iconImageFile.fileName : "IconImageFile");
        if (isLegacy === null || isLegacy === undefined)
            throw new Error("The parameter 'isLegacy' cannot be null.");
        else
            content_.append("IsLegacy", isLegacy.toString());
        if (recommendedReplayCount === null || recommendedReplayCount === undefined)
            throw new Error("The parameter 'recommendedReplayCount' cannot be null.");
        else
            content_.append("RecommendedReplayCount", recommendedReplayCount.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processId(_response);
        });
    }

    protected processId(response: AxiosResponse): Promise<ModGameRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModGameRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModGameRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify game translations
     * @param body (optional) 
     * @return Error
     */
    translationsPATCH2(id: number, body: ModGameTranslationsReq | undefined, cancelToken?: CancelToken | undefined): Promise<ModGameTranslationsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/games/{id}/translations";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTranslationsPATCH2(_response);
        });
    }

    protected processTranslationsPATCH2(response: AxiosResponse): Promise<ModGameTranslationsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModGameTranslationsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModGameTranslationsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get fuzzy games
     * @param fuzzyPrefix (optional) if FuzzyPrefix = null will get list of all games
     * @param maxCount (optional) 
     * @return Error
     */
    fuzzy2(fuzzyPrefix: string | undefined, maxCount: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetFuzzyGamesRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/games/fuzzy?";
        if (fuzzyPrefix === null)
            throw new Error("The parameter 'fuzzyPrefix' cannot be null.");
        else if (fuzzyPrefix !== undefined)
            url_ += "FuzzyPrefix=" + encodeURIComponent("" + fuzzyPrefix) + "&";
        if (maxCount === null)
            throw new Error("The parameter 'maxCount' cannot be null.");
        else if (maxCount !== undefined)
            url_ += "MaxCount=" + encodeURIComponent("" + maxCount) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFuzzy2(_response);
        });
    }

    protected processFuzzy2(response: AxiosResponse): Promise<GetFuzzyGamesRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetFuzzyGamesRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetFuzzyGamesRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get sides by condition
     * @param name (optional) Side Name
     * @param gameId (optional) Side Game Id
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    gamesidesGET(name: string | undefined, gameId: number | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetSidesRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/gamesides?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (gameId === null)
            throw new Error("The parameter 'gameId' cannot be null.");
        else if (gameId !== undefined)
            url_ += "GameId=" + encodeURIComponent("" + gameId) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGamesidesGET(_response);
        });
    }

    protected processGamesidesGET(response: AxiosResponse): Promise<GetSidesRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetSidesRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetSidesRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add new game side
     * @param name (optional) Game Side Name
     * @param iconFile (optional) Icon file
     * @param gameId (optional) Side Game Id
     * @return Error
     */
    gamesidesPOST(name: string | undefined, iconFile: FileParameter | undefined, gameId: number | undefined, cancelToken?: CancelToken | undefined): Promise<AddSideRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/gamesides";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (iconFile === null || iconFile === undefined)
            throw new Error("The parameter 'iconFile' cannot be null.");
        else
            content_.append("IconFile", iconFile.data, iconFile.fileName ? iconFile.fileName : "IconFile");
        if (gameId === null || gameId === undefined)
            throw new Error("The parameter 'gameId' cannot be null.");
        else
            content_.append("GameId", gameId.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGamesidesPOST(_response);
        });
    }

    protected processGamesidesPOST(response: AxiosResponse): Promise<AddSideRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddSideRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddSideRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get game side
     * @param id Sides Id
     * @return Error
     */
    gamesidesGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetSideRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/gamesides/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGamesidesGET2(_response);
        });
    }

    protected processGamesidesGET2(response: AxiosResponse): Promise<GetSideRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetSideRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetSideRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify game side
     * @param id Game side Id
     * @param id (optional) Side Id
     * @param name (optional) Game Side Name
     * @param iconFile (optional) Icon file
     * @param gameId (optional) Side Game Id
     * @return Error
     */
    gamesidesPATCH(id: number, id: number | undefined, name: string | undefined, iconFile: FileParameter | undefined, gameId: number | undefined, cancelToken?: CancelToken | undefined): Promise<ModSideRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/gamesides/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("Id", id.toString());
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (iconFile === null || iconFile === undefined)
            throw new Error("The parameter 'iconFile' cannot be null.");
        else
            content_.append("IconFile", iconFile.data, iconFile.fileName ? iconFile.fileName : "IconFile");
        if (gameId === null || gameId === undefined)
            throw new Error("The parameter 'gameId' cannot be null.");
        else
            content_.append("GameId", gameId.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGamesidesPATCH(_response);
        });
    }

    protected processGamesidesPATCH(response: AxiosResponse): Promise<ModSideRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModSideRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModSideRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete game side
     * @param id Game side Id
     * @return Error
     */
    gamesidesDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelSideRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/gamesides/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGamesidesDELETE(_response);
        });
    }

    protected processGamesidesDELETE(response: AxiosResponse): Promise<DelSideRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelSideRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelSideRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get game side translations
     * @param id Sides Id
     * @return Error
     */
    translationsGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetSideTranslationsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/gamesides/{id}/translations";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTranslationsGET2(_response);
        });
    }

    protected processTranslationsGET2(response: AxiosResponse): Promise<GetSideTranslationsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetSideTranslationsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetSideTranslationsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify game side translations
     * @param id Game side Id
     * @param body (optional) Request
     * @return Error
     */
    translationsPATCH3(id: number, body: ModSideTranslationsReq | undefined, cancelToken?: CancelToken | undefined): Promise<ModSideTranslationsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/gamesides/{id}/translations";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTranslationsPATCH3(_response);
        });
    }

    protected processTranslationsPATCH3(response: AxiosResponse): Promise<ModSideTranslationsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModSideTranslationsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModSideTranslationsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get group options
     * @return Error
     */
    groupOptions( cancelToken?: CancelToken | undefined): Promise<GetGroupOptionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/groups/group-options";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGroupOptions(_response);
        });
    }

    protected processGroupOptions(response: AxiosResponse): Promise<GetGroupOptionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetGroupOptionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetGroupOptionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get group options by user
     * @return Error
     */
    groupOptionsByUser( cancelToken?: CancelToken | undefined): Promise<GetGroupOptionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/groups/group-options-by-user";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGroupOptionsByUser(_response);
        });
    }

    protected processGroupOptionsByUser(response: AxiosResponse): Promise<GetGroupOptionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetGroupOptionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetGroupOptionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get Groups
     * @param groupIds (optional) Group ids
     * @param remark (optional) Group remark
     * @param frontendIds (optional) Frontend ids
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    groupsGET(groupIds: number[] | undefined, remark: string | undefined, frontendIds: number[] | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetGroupsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/groups?";
        if (groupIds === null)
            throw new Error("The parameter 'groupIds' cannot be null.");
        else if (groupIds !== undefined)
            groupIds && groupIds.forEach(item => { url_ += "GroupIds=" + encodeURIComponent("" + item) + "&"; });
        if (remark === null)
            throw new Error("The parameter 'remark' cannot be null.");
        else if (remark !== undefined)
            url_ += "Remark=" + encodeURIComponent("" + remark) + "&";
        if (frontendIds === null)
            throw new Error("The parameter 'frontendIds' cannot be null.");
        else if (frontendIds !== undefined)
            frontendIds && frontendIds.forEach(item => { url_ += "FrontendIds=" + encodeURIComponent("" + item) + "&"; });
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGroupsGET(_response);
        });
    }

    protected processGroupsGET(response: AxiosResponse): Promise<GetGroupsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetGroupsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetGroupsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add group
     * @param body (optional) Request
     * @return Error
     */
    groupsPOST(body: AddGroupReq | undefined, cancelToken?: CancelToken | undefined): Promise<AddGroupRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/groups";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGroupsPOST(_response);
        });
    }

    protected processGroupsPOST(response: AxiosResponse): Promise<AddGroupRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddGroupRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddGroupRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get Group
     * @param id GroupId
     * @return Error
     */
    groupsGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetGroupRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/groups/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGroupsGET2(_response);
        });
    }

    protected processGroupsGET2(response: AxiosResponse): Promise<GetGroupRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetGroupRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetGroupRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify Group
     * @param id GroupId
     * @param body (optional) Request
     * @return Error
     */
    groupsPATCH(id: number, body: ModGroupReq | undefined, cancelToken?: CancelToken | undefined): Promise<ModGroupRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/groups/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGroupsPATCH(_response);
        });
    }

    protected processGroupsPATCH(response: AxiosResponse): Promise<ModGroupRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModGroupRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModGroupRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete Group
     * @param id GroupId
     * @return Error
     */
    groupsDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelGroupRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/groups/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGroupsDELETE(_response);
        });
    }

    protected processGroupsDELETE(response: AxiosResponse): Promise<DelGroupRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelGroupRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelGroupRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get group blank permissions
     * @return Error
     */
    blankPermissions( cancelToken?: CancelToken | undefined): Promise<GetGroupBlankPermissionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/groups/blank-permissions";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBlankPermissions(_response);
        });
    }

    protected processBlankPermissions(response: AxiosResponse): Promise<GetGroupBlankPermissionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetGroupBlankPermissionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetGroupBlankPermissionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get Group Templates
     * @return Error
     */
    templates( cancelToken?: CancelToken | undefined): Promise<GetGroupTemplatesRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/groups/templates";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTemplates(_response);
        });
    }

    protected processTemplates(response: AxiosResponse): Promise<GetGroupTemplatesRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetGroupTemplatesRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetGroupTemplatesRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Assign group to ser
     * @param body (optional) Request
     * @return Error
     */
    assignGroup(body: AssignGroupReq | undefined, cancelToken?: CancelToken | undefined): Promise<AssignGroupRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/groups/assign-group";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAssignGroup(_response);
        });
    }

    protected processAssignGroup(response: AxiosResponse): Promise<AssignGroupRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AssignGroupRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AssignGroupRespApiRespBase>(resultdefault);

        }
    }

    /**
     * UnAssign group from user
     * @param body (optional) Request
     * @return Error
     */
    unassignGroup(body: UnAssignGroupReq | undefined, cancelToken?: CancelToken | undefined): Promise<UnAssignGroupRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/groups/unassign-group";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUnassignGroup(_response);
        });
    }

    protected processUnassignGroup(response: AxiosResponse): Promise<UnAssignGroupRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = UnAssignGroupRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<UnAssignGroupRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get users by group
     * @return Error
     */
    usersGET(id: number, cancelToken?: CancelToken | undefined): Promise<GetUsersByGroupRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/groups/{id}/users";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUsersGET(_response);
        });
    }

    protected processUsersGET(response: AxiosResponse): Promise<GetUsersByGroupRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetUsersByGroupRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetUsersByGroupRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get fuzzy users by group
     * @param maxCount (optional) 
     * @return Error
     */
    fuzzyUsers(id: number, fuzzyPrefix: string, maxCount: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetFuzzyUsersByGroupRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/groups/{id}/fuzzy-users?";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          if (fuzzyPrefix === undefined || fuzzyPrefix === null)
            throw new Error("The parameter 'fuzzyPrefix' must be defined and cannot be null.");
          else
            url_ += "FuzzyPrefix=" + encodeURIComponent("" + fuzzyPrefix) + "&";
        if (maxCount === null)
            throw new Error("The parameter 'maxCount' cannot be null.");
        else if (maxCount !== undefined)
            url_ += "MaxCount=" + encodeURIComponent("" + maxCount) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFuzzyUsers(_response);
        });
    }

    protected processFuzzyUsers(response: AxiosResponse): Promise<GetFuzzyUsersByGroupRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetFuzzyUsersByGroupRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetFuzzyUsersByGroupRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get heroes by condition
     * @param name (optional) Hero Name
     * @param title (optional) Hero Title
     * @param gameId (optional) Hero Game Id
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    heroesGET(name: string | undefined, title: string | undefined, gameId: number | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetHeroesRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/heroes?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (title === null)
            throw new Error("The parameter 'title' cannot be null.");
        else if (title !== undefined)
            url_ += "Title=" + encodeURIComponent("" + title) + "&";
        if (gameId === null)
            throw new Error("The parameter 'gameId' cannot be null.");
        else if (gameId !== undefined)
            url_ += "GameId=" + encodeURIComponent("" + gameId) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHeroesGET(_response);
        });
    }

    protected processHeroesGET(response: AxiosResponse): Promise<GetHeroesRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetHeroesRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetHeroesRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add new game Hero
     * @param name (optional) Game Hero Name
     * @param gameId (optional) Hero Game Id
     * @param title (optional) Title
     * @param referredToBy (optional) ReferredToBy
     * @param tagline (optional) Tagline
     * @param description (optional) Description
     * @param imageFile (optional) Image file
     * @param iconFile (optional) Icon file
     * @return Error
     */
    heroesPOST(name: string | undefined, gameId: number | undefined, title: string | undefined, referredToBy: number | undefined, tagline: string | undefined, description: string | undefined, imageFile: FileParameter | undefined, iconFile: FileParameter | undefined, cancelToken?: CancelToken | undefined): Promise<AddHeroRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/heroes";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (gameId === null || gameId === undefined)
            throw new Error("The parameter 'gameId' cannot be null.");
        else
            content_.append("GameId", gameId.toString());
        if (title === null || title === undefined)
            throw new Error("The parameter 'title' cannot be null.");
        else
            content_.append("Title", title.toString());
        if (referredToBy === null || referredToBy === undefined)
            throw new Error("The parameter 'referredToBy' cannot be null.");
        else
            content_.append("ReferredToBy", referredToBy.toString());
        if (tagline === null || tagline === undefined)
            throw new Error("The parameter 'tagline' cannot be null.");
        else
            content_.append("Tagline", tagline.toString());
        if (description === null || description === undefined)
            throw new Error("The parameter 'description' cannot be null.");
        else
            content_.append("Description", description.toString());
        if (imageFile === null || imageFile === undefined)
            throw new Error("The parameter 'imageFile' cannot be null.");
        else
            content_.append("ImageFile", imageFile.data, imageFile.fileName ? imageFile.fileName : "ImageFile");
        if (iconFile === null || iconFile === undefined)
            throw new Error("The parameter 'iconFile' cannot be null.");
        else
            content_.append("IconFile", iconFile.data, iconFile.fileName ? iconFile.fileName : "IconFile");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHeroesPOST(_response);
        });
    }

    protected processHeroesPOST(response: AxiosResponse): Promise<AddHeroRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddHeroRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddHeroRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get game hero
     * @param id Hero Id
     * @return Error
     */
    heroesGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetHeroRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/heroes/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHeroesGET2(_response);
        });
    }

    protected processHeroesGET2(response: AxiosResponse): Promise<GetHeroRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetHeroRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetHeroRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify game Hero
     * @param id game Hero Id
     * @param id (optional) Game Hero Id
     * @param name (optional) Game Hero Name
     * @param gameId (optional) Hero Game Id
     * @param title (optional) Title
     * @param referredToBy (optional) ReferredToBy
     * @param tagline (optional) Tagline
     * @param description (optional) Description
     * @param imageFile (optional) Image file
     * @param iconFile (optional) Icon file
     * @return Error
     */
    heroesPATCH(id: number, id: number | undefined, name: string | undefined, gameId: number | undefined, title: string | undefined, referredToBy: number | undefined, tagline: string | undefined, description: string | undefined, imageFile: FileParameter | undefined, iconFile: FileParameter | undefined, cancelToken?: CancelToken | undefined): Promise<ModHeroRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/heroes/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("Id", id.toString());
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (gameId === null || gameId === undefined)
            throw new Error("The parameter 'gameId' cannot be null.");
        else
            content_.append("GameId", gameId.toString());
        if (title === null || title === undefined)
            throw new Error("The parameter 'title' cannot be null.");
        else
            content_.append("Title", title.toString());
        if (referredToBy === null || referredToBy === undefined)
            throw new Error("The parameter 'referredToBy' cannot be null.");
        else
            content_.append("ReferredToBy", referredToBy.toString());
        if (tagline === null || tagline === undefined)
            throw new Error("The parameter 'tagline' cannot be null.");
        else
            content_.append("Tagline", tagline.toString());
        if (description === null || description === undefined)
            throw new Error("The parameter 'description' cannot be null.");
        else
            content_.append("Description", description.toString());
        if (imageFile === null || imageFile === undefined)
            throw new Error("The parameter 'imageFile' cannot be null.");
        else
            content_.append("ImageFile", imageFile.data, imageFile.fileName ? imageFile.fileName : "ImageFile");
        if (iconFile === null || iconFile === undefined)
            throw new Error("The parameter 'iconFile' cannot be null.");
        else
            content_.append("IconFile", iconFile.data, iconFile.fileName ? iconFile.fileName : "IconFile");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHeroesPATCH(_response);
        });
    }

    protected processHeroesPATCH(response: AxiosResponse): Promise<ModHeroRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModHeroRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModHeroRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete game Hero
     * @param id game Hero Id
     * @return Error
     */
    heroesDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelHeroRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/heroes/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHeroesDELETE(_response);
        });
    }

    protected processHeroesDELETE(response: AxiosResponse): Promise<DelHeroRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelHeroRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelHeroRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get game hero translations
     * @param id heroes Id
     * @return Error
     */
    translationsGET3(id: number, cancelToken?: CancelToken | undefined): Promise<GetHeroTranslationsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/heroes/{id}/translations";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTranslationsGET3(_response);
        });
    }

    protected processTranslationsGET3(response: AxiosResponse): Promise<GetHeroTranslationsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetHeroTranslationsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetHeroTranslationsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify game Hero translations
     * @param id game Hero Id
     * @param body (optional) Request
     * @return Error
     */
    translationsPATCH4(id: number, body: ModHeroTranslationsReq | undefined, cancelToken?: CancelToken | undefined): Promise<ModHeroTranslationsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/heroes/{id}/translations";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTranslationsPATCH4(_response);
        });
    }

    protected processTranslationsPATCH4(response: AxiosResponse): Promise<ModHeroTranslationsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModHeroTranslationsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModHeroTranslationsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Logout
     * @param refreshToken (optional) RefreshToken
     * @return Error
     */
    logoutPOST(refreshToken: string | undefined, cancelToken?: CancelToken | undefined): Promise<LogoutRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/logout?";
        if (refreshToken === null)
            throw new Error("The parameter 'refreshToken' cannot be null.");
        else if (refreshToken !== undefined)
            url_ += "refreshToken=" + encodeURIComponent("" + refreshToken) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogoutPOST(_response);
        });
    }

    protected processLogoutPOST(response: AxiosResponse): Promise<LogoutRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = LogoutRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<LogoutRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get Log Levels
     * @return Success
     */
    logLevels( cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v4/logs/log-levels";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogLevels(_response);
        });
    }

    protected processLogLevels(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Get Api Logs
     * @param from (optional) From
     * @param to (optional) To
     * @param prefix (optional) Prefix
     * @param httpStatusCode (optional) Http Status Code
     * @param ip (optional) IP Address
     * @param path (optional) Path
     * @param content (optional) Content
     * @param serverName (optional) Server Name
     * @param traceId (optional) Trace Id
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    apiLogs(from: number | undefined, to: number | undefined, prefix: string | undefined, httpStatusCode: number | undefined, ip: string | undefined, path: string | undefined, content: string | undefined, serverName: string | undefined, traceId: string | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetApiLogsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/logs/api-logs?";
        if (from === null)
            throw new Error("The parameter 'from' cannot be null.");
        else if (from !== undefined)
            url_ += "From=" + encodeURIComponent("" + from) + "&";
        if (to === null)
            throw new Error("The parameter 'to' cannot be null.");
        else if (to !== undefined)
            url_ += "To=" + encodeURIComponent("" + to) + "&";
        if (prefix === null)
            throw new Error("The parameter 'prefix' cannot be null.");
        else if (prefix !== undefined)
            url_ += "Prefix=" + encodeURIComponent("" + prefix) + "&";
        if (httpStatusCode === null)
            throw new Error("The parameter 'httpStatusCode' cannot be null.");
        else if (httpStatusCode !== undefined)
            url_ += "HttpStatusCode=" + encodeURIComponent("" + httpStatusCode) + "&";
        if (ip === null)
            throw new Error("The parameter 'ip' cannot be null.");
        else if (ip !== undefined)
            url_ += "Ip=" + encodeURIComponent("" + ip) + "&";
        if (path === null)
            throw new Error("The parameter 'path' cannot be null.");
        else if (path !== undefined)
            url_ += "Path=" + encodeURIComponent("" + path) + "&";
        if (content === null)
            throw new Error("The parameter 'content' cannot be null.");
        else if (content !== undefined)
            url_ += "Content=" + encodeURIComponent("" + content) + "&";
        if (serverName === null)
            throw new Error("The parameter 'serverName' cannot be null.");
        else if (serverName !== undefined)
            url_ += "ServerName=" + encodeURIComponent("" + serverName) + "&";
        if (traceId === null)
            throw new Error("The parameter 'traceId' cannot be null.");
        else if (traceId !== undefined)
            url_ += "TraceId=" + encodeURIComponent("" + traceId) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processApiLogs(_response);
        });
    }

    protected processApiLogs(response: AxiosResponse): Promise<GetApiLogsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetApiLogsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetApiLogsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get Api log
     * @param id Log Id
     * @return Error
     */
    apiLogs2(id: number, cancelToken?: CancelToken | undefined): Promise<GetApiLogRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/logs/api-logs/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processApiLogs2(_response);
        });
    }

    protected processApiLogs2(response: AxiosResponse): Promise<GetApiLogRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetApiLogRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetApiLogRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get System Logs
     * @param from (optional) From
     * @param to (optional) To
     * @param prefix (optional) Prefix
     * @param serverName (optional) Server Name
     * @param logger (optional) Logger
     * @param method (optional) Method
     * @param logLevel (optional) Log Level
     * @param traceId (optional) Trace Id
     * @param keyword (optional) Keyword
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    systemLogs(from: number | undefined, to: number | undefined, prefix: string | undefined, serverName: string | undefined, logger: string | undefined, method: string | undefined, logLevel: LogLevel | undefined, traceId: string | undefined, keyword: string | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetSystemLogsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/logs/system-logs?";
        if (from === null)
            throw new Error("The parameter 'from' cannot be null.");
        else if (from !== undefined)
            url_ += "From=" + encodeURIComponent("" + from) + "&";
        if (to === null)
            throw new Error("The parameter 'to' cannot be null.");
        else if (to !== undefined)
            url_ += "To=" + encodeURIComponent("" + to) + "&";
        if (prefix === null)
            throw new Error("The parameter 'prefix' cannot be null.");
        else if (prefix !== undefined)
            url_ += "Prefix=" + encodeURIComponent("" + prefix) + "&";
        if (serverName === null)
            throw new Error("The parameter 'serverName' cannot be null.");
        else if (serverName !== undefined)
            url_ += "ServerName=" + encodeURIComponent("" + serverName) + "&";
        if (logger === null)
            throw new Error("The parameter 'logger' cannot be null.");
        else if (logger !== undefined)
            url_ += "Logger=" + encodeURIComponent("" + logger) + "&";
        if (method === null)
            throw new Error("The parameter 'method' cannot be null.");
        else if (method !== undefined)
            url_ += "Method=" + encodeURIComponent("" + method) + "&";
        if (logLevel === null)
            throw new Error("The parameter 'logLevel' cannot be null.");
        else if (logLevel !== undefined)
            url_ += "LogLevel=" + encodeURIComponent("" + logLevel) + "&";
        if (traceId === null)
            throw new Error("The parameter 'traceId' cannot be null.");
        else if (traceId !== undefined)
            url_ += "TraceId=" + encodeURIComponent("" + traceId) + "&";
        if (keyword === null)
            throw new Error("The parameter 'keyword' cannot be null.");
        else if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSystemLogs(_response);
        });
    }

    protected processSystemLogs(response: AxiosResponse): Promise<GetSystemLogsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetSystemLogsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetSystemLogsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get System Log
     * @param id Log Id
     * @return Error
     */
    systemLogs2(id: number, cancelToken?: CancelToken | undefined): Promise<GetSystemLogRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/logs/system-logs/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSystemLogs2(_response);
        });
    }

    protected processSystemLogs2(response: AxiosResponse): Promise<GetSystemLogRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetSystemLogRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetSystemLogRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get maps by condition
     * @param name (optional) Maps Name
     * @param gameId (optional) Maps Game Id
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    mapsGET(name: string | undefined, gameId: number | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetMapsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/maps?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (gameId === null)
            throw new Error("The parameter 'gameId' cannot be null.");
        else if (gameId !== undefined)
            url_ += "GameId=" + encodeURIComponent("" + gameId) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMapsGET(_response);
        });
    }

    protected processMapsGET(response: AxiosResponse): Promise<GetMapsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetMapsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetMapsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add new game map
     * @param name (optional) Game Map Name
     * @param imageFile (optional) Image file
     * @param gameId (optional) Map Game Id
     * @return Error
     */
    mapsPOST(name: string | undefined, imageFile: FileParameter | undefined, gameId: number | undefined, cancelToken?: CancelToken | undefined): Promise<AddMapRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/maps";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (imageFile === null || imageFile === undefined)
            throw new Error("The parameter 'imageFile' cannot be null.");
        else
            content_.append("ImageFile", imageFile.data, imageFile.fileName ? imageFile.fileName : "ImageFile");
        if (gameId === null || gameId === undefined)
            throw new Error("The parameter 'gameId' cannot be null.");
        else
            content_.append("GameId", gameId.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMapsPOST(_response);
        });
    }

    protected processMapsPOST(response: AxiosResponse): Promise<AddMapRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddMapRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddMapRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get game map
     * @param id Maps Id
     * @return Error
     */
    mapsGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetMapRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/maps/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMapsGET2(_response);
        });
    }

    protected processMapsGET2(response: AxiosResponse): Promise<GetMapRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetMapRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetMapRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify game map
     * @param id game map Id
     * @param id (optional) Game Map Id
     * @param name (optional) Game Map Name
     * @param imageFile (optional) Image file
     * @param gameId (optional) Map Game Id
     * @return Error
     */
    mapsPATCH(id: number, id: number | undefined, name: string | undefined, imageFile: FileParameter | undefined, gameId: number | undefined, cancelToken?: CancelToken | undefined): Promise<ModMapRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/maps/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("Id", id.toString());
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (imageFile === null || imageFile === undefined)
            throw new Error("The parameter 'imageFile' cannot be null.");
        else
            content_.append("ImageFile", imageFile.data, imageFile.fileName ? imageFile.fileName : "ImageFile");
        if (gameId === null || gameId === undefined)
            throw new Error("The parameter 'gameId' cannot be null.");
        else
            content_.append("GameId", gameId.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMapsPATCH(_response);
        });
    }

    protected processMapsPATCH(response: AxiosResponse): Promise<ModMapRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModMapRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModMapRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete game map
     * @param id game map Id
     * @return Error
     */
    mapsDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelMapRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/maps/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMapsDELETE(_response);
        });
    }

    protected processMapsDELETE(response: AxiosResponse): Promise<DelMapRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelMapRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelMapRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get game map translations
     * @param id Maps Id
     * @return Error
     */
    translationsGET4(id: number, cancelToken?: CancelToken | undefined): Promise<GetMapTranslationsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/maps/{id}/translations";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTranslationsGET4(_response);
        });
    }

    protected processTranslationsGET4(response: AxiosResponse): Promise<GetMapTranslationsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetMapTranslationsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetMapTranslationsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify game map translations
     * @param id game map Id
     * @param body (optional) Request
     * @return Error
     */
    translationsPATCH5(id: number, body: ModMapTranslationsReq | undefined, cancelToken?: CancelToken | undefined): Promise<ModMapTranslationsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/maps/{id}/translations";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTranslationsPATCH5(_response);
        });
    }

    protected processTranslationsPATCH5(response: AxiosResponse): Promise<ModMapTranslationsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModMapTranslationsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModMapTranslationsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get media streams by condition
     * @param title (optional) Title
     * @param creator (optional) Creator(Username)
     * @param platformId (optional) Platform Id (TwitchTV = 1,Youtube_Channel = 10,Youtube_Stream = 11,Other = 99)
     * @param streamId (optional) Stream Id
     * @param gameId (optional) Game Id
     * @param isLive (optional) Is Live
     * @param createdFrom (optional) Created From
     * @param createdTo (optional) Created To
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    streamsGET(title: string | undefined, creator: string | undefined, platformId: EnumPlatform | undefined, streamId: string | undefined, gameId: number | undefined, isLive: boolean | undefined, createdFrom: number | undefined, createdTo: number | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetStreamsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/media/streams?";
        if (title === null)
            throw new Error("The parameter 'title' cannot be null.");
        else if (title !== undefined)
            url_ += "Title=" + encodeURIComponent("" + title) + "&";
        if (creator === null)
            throw new Error("The parameter 'creator' cannot be null.");
        else if (creator !== undefined)
            url_ += "Creator=" + encodeURIComponent("" + creator) + "&";
        if (platformId === null)
            throw new Error("The parameter 'platformId' cannot be null.");
        else if (platformId !== undefined)
            url_ += "PlatformId=" + encodeURIComponent("" + platformId) + "&";
        if (streamId === null)
            throw new Error("The parameter 'streamId' cannot be null.");
        else if (streamId !== undefined)
            url_ += "StreamId=" + encodeURIComponent("" + streamId) + "&";
        if (gameId === null)
            throw new Error("The parameter 'gameId' cannot be null.");
        else if (gameId !== undefined)
            url_ += "GameId=" + encodeURIComponent("" + gameId) + "&";
        if (isLive === null)
            throw new Error("The parameter 'isLive' cannot be null.");
        else if (isLive !== undefined)
            url_ += "IsLive=" + encodeURIComponent("" + isLive) + "&";
        if (createdFrom === null)
            throw new Error("The parameter 'createdFrom' cannot be null.");
        else if (createdFrom !== undefined)
            url_ += "CreatedFrom=" + encodeURIComponent("" + createdFrom) + "&";
        if (createdTo === null)
            throw new Error("The parameter 'createdTo' cannot be null.");
        else if (createdTo !== undefined)
            url_ += "CreatedTo=" + encodeURIComponent("" + createdTo) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processStreamsGET(_response);
        });
    }

    protected processStreamsGET(response: AxiosResponse): Promise<GetStreamsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetStreamsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetStreamsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add new media stream
     * @param platform (optional) 
     * @param streamId (optional) StreamId
     * @param streamUrl (optional) Stream Url
     * @param screenCapFile (optional) Screen Cap file
     * @param gameId (optional) GameId
     * @param languageId (optional) LanguageId
     * @param isEventStream (optional) Is Event Stream
     * @param isProPlayer (optional) Is Pro Player
     * @param isCelebCaster (optional) Is Celeb Caster
     * @param nextBroadcastAt (optional) Next Broadcast At
     * @param title (optional) Title
     * @param isFeatured (optional) Is Featured
     * @param description (optional) Description
     * @param tags (optional) Tags : Maximum of 5 tags(25 characters maximum per tag)
     * @return Error
     */
    streamsPOST(platform: EnumPlatform | undefined, streamId: string | undefined, streamUrl: string | undefined, screenCapFile: FileParameter | undefined, gameId: number | undefined, languageId: number | undefined, isEventStream: boolean | undefined, isProPlayer: boolean | undefined, isCelebCaster: boolean | undefined, nextBroadcastAt: number | undefined, title: string | undefined, isFeatured: boolean | undefined, description: string | undefined, tags: string[] | undefined, cancelToken?: CancelToken | undefined): Promise<AddStreamRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/media/streams";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (platform === null || platform === undefined)
            throw new Error("The parameter 'platform' cannot be null.");
        else
            content_.append("Platform", platform.toString());
        if (streamId === null || streamId === undefined)
            throw new Error("The parameter 'streamId' cannot be null.");
        else
            content_.append("StreamId", streamId.toString());
        if (streamUrl === null || streamUrl === undefined)
            throw new Error("The parameter 'streamUrl' cannot be null.");
        else
            content_.append("StreamUrl", streamUrl.toString());
        if (screenCapFile === null || screenCapFile === undefined)
            throw new Error("The parameter 'screenCapFile' cannot be null.");
        else
            content_.append("ScreenCapFile", screenCapFile.data, screenCapFile.fileName ? screenCapFile.fileName : "ScreenCapFile");
        if (gameId === null || gameId === undefined)
            throw new Error("The parameter 'gameId' cannot be null.");
        else
            content_.append("GameId", gameId.toString());
        if (languageId === null || languageId === undefined)
            throw new Error("The parameter 'languageId' cannot be null.");
        else
            content_.append("LanguageId", languageId.toString());
        if (isEventStream === null || isEventStream === undefined)
            throw new Error("The parameter 'isEventStream' cannot be null.");
        else
            content_.append("IsEventStream", isEventStream.toString());
        if (isProPlayer === null || isProPlayer === undefined)
            throw new Error("The parameter 'isProPlayer' cannot be null.");
        else
            content_.append("IsProPlayer", isProPlayer.toString());
        if (isCelebCaster === null || isCelebCaster === undefined)
            throw new Error("The parameter 'isCelebCaster' cannot be null.");
        else
            content_.append("IsCelebCaster", isCelebCaster.toString());
        if (nextBroadcastAt === null || nextBroadcastAt === undefined)
            throw new Error("The parameter 'nextBroadcastAt' cannot be null.");
        else
            content_.append("NextBroadcastAt", nextBroadcastAt.toString());
        if (title === null || title === undefined)
            throw new Error("The parameter 'title' cannot be null.");
        else
            content_.append("Title", title.toString());
        if (isFeatured === null || isFeatured === undefined)
            throw new Error("The parameter 'isFeatured' cannot be null.");
        else
            content_.append("IsFeatured", isFeatured.toString());
        if (description === null || description === undefined)
            throw new Error("The parameter 'description' cannot be null.");
        else
            content_.append("Description", description.toString());
        if (tags === null || tags === undefined)
            throw new Error("The parameter 'tags' cannot be null.");
        else
            tags.forEach(item_ => content_.append("Tags", item_.toString()));

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processStreamsPOST(_response);
        });
    }

    protected processStreamsPOST(response: AxiosResponse): Promise<AddStreamRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddStreamRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddStreamRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get media stream detail
     * @param id media item Id
     * @return Error
     */
    streamsGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetStreamRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/media/streams/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processStreamsGET2(_response);
        });
    }

    protected processStreamsGET2(response: AxiosResponse): Promise<GetStreamRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetStreamRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetStreamRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify media stream
     * @param id media item Id
     * @param id (optional) Media Item Id
     * @param platform (optional) 
     * @param streamId (optional) StreamId
     * @param streamUrl (optional) Stream Url
     * @param screenCapFile (optional) Screen Cap file
     * @param gameId (optional) GameId
     * @param languageId (optional) LanguageId
     * @param isEventStream (optional) Is Event Stream
     * @param isProPlayer (optional) Is Pro Player
     * @param isCelebCaster (optional) Is Celeb Caster
     * @param nextBroadcastAt (optional) Next Broadcast At
     * @param title (optional) Title
     * @param isFeatured (optional) Is Featured
     * @param description (optional) Description
     * @param tags (optional) Tags : Maximum of 5 tags(25 characters maximum per tag)
     * @return Error
     */
    streamsPATCH(id: number, id: number | undefined, platform: EnumPlatform | undefined, streamId: string | undefined, streamUrl: string | undefined, screenCapFile: FileParameter | undefined, gameId: number | undefined, languageId: number | undefined, isEventStream: boolean | undefined, isProPlayer: boolean | undefined, isCelebCaster: boolean | undefined, nextBroadcastAt: number | undefined, title: string | undefined, isFeatured: boolean | undefined, description: string | undefined, tags: ModStreamTag[] | undefined, cancelToken?: CancelToken | undefined): Promise<ModStreamRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/media/streams/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("Id", id.toString());
        if (platform === null || platform === undefined)
            throw new Error("The parameter 'platform' cannot be null.");
        else
            content_.append("Platform", platform.toString());
        if (streamId === null || streamId === undefined)
            throw new Error("The parameter 'streamId' cannot be null.");
        else
            content_.append("StreamId", streamId.toString());
        if (streamUrl === null || streamUrl === undefined)
            throw new Error("The parameter 'streamUrl' cannot be null.");
        else
            content_.append("StreamUrl", streamUrl.toString());
        if (screenCapFile === null || screenCapFile === undefined)
            throw new Error("The parameter 'screenCapFile' cannot be null.");
        else
            content_.append("ScreenCapFile", screenCapFile.data, screenCapFile.fileName ? screenCapFile.fileName : "ScreenCapFile");
        if (gameId === null || gameId === undefined)
            throw new Error("The parameter 'gameId' cannot be null.");
        else
            content_.append("GameId", gameId.toString());
        if (languageId === null || languageId === undefined)
            throw new Error("The parameter 'languageId' cannot be null.");
        else
            content_.append("LanguageId", languageId.toString());
        if (isEventStream === null || isEventStream === undefined)
            throw new Error("The parameter 'isEventStream' cannot be null.");
        else
            content_.append("IsEventStream", isEventStream.toString());
        if (isProPlayer === null || isProPlayer === undefined)
            throw new Error("The parameter 'isProPlayer' cannot be null.");
        else
            content_.append("IsProPlayer", isProPlayer.toString());
        if (isCelebCaster === null || isCelebCaster === undefined)
            throw new Error("The parameter 'isCelebCaster' cannot be null.");
        else
            content_.append("IsCelebCaster", isCelebCaster.toString());
        if (nextBroadcastAt === null || nextBroadcastAt === undefined)
            throw new Error("The parameter 'nextBroadcastAt' cannot be null.");
        else
            content_.append("NextBroadcastAt", nextBroadcastAt.toString());
        if (title === null || title === undefined)
            throw new Error("The parameter 'title' cannot be null.");
        else
            content_.append("Title", title.toString());
        if (isFeatured === null || isFeatured === undefined)
            throw new Error("The parameter 'isFeatured' cannot be null.");
        else
            content_.append("IsFeatured", isFeatured.toString());
        if (description === null || description === undefined)
            throw new Error("The parameter 'description' cannot be null.");
        else
            content_.append("Description", description.toString());
        if (tags === null || tags === undefined)
            throw new Error("The parameter 'tags' cannot be null.");
        else
            tags.forEach(item_ => content_.append("Tags", item_.toString()));

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processStreamsPATCH(_response);
        });
    }

    protected processStreamsPATCH(response: AxiosResponse): Promise<ModStreamRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModStreamRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModStreamRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete media stream
     * @param id media stream Id
     * @return Error
     */
    streamsDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelStreamRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/media/streams/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processStreamsDELETE(_response);
        });
    }

    protected processStreamsDELETE(response: AxiosResponse): Promise<DelStreamRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelStreamRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelStreamRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get fuzzy media streams
     * @param fuzzyPrefix (optional) FuzzyPrefix
     * @param maxCount (optional) 
     * @return Error
     */
    fuzzyStreams(fuzzyPrefix: string | undefined, maxCount: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetFuzzyMediaStreamsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/media/fuzzy-streams?";
        if (fuzzyPrefix === null)
            throw new Error("The parameter 'fuzzyPrefix' cannot be null.");
        else if (fuzzyPrefix !== undefined)
            url_ += "FuzzyPrefix=" + encodeURIComponent("" + fuzzyPrefix) + "&";
        if (maxCount === null)
            throw new Error("The parameter 'maxCount' cannot be null.");
        else if (maxCount !== undefined)
            url_ += "MaxCount=" + encodeURIComponent("" + maxCount) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFuzzyStreams(_response);
        });
    }

    protected processFuzzyStreams(response: AxiosResponse): Promise<GetFuzzyMediaStreamsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetFuzzyMediaStreamsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetFuzzyMediaStreamsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get fuzzy media videos
     * @param fuzzyPrefix (optional) FuzzyPrefix
     * @param maxCount (optional) 
     * @return Error
     */
    fuzzyVideos(fuzzyPrefix: string | undefined, maxCount: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetFuzzyMediaVideosRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/media/fuzzy-videos?";
        if (fuzzyPrefix === null)
            throw new Error("The parameter 'fuzzyPrefix' cannot be null.");
        else if (fuzzyPrefix !== undefined)
            url_ += "FuzzyPrefix=" + encodeURIComponent("" + fuzzyPrefix) + "&";
        if (maxCount === null)
            throw new Error("The parameter 'maxCount' cannot be null.");
        else if (maxCount !== undefined)
            url_ += "MaxCount=" + encodeURIComponent("" + maxCount) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFuzzyVideos(_response);
        });
    }

    protected processFuzzyVideos(response: AxiosResponse): Promise<GetFuzzyMediaVideosRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetFuzzyMediaVideosRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetFuzzyMediaVideosRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get media vod host options
     * @return Error
     */
    hostOptions( cancelToken?: CancelToken | undefined): Promise<GetMediaVodHostOptionsResp> {
        let url_ = this.baseUrl + "/api/v4/media/vods/host-options";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHostOptions(_response);
        });
    }

    protected processHostOptions(response: AxiosResponse): Promise<GetMediaVodHostOptionsResp> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetMediaVodHostOptionsResp.fromJS(resultDatadefault);
            return Promise.resolve<GetMediaVodHostOptionsResp>(resultdefault);

        }
    }

    /**
     * Get media vods
     * @param vodId (optional) Vod id
     * @param title (optional) vod title
     * @param hostId (optional) Host id
     * @param hostVideoId (optional) Host video id
     * @param siteSectionIds (optional) Site section ids
     * @param createdFrom (optional) Created From
     * @param createdTo (optional) Created To
     * @param creator (optional) Creator user name
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    vodsGET(vodId: number | undefined, title: string | undefined, hostId: number | undefined, hostVideoId: string | undefined, siteSectionIds: number[] | undefined, createdFrom: number | undefined, createdTo: number | undefined, creator: string | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetMediaVodsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/media/vods?";
        if (vodId === null)
            throw new Error("The parameter 'vodId' cannot be null.");
        else if (vodId !== undefined)
            url_ += "VodId=" + encodeURIComponent("" + vodId) + "&";
        if (title === null)
            throw new Error("The parameter 'title' cannot be null.");
        else if (title !== undefined)
            url_ += "Title=" + encodeURIComponent("" + title) + "&";
        if (hostId === null)
            throw new Error("The parameter 'hostId' cannot be null.");
        else if (hostId !== undefined)
            url_ += "HostId=" + encodeURIComponent("" + hostId) + "&";
        if (hostVideoId === null)
            throw new Error("The parameter 'hostVideoId' cannot be null.");
        else if (hostVideoId !== undefined)
            url_ += "HostVideoId=" + encodeURIComponent("" + hostVideoId) + "&";
        if (siteSectionIds === null)
            throw new Error("The parameter 'siteSectionIds' cannot be null.");
        else if (siteSectionIds !== undefined)
            siteSectionIds && siteSectionIds.forEach(item => { url_ += "SiteSectionIds=" + encodeURIComponent("" + item) + "&"; });
        if (createdFrom === null)
            throw new Error("The parameter 'createdFrom' cannot be null.");
        else if (createdFrom !== undefined)
            url_ += "CreatedFrom=" + encodeURIComponent("" + createdFrom) + "&";
        if (createdTo === null)
            throw new Error("The parameter 'createdTo' cannot be null.");
        else if (createdTo !== undefined)
            url_ += "CreatedTo=" + encodeURIComponent("" + createdTo) + "&";
        if (creator === null)
            throw new Error("The parameter 'creator' cannot be null.");
        else if (creator !== undefined)
            url_ += "Creator=" + encodeURIComponent("" + creator) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processVodsGET(_response);
        });
    }

    protected processVodsGET(response: AxiosResponse): Promise<GetMediaVodsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetMediaVodsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetMediaVodsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add media vod
     * @param body (optional) 
     * @return Error
     */
    vodsPOST(body: AddMediaVodReq | undefined, cancelToken?: CancelToken | undefined): Promise<AddMediaVodRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/media/vods";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processVodsPOST(_response);
        });
    }

    protected processVodsPOST(response: AxiosResponse): Promise<AddMediaVodRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddMediaVodRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddMediaVodRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get media vod
     * @return Error
     */
    vodsGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetMediaVodRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/media/vods/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processVodsGET2(_response);
        });
    }

    protected processVodsGET2(response: AxiosResponse): Promise<GetMediaVodRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetMediaVodRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetMediaVodRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify media vod
     * @param body (optional) 
     * @return Error
     */
    vodsPATCH(id: number, body: ModMediaVodReq | undefined, cancelToken?: CancelToken | undefined): Promise<ModMediaVodRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/media/vods/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processVodsPATCH(_response);
        });
    }

    protected processVodsPATCH(response: AxiosResponse): Promise<ModMediaVodRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModMediaVodRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModMediaVodRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete media vod
     * @return Error
     */
    vodsDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelMediaVodRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/media/vods/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processVodsDELETE(_response);
        });
    }

    protected processVodsDELETE(response: AxiosResponse): Promise<DelMediaVodRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelMediaVodRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelMediaVodRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Download media vods csv
     * @param pageSize (optional) Page size
     * @param vodId (optional) Vod id
     * @param title (optional) vod title
     * @param hostId (optional) Host id
     * @param hostVideoId (optional) Host video id
     * @param siteSectionIds (optional) Site section ids
     * @param createdFrom (optional) Created From
     * @param createdTo (optional) Created To
     * @param creator (optional) Creator user name
     * @param pageNo (optional) 
     * @return Success
     */
    downloadCsv(pageSize: number | undefined, vodId: number | undefined, title: string | undefined, hostId: number | undefined, hostVideoId: string | undefined, siteSectionIds: number[] | undefined, createdFrom: number | undefined, createdTo: number | undefined, creator: string | undefined, pageNo: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/v4/media/vods/download-csv?";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (vodId === null)
            throw new Error("The parameter 'vodId' cannot be null.");
        else if (vodId !== undefined)
            url_ += "VodId=" + encodeURIComponent("" + vodId) + "&";
        if (title === null)
            throw new Error("The parameter 'title' cannot be null.");
        else if (title !== undefined)
            url_ += "Title=" + encodeURIComponent("" + title) + "&";
        if (hostId === null)
            throw new Error("The parameter 'hostId' cannot be null.");
        else if (hostId !== undefined)
            url_ += "HostId=" + encodeURIComponent("" + hostId) + "&";
        if (hostVideoId === null)
            throw new Error("The parameter 'hostVideoId' cannot be null.");
        else if (hostVideoId !== undefined)
            url_ += "HostVideoId=" + encodeURIComponent("" + hostVideoId) + "&";
        if (siteSectionIds === null)
            throw new Error("The parameter 'siteSectionIds' cannot be null.");
        else if (siteSectionIds !== undefined)
            siteSectionIds && siteSectionIds.forEach(item => { url_ += "SiteSectionIds=" + encodeURIComponent("" + item) + "&"; });
        if (createdFrom === null)
            throw new Error("The parameter 'createdFrom' cannot be null.");
        else if (createdFrom !== undefined)
            url_ += "CreatedFrom=" + encodeURIComponent("" + createdFrom) + "&";
        if (createdTo === null)
            throw new Error("The parameter 'createdTo' cannot be null.");
        else if (createdTo !== undefined)
            url_ += "CreatedTo=" + encodeURIComponent("" + createdTo) + "&";
        if (creator === null)
            throw new Error("The parameter 'creator' cannot be null.");
        else if (creator !== undefined)
            url_ += "Creator=" + encodeURIComponent("" + creator) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDownloadCsv(_response);
        });
    }

    protected processDownloadCsv(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Get modes by condition
     * @param name (optional) Modes Name
     * @param abbreviation (optional) Modes Abbreviation
     * @param gameId (optional) Modes Game Id
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    modesGET(name: string | undefined, abbreviation: string | undefined, gameId: number | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetModesRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/modes?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (abbreviation === null)
            throw new Error("The parameter 'abbreviation' cannot be null.");
        else if (abbreviation !== undefined)
            url_ += "Abbreviation=" + encodeURIComponent("" + abbreviation) + "&";
        if (gameId === null)
            throw new Error("The parameter 'gameId' cannot be null.");
        else if (gameId !== undefined)
            url_ += "GameId=" + encodeURIComponent("" + gameId) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processModesGET(_response);
        });
    }

    protected processModesGET(response: AxiosResponse): Promise<GetModesRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetModesRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetModesRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add new game mode
     * @param body (optional) Request
     * @return Error
     */
    modesPOST(body: AddModeReq | undefined, cancelToken?: CancelToken | undefined): Promise<AddModeRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/modes";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processModesPOST(_response);
        });
    }

    protected processModesPOST(response: AxiosResponse): Promise<AddModeRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddModeRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddModeRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get game mode
     * @param id Modes Id
     * @return Error
     */
    modesGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetModeRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/modes/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processModesGET2(_response);
        });
    }

    protected processModesGET2(response: AxiosResponse): Promise<GetModeRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetModeRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetModeRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify game mode
     * @param id game Mode Id
     * @param body (optional) Request
     * @return Error
     */
    modesPATCH(id: number, body: ModModeReq | undefined, cancelToken?: CancelToken | undefined): Promise<ModModeRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/modes/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processModesPATCH(_response);
        });
    }

    protected processModesPATCH(response: AxiosResponse): Promise<ModModeRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModModeRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModModeRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete game mode
     * @param id game Mode Id
     * @return Error
     */
    modesDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelModeRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/modes/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processModesDELETE(_response);
        });
    }

    protected processModesDELETE(response: AxiosResponse): Promise<DelModeRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelModeRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelModeRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get game mode translations
     * @param id Modes Id
     * @return Error
     */
    translationsGET5(id: number, cancelToken?: CancelToken | undefined): Promise<GetModeTranslationsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/modes/{id}/translations";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTranslationsGET5(_response);
        });
    }

    protected processTranslationsGET5(response: AxiosResponse): Promise<GetModeTranslationsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetModeTranslationsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetModeTranslationsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify game mode translations
     * @param id game Mode Id
     * @param body (optional) Request
     * @return Error
     */
    translationsPATCH6(id: number, body: ModModeTranslationsReq | undefined, cancelToken?: CancelToken | undefined): Promise<ModModeTranslationsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/modes/{id}/translations";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTranslationsPATCH6(_response);
        });
    }

    protected processTranslationsPATCH6(response: AxiosResponse): Promise<ModModeTranslationsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModModeTranslationsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModModeTranslationsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get Notification Templates
     * @param frontendId (optional) Frontend id
    null: All
     * @param notificationTemplateType (optional) 
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    messagingNotificationTemplatesGET(frontendId: number | undefined, notificationTemplateType: number | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetNotificationTemplatesRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/messaging-notification-templates?";
        if (frontendId === null)
            throw new Error("The parameter 'frontendId' cannot be null.");
        else if (frontendId !== undefined)
            url_ += "FrontendId=" + encodeURIComponent("" + frontendId) + "&";
        if (notificationTemplateType === null)
            throw new Error("The parameter 'notificationTemplateType' cannot be null.");
        else if (notificationTemplateType !== undefined)
            url_ += "NotificationTemplateType=" + encodeURIComponent("" + notificationTemplateType) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMessagingNotificationTemplatesGET(_response);
        });
    }

    protected processMessagingNotificationTemplatesGET(response: AxiosResponse): Promise<GetNotificationTemplatesRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetNotificationTemplatesRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetNotificationTemplatesRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add Notification Template
     * @param body (optional) 
     * @return Error
     */
    messagingNotificationTemplatesPOST(body: AddNotificationTemplateReq | undefined, cancelToken?: CancelToken | undefined): Promise<AddNotificationTemplateRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/messaging-notification-templates";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMessagingNotificationTemplatesPOST(_response);
        });
    }

    protected processMessagingNotificationTemplatesPOST(response: AxiosResponse): Promise<AddNotificationTemplateRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddNotificationTemplateRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddNotificationTemplateRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get Notification Template
     * @return Error
     */
    messagingNotificationTemplatesGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetNotificationTemplateRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/messaging-notification-templates/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMessagingNotificationTemplatesGET2(_response);
        });
    }

    protected processMessagingNotificationTemplatesGET2(response: AxiosResponse): Promise<GetNotificationTemplateRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetNotificationTemplateRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetNotificationTemplateRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify Notification Template
     * @param body (optional) 
     * @return Error
     */
    messagingNotificationTemplatesPATCH(id: number, body: ModNotificationTemplateReq | undefined, cancelToken?: CancelToken | undefined): Promise<ModNotificationTemplateRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/messaging-notification-templates/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMessagingNotificationTemplatesPATCH(_response);
        });
    }

    protected processMessagingNotificationTemplatesPATCH(response: AxiosResponse): Promise<ModNotificationTemplateRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModNotificationTemplateRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModNotificationTemplateRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete Notification Template
     * @return Error
     */
    messagingNotificationTemplatesDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelNotificationTemplateRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/messaging-notification-templates/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMessagingNotificationTemplatesDELETE(_response);
        });
    }

    protected processMessagingNotificationTemplatesDELETE(response: AxiosResponse): Promise<DelNotificationTemplateRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelNotificationTemplateRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelNotificationTemplateRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get One Signal Apps
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    messagingOnesignalAppsGET(pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetOneSignalAppsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/messaging-onesignal-apps?";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMessagingOnesignalAppsGET(_response);
        });
    }

    protected processMessagingOnesignalAppsGET(response: AxiosResponse): Promise<GetOneSignalAppsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetOneSignalAppsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetOneSignalAppsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add One Signal App
     * @param body (optional) 
     * @return Error
     */
    messagingOnesignalAppsPOST(body: AddOneSignalAppReq | undefined, cancelToken?: CancelToken | undefined): Promise<AddOneSignalAppRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/messaging-onesignal-apps";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMessagingOnesignalAppsPOST(_response);
        });
    }

    protected processMessagingOnesignalAppsPOST(response: AxiosResponse): Promise<AddOneSignalAppRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddOneSignalAppRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddOneSignalAppRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get One Signal App
     * @return Error
     */
    messagingOnesignalAppsGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetOneSignalAppRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/messaging-onesignal-apps/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMessagingOnesignalAppsGET2(_response);
        });
    }

    protected processMessagingOnesignalAppsGET2(response: AxiosResponse): Promise<GetOneSignalAppRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetOneSignalAppRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetOneSignalAppRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify One Signal App
     * @param body (optional) 
     * @return Error
     */
    messagingOnesignalAppsPATCH(id: number, body: ModOneSignalAppReq | undefined, cancelToken?: CancelToken | undefined): Promise<ModOneSignalAppRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/messaging-onesignal-apps/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMessagingOnesignalAppsPATCH(_response);
        });
    }

    protected processMessagingOnesignalAppsPATCH(response: AxiosResponse): Promise<ModOneSignalAppRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModOneSignalAppRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModOneSignalAppRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete One Signal App
     * @return Error
     */
    messagingOnesignalAppsDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelOneSignalAppRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/messaging-onesignal-apps/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMessagingOnesignalAppsDELETE(_response);
        });
    }

    protected processMessagingOnesignalAppsDELETE(response: AxiosResponse): Promise<DelOneSignalAppRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelOneSignalAppRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelOneSignalAppRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get state options
     * @return Error
     */
    states( cancelToken?: CancelToken | undefined): Promise<GetStateOptionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/options/states";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processStates(_response);
        });
    }

    protected processStates(response: AxiosResponse): Promise<GetStateOptionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetStateOptionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetStateOptionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get contact types
     * @return Error
     */
    contactTypes( cancelToken?: CancelToken | undefined): Promise<GetContactTypesRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/options/contact-types";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processContactTypes(_response);
        });
    }

    protected processContactTypes(response: AxiosResponse): Promise<GetContactTypesRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetContactTypesRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetContactTypesRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get frontend options
     * @return Error
     */
    frontends( cancelToken?: CancelToken | undefined): Promise<GetFrontendOptionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/options/frontends";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFrontends(_response);
        });
    }

    protected processFrontends(response: AxiosResponse): Promise<GetFrontendOptionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetFrontendOptionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetFrontendOptionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get frontend options by user
     * @return Error
     */
    frontendsByUser( cancelToken?: CancelToken | undefined): Promise<GetFrontendOptionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/options/frontends-by-user";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFrontendsByUser(_response);
        });
    }

    protected processFrontendsByUser(response: AxiosResponse): Promise<GetFrontendOptionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetFrontendOptionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetFrontendOptionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get locale options
     * @return Error
     */
    locales( cancelToken?: CancelToken | undefined): Promise<GetLocaleOptionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/options/locales";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLocales(_response);
        });
    }

    protected processLocales(response: AxiosResponse): Promise<GetLocaleOptionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetLocaleOptionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetLocaleOptionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get frontend locale options
     * @return Error
     */
    frontendLocales( cancelToken?: CancelToken | undefined): Promise<GetFrontendLocaleOptionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/options/frontend-locales";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFrontendLocales(_response);
        });
    }

    protected processFrontendLocales(response: AxiosResponse): Promise<GetFrontendLocaleOptionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetFrontendLocaleOptionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetFrontendLocaleOptionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get site section options
     * @return Error
     */
    siteSectionsGET( cancelToken?: CancelToken | undefined): Promise<GetSiteSectionsOptionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/options/site-sections";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSiteSectionsGET(_response);
        });
    }

    protected processSiteSectionsGET(response: AxiosResponse): Promise<GetSiteSectionsOptionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetSiteSectionsOptionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetSiteSectionsOptionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get country options
     * @return Error
     */
    countries( cancelToken?: CancelToken | undefined): Promise<GetCountryOptionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/options/countries";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCountries(_response);
        });
    }

    protected processCountries(response: AxiosResponse): Promise<GetCountryOptionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetCountryOptionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetCountryOptionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get user type options
     * @return Error
     */
    userTypes( cancelToken?: CancelToken | undefined): Promise<GetUserTypeOptionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/options/user-types";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUserTypes(_response);
        });
    }

    protected processUserTypes(response: AxiosResponse): Promise<GetUserTypeOptionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetUserTypeOptionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetUserTypeOptionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get gender options
     * @return Error
     */
    genders( cancelToken?: CancelToken | undefined): Promise<GetGenderOptionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/options/genders";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGenders(_response);
        });
    }

    protected processGenders(response: AxiosResponse): Promise<GetGenderOptionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetGenderOptionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetGenderOptionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get GG Code Info
     * @param url (optional) 
     * @return Error
     */
    proxy(url: string | undefined, cancelToken?: CancelToken | undefined): Promise<GetGgCodeInfoRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/options/proxy?";
        if (url === null)
            throw new Error("The parameter 'url' cannot be null.");
        else if (url !== undefined)
            url_ += "url=" + encodeURIComponent("" + url) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProxy(_response);
        });
    }

    protected processProxy(response: AxiosResponse): Promise<GetGgCodeInfoRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetGgCodeInfoRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetGgCodeInfoRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get Notification Type Options
     * @return Error
     */
    notificationTypes( cancelToken?: CancelToken | undefined): Promise<GetNotificationTypeOptionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/options/notification-types";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processNotificationTypes(_response);
        });
    }

    protected processNotificationTypes(response: AxiosResponse): Promise<GetNotificationTypeOptionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetNotificationTypeOptionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetNotificationTypeOptionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get language options
     * @return Error
     */
    languages( cancelToken?: CancelToken | undefined): Promise<GetLanguagesRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/options/languages";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLanguages(_response);
        });
    }

    protected processLanguages(response: AxiosResponse): Promise<GetLanguagesRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetLanguagesRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetLanguagesRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get language options
     * @return Error
     */
    gamesGET3( cancelToken?: CancelToken | undefined): Promise<GetGameOptionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/options/games";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGamesGET3(_response);
        });
    }

    protected processGamesGET3(response: AxiosResponse): Promise<GetGameOptionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetGameOptionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetGameOptionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get servers(locations) options
     * @param gameId (optional) 
     * @return Error
     */
    serversGET(gameId: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetServerOptionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/options/servers?";
        if (gameId === null)
            throw new Error("The parameter 'gameId' cannot be null.");
        else if (gameId !== undefined)
            url_ += "gameId=" + encodeURIComponent("" + gameId) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processServersGET(_response);
        });
    }

    protected processServersGET(response: AxiosResponse): Promise<GetServerOptionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetServerOptionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetServerOptionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get pages byt conditions
     * @param title (optional) Title
     * @param frontendId (optional) Frontend id
     * @param author (optional) Create user name
     * @param pageId (optional) Page id
     * @param updatedFrom (optional) Updated from
     * @param updatedTo (optional) Updated to
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    pagesGET(title: string | undefined, frontendId: number | undefined, author: string | undefined, pageId: number | undefined, updatedFrom: number | undefined, updatedTo: number | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetPagesRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/pages?";
        if (title === null)
            throw new Error("The parameter 'title' cannot be null.");
        else if (title !== undefined)
            url_ += "Title=" + encodeURIComponent("" + title) + "&";
        if (frontendId === null)
            throw new Error("The parameter 'frontendId' cannot be null.");
        else if (frontendId !== undefined)
            url_ += "FrontendId=" + encodeURIComponent("" + frontendId) + "&";
        if (author === null)
            throw new Error("The parameter 'author' cannot be null.");
        else if (author !== undefined)
            url_ += "Author=" + encodeURIComponent("" + author) + "&";
        if (pageId === null)
            throw new Error("The parameter 'pageId' cannot be null.");
        else if (pageId !== undefined)
            url_ += "PageId=" + encodeURIComponent("" + pageId) + "&";
        if (updatedFrom === null)
            throw new Error("The parameter 'updatedFrom' cannot be null.");
        else if (updatedFrom !== undefined)
            url_ += "UpdatedFrom=" + encodeURIComponent("" + updatedFrom) + "&";
        if (updatedTo === null)
            throw new Error("The parameter 'updatedTo' cannot be null.");
        else if (updatedTo !== undefined)
            url_ += "UpdatedTo=" + encodeURIComponent("" + updatedTo) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPagesGET(_response);
        });
    }

    protected processPagesGET(response: AxiosResponse): Promise<GetPagesRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetPagesRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetPagesRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add page
     * @param body (optional) Request
     * @return Error
     */
    pagesPOST(body: AddPageReq | undefined, cancelToken?: CancelToken | undefined): Promise<AddPageRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/pages";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPagesPOST(_response);
        });
    }

    protected processPagesPOST(response: AxiosResponse): Promise<AddPageRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddPageRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddPageRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete page
     * @param body (optional) Request
     * @return Error
     */
    pagesDELETE(body: DelPageReq | undefined, cancelToken?: CancelToken | undefined): Promise<DelPageRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/pages";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPagesDELETE(_response);
        });
    }

    protected processPagesDELETE(response: AxiosResponse): Promise<DelPageRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelPageRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelPageRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get page
     * @param id PageId
     * @return Error
     */
    pagesGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetPageRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/pages/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPagesGET2(_response);
        });
    }

    protected processPagesGET2(response: AxiosResponse): Promise<GetPageRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetPageRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetPageRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify page
     * @param id PageId
     * @param body (optional) Request
     * @return Error
     */
    pagesPATCH(id: number, body: ModPageReq | undefined, cancelToken?: CancelToken | undefined): Promise<ModPageRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/pages/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPagesPATCH(_response);
        });
    }

    protected processPagesPATCH(response: AxiosResponse): Promise<ModPageRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModPageRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModPageRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get players
     * @param id (optional) Player Id
     * @param nickName (optional) Player Name
     * @param firstName (optional) First Name
     * @param lastName (optional) Last Name
     * @param primaryGameId (optional) Primary Game Id
     * @param countryId (optional) CountryId
     * @param createdAtFrom (optional) Created at from
     * @param createdAtTo (optional) Created at to
     * @param gameAccount (optional) Game Account
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    playersGET(id: number | undefined, nickName: string | undefined, firstName: string | undefined, lastName: string | undefined, primaryGameId: number | undefined, countryId: number | undefined, createdAtFrom: number | undefined, createdAtTo: number | undefined, gameAccount: string | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetPlayersRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/players?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (nickName === null)
            throw new Error("The parameter 'nickName' cannot be null.");
        else if (nickName !== undefined)
            url_ += "NickName=" + encodeURIComponent("" + nickName) + "&";
        if (firstName === null)
            throw new Error("The parameter 'firstName' cannot be null.");
        else if (firstName !== undefined)
            url_ += "FirstName=" + encodeURIComponent("" + firstName) + "&";
        if (lastName === null)
            throw new Error("The parameter 'lastName' cannot be null.");
        else if (lastName !== undefined)
            url_ += "LastName=" + encodeURIComponent("" + lastName) + "&";
        if (primaryGameId === null)
            throw new Error("The parameter 'primaryGameId' cannot be null.");
        else if (primaryGameId !== undefined)
            url_ += "PrimaryGameId=" + encodeURIComponent("" + primaryGameId) + "&";
        if (countryId === null)
            throw new Error("The parameter 'countryId' cannot be null.");
        else if (countryId !== undefined)
            url_ += "CountryId=" + encodeURIComponent("" + countryId) + "&";
        if (createdAtFrom === null)
            throw new Error("The parameter 'createdAtFrom' cannot be null.");
        else if (createdAtFrom !== undefined)
            url_ += "CreatedAtFrom=" + encodeURIComponent("" + createdAtFrom) + "&";
        if (createdAtTo === null)
            throw new Error("The parameter 'createdAtTo' cannot be null.");
        else if (createdAtTo !== undefined)
            url_ += "CreatedAtTo=" + encodeURIComponent("" + createdAtTo) + "&";
        if (gameAccount === null)
            throw new Error("The parameter 'gameAccount' cannot be null.");
        else if (gameAccount !== undefined)
            url_ += "GameAccount=" + encodeURIComponent("" + gameAccount) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPlayersGET(_response);
        });
    }

    protected processPlayersGET(response: AxiosResponse): Promise<GetPlayersRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetPlayersRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetPlayersRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add player
     * @param userId (optional) 
     * @param isActive (optional) 
     * @param nickName (optional) 
     * @param firstName (optional) 
     * @param lastName (optional) 
     * @param gender (optional) 
     * @param dateOfBirth (optional) ex:2022-12-01
     * @param countryId (optional) 
     * @param initialRating (optional) 
     * @param primaryGameId (optional) 
     * @param image (optional) 
     * @param descriptions (optional) 
     * @param faceBook (optional) 
     * @param twitter (optional) 
     * @param youtube (optional) 
     * @return Error
     */
    playersPOST(userId: number | undefined, isActive: boolean | undefined, nickName: string | undefined, firstName: string | undefined, lastName: string | undefined, gender: EnumGender | undefined, dateOfBirth: Date | undefined, countryId: number | undefined, initialRating: number | undefined, primaryGameId: number | undefined, image: FileParameter | undefined, descriptions: string | undefined, faceBook: string | undefined, twitter: string | undefined, youtube: string | undefined, cancelToken?: CancelToken | undefined): Promise<AddPlayerRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/players";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (userId === null || userId === undefined)
            throw new Error("The parameter 'userId' cannot be null.");
        else
            content_.append("UserId", userId.toString());
        if (isActive === null || isActive === undefined)
            throw new Error("The parameter 'isActive' cannot be null.");
        else
            content_.append("IsActive", isActive.toString());
        if (nickName === null || nickName === undefined)
            throw new Error("The parameter 'nickName' cannot be null.");
        else
            content_.append("NickName", nickName.toString());
        if (firstName === null || firstName === undefined)
            throw new Error("The parameter 'firstName' cannot be null.");
        else
            content_.append("FirstName", firstName.toString());
        if (lastName === null || lastName === undefined)
            throw new Error("The parameter 'lastName' cannot be null.");
        else
            content_.append("LastName", lastName.toString());
        if (gender === null || gender === undefined)
            throw new Error("The parameter 'gender' cannot be null.");
        else
            content_.append("Gender", gender.toString());
        if (dateOfBirth === null || dateOfBirth === undefined)
            throw new Error("The parameter 'dateOfBirth' cannot be null.");
        else
            content_.append("DateOfBirth", dateOfBirth.toJSON());
        if (countryId === null || countryId === undefined)
            throw new Error("The parameter 'countryId' cannot be null.");
        else
            content_.append("CountryId", countryId.toString());
        if (initialRating === null || initialRating === undefined)
            throw new Error("The parameter 'initialRating' cannot be null.");
        else
            content_.append("InitialRating", initialRating.toString());
        if (primaryGameId === null || primaryGameId === undefined)
            throw new Error("The parameter 'primaryGameId' cannot be null.");
        else
            content_.append("PrimaryGameId", primaryGameId.toString());
        if (image === null || image === undefined)
            throw new Error("The parameter 'image' cannot be null.");
        else
            content_.append("Image", image.data, image.fileName ? image.fileName : "Image");
        if (descriptions === null || descriptions === undefined)
            throw new Error("The parameter 'descriptions' cannot be null.");
        else
            content_.append("Descriptions", descriptions.toString());
        if (faceBook === null || faceBook === undefined)
            throw new Error("The parameter 'faceBook' cannot be null.");
        else
            content_.append("FaceBook", faceBook.toString());
        if (twitter === null || twitter === undefined)
            throw new Error("The parameter 'twitter' cannot be null.");
        else
            content_.append("Twitter", twitter.toString());
        if (youtube === null || youtube === undefined)
            throw new Error("The parameter 'youtube' cannot be null.");
        else
            content_.append("Youtube", youtube.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPlayersPOST(_response);
        });
    }

    protected processPlayersPOST(response: AxiosResponse): Promise<AddPlayerRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddPlayerRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddPlayerRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get player
     * @param id PlayerId
     * @return Error
     */
    playersGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetPlayerRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/players/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPlayersGET2(_response);
        });
    }

    protected processPlayersGET2(response: AxiosResponse): Promise<GetPlayerRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetPlayerRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetPlayerRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify player
     * @param id PlayerId
     * @param playerId (optional) 
     * @param userId (optional) 
     * @param isActive (optional) 
     * @param nickName (optional) 
     * @param firstName (optional) 
     * @param lastName (optional) 
     * @param gender (optional) 
     * @param dateOfBirth (optional) ex:2022-12-01
     * @param countryId (optional) 
     * @param primaryGameId (optional) 
     * @param image (optional) 
     * @param isRemoveImage (optional) if IsRemoveImage = true will remove Image and set ImageFilePath = null
     * @param descriptions (optional) 
     * @param faceBook (optional) 
     * @param twitter (optional) 
     * @param youtube (optional) 
     * @return Error
     */
    playersPATCH(id: number, playerId: number | undefined, userId: number | undefined, isActive: boolean | undefined, nickName: string | undefined, firstName: string | undefined, lastName: string | undefined, gender: EnumGender | undefined, dateOfBirth: Date | undefined, countryId: number | undefined, primaryGameId: number | undefined, image: FileParameter | undefined, isRemoveImage: boolean | undefined, descriptions: string | undefined, faceBook: string | undefined, twitter: string | undefined, youtube: string | undefined, cancelToken?: CancelToken | undefined): Promise<ModPlayerRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/players/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (playerId === null || playerId === undefined)
            throw new Error("The parameter 'playerId' cannot be null.");
        else
            content_.append("PlayerId", playerId.toString());
        if (userId === null || userId === undefined)
            throw new Error("The parameter 'userId' cannot be null.");
        else
            content_.append("UserId", userId.toString());
        if (isActive === null || isActive === undefined)
            throw new Error("The parameter 'isActive' cannot be null.");
        else
            content_.append("IsActive", isActive.toString());
        if (nickName === null || nickName === undefined)
            throw new Error("The parameter 'nickName' cannot be null.");
        else
            content_.append("NickName", nickName.toString());
        if (firstName === null || firstName === undefined)
            throw new Error("The parameter 'firstName' cannot be null.");
        else
            content_.append("FirstName", firstName.toString());
        if (lastName === null || lastName === undefined)
            throw new Error("The parameter 'lastName' cannot be null.");
        else
            content_.append("LastName", lastName.toString());
        if (gender === null || gender === undefined)
            throw new Error("The parameter 'gender' cannot be null.");
        else
            content_.append("Gender", gender.toString());
        if (dateOfBirth === null || dateOfBirth === undefined)
            throw new Error("The parameter 'dateOfBirth' cannot be null.");
        else
            content_.append("DateOfBirth", dateOfBirth.toJSON());
        if (countryId === null || countryId === undefined)
            throw new Error("The parameter 'countryId' cannot be null.");
        else
            content_.append("CountryId", countryId.toString());
        if (primaryGameId === null || primaryGameId === undefined)
            throw new Error("The parameter 'primaryGameId' cannot be null.");
        else
            content_.append("PrimaryGameId", primaryGameId.toString());
        if (image === null || image === undefined)
            throw new Error("The parameter 'image' cannot be null.");
        else
            content_.append("Image", image.data, image.fileName ? image.fileName : "Image");
        if (isRemoveImage === null || isRemoveImage === undefined)
            throw new Error("The parameter 'isRemoveImage' cannot be null.");
        else
            content_.append("IsRemoveImage", isRemoveImage.toString());
        if (descriptions === null || descriptions === undefined)
            throw new Error("The parameter 'descriptions' cannot be null.");
        else
            content_.append("Descriptions", descriptions.toString());
        if (faceBook === null || faceBook === undefined)
            throw new Error("The parameter 'faceBook' cannot be null.");
        else
            content_.append("FaceBook", faceBook.toString());
        if (twitter === null || twitter === undefined)
            throw new Error("The parameter 'twitter' cannot be null.");
        else
            content_.append("Twitter", twitter.toString());
        if (youtube === null || youtube === undefined)
            throw new Error("The parameter 'youtube' cannot be null.");
        else
            content_.append("Youtube", youtube.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPlayersPATCH(_response);
        });
    }

    protected processPlayersPATCH(response: AxiosResponse): Promise<ModPlayerRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModPlayerRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModPlayerRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete player
     * @param id PlayerId
     * @return Error
     */
    playersDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelPlayerRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/players/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPlayersDELETE(_response);
        });
    }

    protected processPlayersDELETE(response: AxiosResponse): Promise<DelPlayerRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelPlayerRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelPlayerRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get fuzzy players
     * @param maxCount (optional) 
     * @return Error
     */
    fuzzy3(fuzzyPrefix: string, maxCount: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetFuzzyPlayersRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/players/fuzzy?";
          if (fuzzyPrefix === undefined || fuzzyPrefix === null)
            throw new Error("The parameter 'fuzzyPrefix' must be defined and cannot be null.");
          else
            url_ += "FuzzyPrefix=" + encodeURIComponent("" + fuzzyPrefix) + "&";
        if (maxCount === null)
            throw new Error("The parameter 'maxCount' cannot be null.");
        else if (maxCount !== undefined)
            url_ += "MaxCount=" + encodeURIComponent("" + maxCount) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFuzzy3(_response);
        });
    }

    protected processFuzzy3(response: AxiosResponse): Promise<GetFuzzyPlayersRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetFuzzyPlayersRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetFuzzyPlayersRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get User
     * @param id UserId
     * @return Error
     */
    usersGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetUserForPlayerRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/players/users/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUsersGET2(_response);
        });
    }

    protected processUsersGET2(response: AxiosResponse): Promise<GetUserForPlayerRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetUserForPlayerRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetUserForPlayerRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get player Media items
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    mediaItemsGET2(playerid: number, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetPlayerMediaItemsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/players/{playerid}/media-items?";
        if (playerid === undefined || playerid === null)
          throw new Error("The parameter 'playerid' must be defined.");
        url_ = url_.replace("{playerid}", encodeURIComponent("" + playerid));
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMediaItemsGET2(_response);
        });
    }

    protected processMediaItemsGET2(response: AxiosResponse): Promise<GetPlayerMediaItemsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetPlayerMediaItemsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetPlayerMediaItemsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add player new Media items
     * @param mediaItems Media item Ids
     * @return Error
     */
    mediaItemsPOST2(playerid: number, mediaItems: number[], cancelToken?: CancelToken | undefined): Promise<AddPlayerMediaItemRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/players/{playerid}/media-items?";
        if (playerid === undefined || playerid === null)
          throw new Error("The parameter 'playerid' must be defined.");
        url_ = url_.replace("{playerid}", encodeURIComponent("" + playerid));
          if (mediaItems === undefined || mediaItems === null)
            throw new Error("The parameter 'mediaItems' must be defined and cannot be null.");
          else
            mediaItems && mediaItems.forEach(item => { url_ += "MediaItems=" + encodeURIComponent("" + item) + "&"; });
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMediaItemsPOST2(_response);
        });
    }

    protected processMediaItemsPOST2(response: AxiosResponse): Promise<AddPlayerMediaItemRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddPlayerMediaItemRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddPlayerMediaItemRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete player Media item
     * @param playerid Player Id
     * @param mediaitemid Media Item Id
     * @return Error
     */
    mediaItemsDELETE2(playerid: number, mediaitemid: number, cancelToken?: CancelToken | undefined): Promise<DelPlayerMediaItemRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/players/{playerid}/media-items/{mediaitemid}";
        if (playerid === undefined || playerid === null)
          throw new Error("The parameter 'playerid' must be defined.");
        url_ = url_.replace("{playerid}", encodeURIComponent("" + playerid));
        if (mediaitemid === undefined || mediaitemid === null)
          throw new Error("The parameter 'mediaitemid' must be defined.");
        url_ = url_.replace("{mediaitemid}", encodeURIComponent("" + mediaitemid));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMediaItemsDELETE2(_response);
        });
    }

    protected processMediaItemsDELETE2(response: AxiosResponse): Promise<DelPlayerMediaItemRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelPlayerMediaItemRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelPlayerMediaItemRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get role options
     * @return Error
     */
    roleOptions( cancelToken?: CancelToken | undefined): Promise<GetRoleOptionsByGroupRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/roles/role-options";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRoleOptions(_response);
        });
    }

    protected processRoleOptions(response: AxiosResponse): Promise<GetRoleOptionsByGroupRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetRoleOptionsByGroupRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetRoleOptionsByGroupRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get users by role
     * @param id RoleId
     * @return Error
     */
    usersGET3(id: number, cancelToken?: CancelToken | undefined): Promise<GetUsersByRoleRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/roles/users/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUsersGET3(_response);
        });
    }

    protected processUsersGET3(response: AxiosResponse): Promise<GetUsersByRoleRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetUsersByRoleRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetUsersByRoleRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get roles
     * @param roleIds (optional) Role ids
     * @param groupIds (optional) Group ids
     * @param frontendIds (optional) Frontend ids
     * @param remark (optional) Group remark
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    rolesGET(roleIds: number[] | undefined, groupIds: number[] | undefined, frontendIds: number[] | undefined, remark: string | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetRolesByGroupRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/roles?";
        if (roleIds === null)
            throw new Error("The parameter 'roleIds' cannot be null.");
        else if (roleIds !== undefined)
            roleIds && roleIds.forEach(item => { url_ += "RoleIds=" + encodeURIComponent("" + item) + "&"; });
        if (groupIds === null)
            throw new Error("The parameter 'groupIds' cannot be null.");
        else if (groupIds !== undefined)
            groupIds && groupIds.forEach(item => { url_ += "GroupIds=" + encodeURIComponent("" + item) + "&"; });
        if (frontendIds === null)
            throw new Error("The parameter 'frontendIds' cannot be null.");
        else if (frontendIds !== undefined)
            frontendIds && frontendIds.forEach(item => { url_ += "FrontendIds=" + encodeURIComponent("" + item) + "&"; });
        if (remark === null)
            throw new Error("The parameter 'remark' cannot be null.");
        else if (remark !== undefined)
            url_ += "Remark=" + encodeURIComponent("" + remark) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRolesGET(_response);
        });
    }

    protected processRolesGET(response: AxiosResponse): Promise<GetRolesByGroupRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetRolesByGroupRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetRolesByGroupRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add role
     * @param body (optional) Request
     * @return Error
     */
    rolesPOST(body: AddRoleReq | undefined, cancelToken?: CancelToken | undefined): Promise<AddRoleRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/roles";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRolesPOST(_response);
        });
    }

    protected processRolesPOST(response: AxiosResponse): Promise<AddRoleRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddRoleRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddRoleRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get role
     * @param id RoleId
     * @return Error
     */
    rolesGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetRoleRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/roles/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRolesGET2(_response);
        });
    }

    protected processRolesGET2(response: AxiosResponse): Promise<GetRoleRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetRoleRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetRoleRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify Role
     * @param id RoleId
     * @param body (optional) Request
     * @return Error
     */
    rolesPATCH(id: number, body: ModRoleReq | undefined, cancelToken?: CancelToken | undefined): Promise<ModRoleRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/roles/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRolesPATCH(_response);
        });
    }

    protected processRolesPATCH(response: AxiosResponse): Promise<ModRoleRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModRoleRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModRoleRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete role
     * @param id RoleId
     * @return Error
     */
    rolesDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelRoleRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/roles/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRolesDELETE(_response);
        });
    }

    protected processRolesDELETE(response: AxiosResponse): Promise<DelRoleRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelRoleRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelRoleRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Assign role
     * @param body (optional) Request
     * @return Error
     */
    assignRole(body: AssignRoleReq | undefined, cancelToken?: CancelToken | undefined): Promise<AssignRoleRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/roles/assign-role";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAssignRole(_response);
        });
    }

    protected processAssignRole(response: AxiosResponse): Promise<AssignRoleRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AssignRoleRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AssignRoleRespApiRespBase>(resultdefault);

        }
    }

    /**
     * UnAssign role
     * @param body (optional) Request
     * @return Error
     */
    unassignRole(body: UnAssignRoleReq | undefined, cancelToken?: CancelToken | undefined): Promise<UnAssignRoleRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/roles/unassign-role";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUnassignRole(_response);
        });
    }

    protected processUnassignRole(response: AxiosResponse): Promise<UnAssignRoleRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = UnAssignRoleRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<UnAssignRoleRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get role blank permissions
     * @return Error
     */
    blankPermissions2( cancelToken?: CancelToken | undefined): Promise<GetRoleBlankPermissionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/roles/blank-permissions";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBlankPermissions2(_response);
        });
    }

    protected processBlankPermissions2(response: AxiosResponse): Promise<GetRoleBlankPermissionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetRoleBlankPermissionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetRoleBlankPermissionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get role templates by group
     * @return Error
     */
    templates2(id: number, cancelToken?: CancelToken | undefined): Promise<GetRoleTemplatesByGroupRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/roles/templates/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTemplates2(_response);
        });
    }

    protected processTemplates2(response: AxiosResponse): Promise<GetRoleTemplatesByGroupRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetRoleTemplatesByGroupRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetRoleTemplatesByGroupRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get servers by condition
     * @param name (optional) Server Name
     * @param gameId (optional) Game Id
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    serversGET2(name: string | undefined, gameId: number | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetServersRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/servers?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (gameId === null)
            throw new Error("The parameter 'gameId' cannot be null.");
        else if (gameId !== undefined)
            url_ += "GameId=" + encodeURIComponent("" + gameId) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processServersGET2(_response);
        });
    }

    protected processServersGET2(response: AxiosResponse): Promise<GetServersRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetServersRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetServersRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add new tournaments server
     * @param name (optional) Server Name
     * @param gameId (optional) Game Id
     * @return Error
     */
    serversPOST(name: string | undefined, gameId: number | undefined, cancelToken?: CancelToken | undefined): Promise<AddServerRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/servers";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (gameId === null || gameId === undefined)
            throw new Error("The parameter 'gameId' cannot be null.");
        else
            content_.append("GameId", gameId.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processServersPOST(_response);
        });
    }

    protected processServersPOST(response: AxiosResponse): Promise<AddServerRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddServerRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddServerRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get tournaments server detail
     * @param id Server Id
     * @return Error
     */
    serversGET3(id: number, cancelToken?: CancelToken | undefined): Promise<GetServerRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/servers/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processServersGET3(_response);
        });
    }

    protected processServersGET3(response: AxiosResponse): Promise<GetServerRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetServerRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetServerRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify tournaments server
     * @param id tournaments server id
     * @param id (optional) Server Id
     * @param name (optional) Server Name
     * @param isFrozen (optional) Is Frozen
     * @param gameId (optional) Game Id
     * @return Error
     */
    serversPATCH(id: number, id: number | undefined, name: string | undefined, isFrozen: boolean | undefined, gameId: number | undefined, cancelToken?: CancelToken | undefined): Promise<ModServerRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/servers/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("Id", id.toString());
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (isFrozen === null || isFrozen === undefined)
            throw new Error("The parameter 'isFrozen' cannot be null.");
        else
            content_.append("IsFrozen", isFrozen.toString());
        if (gameId === null || gameId === undefined)
            throw new Error("The parameter 'gameId' cannot be null.");
        else
            content_.append("GameId", gameId.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processServersPATCH(_response);
        });
    }

    protected processServersPATCH(response: AxiosResponse): Promise<ModServerRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModServerRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModServerRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete tournaments server
     * @param id tournaments Server Id
     * @return Error
     */
    serversDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelServerRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/servers/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processServersDELETE(_response);
        });
    }

    protected processServersDELETE(response: AxiosResponse): Promise<DelServerRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelServerRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelServerRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get Site-Sections
     * @param filters_Id (optional) 
     * @param filters_Name (optional) 
     * @param filters_GameName (optional) 
     * @param filters_Hidden (optional) 
     * @param sorts_Id (optional) 
     * @param sorts_GameName (optional) 
     * @param sorts_Name (optional) 
     * @param sorts_Hidden (optional) 
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    siteSectionsGET2(filters_Id: number | undefined, filters_Name: string | undefined, filters_GameName: string | undefined, filters_Hidden: boolean | undefined, sorts_Id: EnumFieldSort | undefined, sorts_GameName: EnumFieldSort | undefined, sorts_Name: EnumFieldSort | undefined, sorts_Hidden: EnumFieldSort | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetSiteSectionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/sitesections/site-sections?";
        if (filters_Id === null)
            throw new Error("The parameter 'filters_Id' cannot be null.");
        else if (filters_Id !== undefined)
            url_ += "Filters.Id=" + encodeURIComponent("" + filters_Id) + "&";
        if (filters_Name === null)
            throw new Error("The parameter 'filters_Name' cannot be null.");
        else if (filters_Name !== undefined)
            url_ += "Filters.Name=" + encodeURIComponent("" + filters_Name) + "&";
        if (filters_GameName === null)
            throw new Error("The parameter 'filters_GameName' cannot be null.");
        else if (filters_GameName !== undefined)
            url_ += "Filters.GameName=" + encodeURIComponent("" + filters_GameName) + "&";
        if (filters_Hidden === null)
            throw new Error("The parameter 'filters_Hidden' cannot be null.");
        else if (filters_Hidden !== undefined)
            url_ += "Filters.Hidden=" + encodeURIComponent("" + filters_Hidden) + "&";
        if (sorts_Id === null)
            throw new Error("The parameter 'sorts_Id' cannot be null.");
        else if (sorts_Id !== undefined)
            url_ += "Sorts.Id=" + encodeURIComponent("" + sorts_Id) + "&";
        if (sorts_GameName === null)
            throw new Error("The parameter 'sorts_GameName' cannot be null.");
        else if (sorts_GameName !== undefined)
            url_ += "Sorts.GameName=" + encodeURIComponent("" + sorts_GameName) + "&";
        if (sorts_Name === null)
            throw new Error("The parameter 'sorts_Name' cannot be null.");
        else if (sorts_Name !== undefined)
            url_ += "Sorts.Name=" + encodeURIComponent("" + sorts_Name) + "&";
        if (sorts_Hidden === null)
            throw new Error("The parameter 'sorts_Hidden' cannot be null.");
        else if (sorts_Hidden !== undefined)
            url_ += "Sorts.Hidden=" + encodeURIComponent("" + sorts_Hidden) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSiteSectionsGET2(_response);
        });
    }

    protected processSiteSectionsGET2(response: AxiosResponse): Promise<GetSiteSectionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetSiteSectionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetSiteSectionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add Site-Sections
     * @param gameId (optional) 
     * @param name (optional) 
     * @param hidden (optional) 
     * @param position (optional) 
     * @param headerImage (optional) 
     * @param backGroundImage (optional) 
     * @param iconImage (optional) 
     * @param logoImage (optional) 
     * @return Error
     */
    siteSectionsPOST(gameId: number | undefined, name: string | undefined, hidden: boolean | undefined, position: number | undefined, headerImage: FileParameter | undefined, backGroundImage: FileParameter | undefined, iconImage: FileParameter | undefined, logoImage: FileParameter | undefined, cancelToken?: CancelToken | undefined): Promise<AddSiteSectionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/sitesections/site-sections";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (gameId === null || gameId === undefined)
            throw new Error("The parameter 'gameId' cannot be null.");
        else
            content_.append("GameId", gameId.toString());
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (hidden === null || hidden === undefined)
            throw new Error("The parameter 'hidden' cannot be null.");
        else
            content_.append("Hidden", hidden.toString());
        if (position === null || position === undefined)
            throw new Error("The parameter 'position' cannot be null.");
        else
            content_.append("Position", position.toString());
        if (headerImage === null || headerImage === undefined)
            throw new Error("The parameter 'headerImage' cannot be null.");
        else
            content_.append("HeaderImage", headerImage.data, headerImage.fileName ? headerImage.fileName : "HeaderImage");
        if (backGroundImage === null || backGroundImage === undefined)
            throw new Error("The parameter 'backGroundImage' cannot be null.");
        else
            content_.append("BackGroundImage", backGroundImage.data, backGroundImage.fileName ? backGroundImage.fileName : "BackGroundImage");
        if (iconImage === null || iconImage === undefined)
            throw new Error("The parameter 'iconImage' cannot be null.");
        else
            content_.append("IconImage", iconImage.data, iconImage.fileName ? iconImage.fileName : "IconImage");
        if (logoImage === null || logoImage === undefined)
            throw new Error("The parameter 'logoImage' cannot be null.");
        else
            content_.append("LogoImage", logoImage.data, logoImage.fileName ? logoImage.fileName : "LogoImage");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSiteSectionsPOST(_response);
        });
    }

    protected processSiteSectionsPOST(response: AxiosResponse): Promise<AddSiteSectionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddSiteSectionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddSiteSectionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get Site-Section
     * @param id SiteSectionId
     * @return Error
     */
    siteSectionsGET3(id: number, cancelToken?: CancelToken | undefined): Promise<GetSiteSectionRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/sitesections/site-sections/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSiteSectionsGET3(_response);
        });
    }

    protected processSiteSectionsGET3(response: AxiosResponse): Promise<GetSiteSectionRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetSiteSectionRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetSiteSectionRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify Site-Sections
     * @param id SiteSectionId
     * @param id (optional) 
     * @param gameId (optional) 
     * @param name (optional) 
     * @param hidden (optional) 
     * @param position (optional) 
     * @param headerImage (optional) 
     * @param backGroundImage (optional) 
     * @param iconImage (optional) 
     * @param logoImage (optional) 
     * @return Error
     */
    siteSectionsPATCH(id: number, id: number | undefined, gameId: number | undefined, name: string | undefined, hidden: boolean | undefined, position: number | undefined, headerImage: FileParameter | undefined, backGroundImage: FileParameter | undefined, iconImage: FileParameter | undefined, logoImage: FileParameter | undefined, cancelToken?: CancelToken | undefined): Promise<ModSiteSectionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/sitesections/site-sections/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("Id", id.toString());
        if (gameId === null || gameId === undefined)
            throw new Error("The parameter 'gameId' cannot be null.");
        else
            content_.append("GameId", gameId.toString());
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (hidden === null || hidden === undefined)
            throw new Error("The parameter 'hidden' cannot be null.");
        else
            content_.append("Hidden", hidden.toString());
        if (position === null || position === undefined)
            throw new Error("The parameter 'position' cannot be null.");
        else
            content_.append("Position", position.toString());
        if (headerImage === null || headerImage === undefined)
            throw new Error("The parameter 'headerImage' cannot be null.");
        else
            content_.append("HeaderImage", headerImage.data, headerImage.fileName ? headerImage.fileName : "HeaderImage");
        if (backGroundImage === null || backGroundImage === undefined)
            throw new Error("The parameter 'backGroundImage' cannot be null.");
        else
            content_.append("BackGroundImage", backGroundImage.data, backGroundImage.fileName ? backGroundImage.fileName : "BackGroundImage");
        if (iconImage === null || iconImage === undefined)
            throw new Error("The parameter 'iconImage' cannot be null.");
        else
            content_.append("IconImage", iconImage.data, iconImage.fileName ? iconImage.fileName : "IconImage");
        if (logoImage === null || logoImage === undefined)
            throw new Error("The parameter 'logoImage' cannot be null.");
        else
            content_.append("LogoImage", logoImage.data, logoImage.fileName ? logoImage.fileName : "LogoImage");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSiteSectionsPATCH(_response);
        });
    }

    protected processSiteSectionsPATCH(response: AxiosResponse): Promise<ModSiteSectionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModSiteSectionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModSiteSectionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete Site-Sections
     * @param id SiteSectionId
     * @return Error
     */
    siteSectionsDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelSiteSectionsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/sitesections/site-sections/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSiteSectionsDELETE(_response);
        });
    }

    protected processSiteSectionsDELETE(response: AxiosResponse): Promise<DelSiteSectionsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelSiteSectionsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelSiteSectionsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get tournaments sponsors by condition
     * @param name (optional) Sponsor Name
     * @param website (optional) Sponsor Url
     * @param creator (optional) Creator
     * @param updatedFrom (optional) Last Updated From
     * @param updatedTo (optional) Last Updated To
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    sponsorsGET(name: string | undefined, website: string | undefined, creator: string | undefined, updatedFrom: number | undefined, updatedTo: number | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetSponsorsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/sponsors?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (website === null)
            throw new Error("The parameter 'website' cannot be null.");
        else if (website !== undefined)
            url_ += "Website=" + encodeURIComponent("" + website) + "&";
        if (creator === null)
            throw new Error("The parameter 'creator' cannot be null.");
        else if (creator !== undefined)
            url_ += "Creator=" + encodeURIComponent("" + creator) + "&";
        if (updatedFrom === null)
            throw new Error("The parameter 'updatedFrom' cannot be null.");
        else if (updatedFrom !== undefined)
            url_ += "UpdatedFrom=" + encodeURIComponent("" + updatedFrom) + "&";
        if (updatedTo === null)
            throw new Error("The parameter 'updatedTo' cannot be null.");
        else if (updatedTo !== undefined)
            url_ += "UpdatedTo=" + encodeURIComponent("" + updatedTo) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSponsorsGET(_response);
        });
    }

    protected processSponsorsGET(response: AxiosResponse): Promise<GetSponsorsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetSponsorsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetSponsorsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add new Tournaments Sponsor
     * @param name (optional) Sponsor Name
     * @param description (optional) Sponsor Description
     * @param imageFile (optional) Sponsor Logo
     * @param url (optional) Sponsor website url
     * @return Error
     */
    sponsorsPOST(name: string | undefined, description: string | undefined, imageFile: FileParameter | undefined, url: string | undefined, cancelToken?: CancelToken | undefined): Promise<AddSponsorRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/sponsors";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (description === null || description === undefined)
            throw new Error("The parameter 'description' cannot be null.");
        else
            content_.append("Description", description.toString());
        if (imageFile === null || imageFile === undefined)
            throw new Error("The parameter 'imageFile' cannot be null.");
        else
            content_.append("ImageFile", imageFile.data, imageFile.fileName ? imageFile.fileName : "ImageFile");
        if (url === null || url === undefined)
            throw new Error("The parameter 'url' cannot be null.");
        else
            content_.append("Url", url.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSponsorsPOST(_response);
        });
    }

    protected processSponsorsPOST(response: AxiosResponse): Promise<AddSponsorRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddSponsorRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddSponsorRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get Tournaments Sponsor
     * @param id Sponsors Id
     * @return Error
     */
    sponsorsGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetSponsorRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/sponsors/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSponsorsGET2(_response);
        });
    }

    protected processSponsorsGET2(response: AxiosResponse): Promise<GetSponsorRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetSponsorRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetSponsorRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify Tournaments Sponsor
     * @param id Tournaments Sponsor Id
     * @param id (optional) Sponsor Id
     * @param name (optional) Sponsor Name
     * @param description (optional) Sponsor Description
     * @param imageFile (optional) Sponsor Logo
     * @param url (optional) Sponsor website url
     * @return Error
     */
    sponsorsPATCH(id: number, id: number | undefined, name: string | undefined, description: string | undefined, imageFile: FileParameter | undefined, url: string | undefined, cancelToken?: CancelToken | undefined): Promise<ModSponsorRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/sponsors/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("Id", id.toString());
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (description === null || description === undefined)
            throw new Error("The parameter 'description' cannot be null.");
        else
            content_.append("Description", description.toString());
        if (imageFile === null || imageFile === undefined)
            throw new Error("The parameter 'imageFile' cannot be null.");
        else
            content_.append("ImageFile", imageFile.data, imageFile.fileName ? imageFile.fileName : "ImageFile");
        if (url === null || url === undefined)
            throw new Error("The parameter 'url' cannot be null.");
        else
            content_.append("Url", url.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSponsorsPATCH(_response);
        });
    }

    protected processSponsorsPATCH(response: AxiosResponse): Promise<ModSponsorRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModSponsorRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModSponsorRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete Tournaments Sponsor
     * @param id Tournaments Sponsor Id
     * @return Error
     */
    sponsorsDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelSponsorRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/sponsors/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSponsorsDELETE(_response);
        });
    }

    protected processSponsorsDELETE(response: AxiosResponse): Promise<DelSponsorRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelSponsorRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelSponsorRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get teams
     * @param teamName (optional) TeamName
     * @param teamId (optional) Team Id
     * @param playerId (optional) Player Id
     * @param gameId (optional) Game Id
     * @param countryId (optional) Country Id
     * @param updatedAtFrom (optional) Created at from
     * @param updatedAtTo (optional) Created at to
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    teamsGET(teamName: string | undefined, teamId: number | undefined, playerId: number | undefined, gameId: number | undefined, countryId: number | undefined, updatedAtFrom: number | undefined, updatedAtTo: number | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetTeamsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/teams?";
        if (teamName === null)
            throw new Error("The parameter 'teamName' cannot be null.");
        else if (teamName !== undefined)
            url_ += "TeamName=" + encodeURIComponent("" + teamName) + "&";
        if (teamId === null)
            throw new Error("The parameter 'teamId' cannot be null.");
        else if (teamId !== undefined)
            url_ += "TeamId=" + encodeURIComponent("" + teamId) + "&";
        if (playerId === null)
            throw new Error("The parameter 'playerId' cannot be null.");
        else if (playerId !== undefined)
            url_ += "PlayerId=" + encodeURIComponent("" + playerId) + "&";
        if (gameId === null)
            throw new Error("The parameter 'gameId' cannot be null.");
        else if (gameId !== undefined)
            url_ += "GameId=" + encodeURIComponent("" + gameId) + "&";
        if (countryId === null)
            throw new Error("The parameter 'countryId' cannot be null.");
        else if (countryId !== undefined)
            url_ += "CountryId=" + encodeURIComponent("" + countryId) + "&";
        if (updatedAtFrom === null)
            throw new Error("The parameter 'updatedAtFrom' cannot be null.");
        else if (updatedAtFrom !== undefined)
            url_ += "UpdatedAtFrom=" + encodeURIComponent("" + updatedAtFrom) + "&";
        if (updatedAtTo === null)
            throw new Error("The parameter 'updatedAtTo' cannot be null.");
        else if (updatedAtTo !== undefined)
            url_ += "UpdatedAtTo=" + encodeURIComponent("" + updatedAtTo) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTeamsGET(_response);
        });
    }

    protected processTeamsGET(response: AxiosResponse): Promise<GetTeamsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetTeamsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetTeamsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add team
     * @param teamName (optional) 
     * @param teamTag (optional) 
     * @param gameId (optional) 
     * @param countryId (optional) 
     * @param image (optional) 
     * @param description (optional) 
     * @param initialRating (optional) 
     * @param excludeRankings (optional) 
     * @param facebook (optional) 
     * @param twitter (optional) 
     * @param youtube (optional) 
     * @return Error
     */
    teamsPOST(teamName: string | undefined, teamTag: string | undefined, gameId: number | undefined, countryId: number | undefined, image: FileParameter | undefined, description: string | undefined, initialRating: number | undefined, excludeRankings: boolean | undefined, facebook: string | undefined, twitter: string | undefined, youtube: string | undefined, cancelToken?: CancelToken | undefined): Promise<AddTeamRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/teams";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (teamName === null || teamName === undefined)
            throw new Error("The parameter 'teamName' cannot be null.");
        else
            content_.append("TeamName", teamName.toString());
        if (teamTag === null || teamTag === undefined)
            throw new Error("The parameter 'teamTag' cannot be null.");
        else
            content_.append("TeamTag", teamTag.toString());
        if (gameId === null || gameId === undefined)
            throw new Error("The parameter 'gameId' cannot be null.");
        else
            content_.append("GameId", gameId.toString());
        if (countryId === null || countryId === undefined)
            throw new Error("The parameter 'countryId' cannot be null.");
        else
            content_.append("CountryId", countryId.toString());
        if (image === null || image === undefined)
            throw new Error("The parameter 'image' cannot be null.");
        else
            content_.append("Image", image.data, image.fileName ? image.fileName : "Image");
        if (description === null || description === undefined)
            throw new Error("The parameter 'description' cannot be null.");
        else
            content_.append("Description", description.toString());
        if (initialRating === null || initialRating === undefined)
            throw new Error("The parameter 'initialRating' cannot be null.");
        else
            content_.append("InitialRating", initialRating.toString());
        if (excludeRankings === null || excludeRankings === undefined)
            throw new Error("The parameter 'excludeRankings' cannot be null.");
        else
            content_.append("ExcludeRankings", excludeRankings.toString());
        if (facebook === null || facebook === undefined)
            throw new Error("The parameter 'facebook' cannot be null.");
        else
            content_.append("Facebook", facebook.toString());
        if (twitter === null || twitter === undefined)
            throw new Error("The parameter 'twitter' cannot be null.");
        else
            content_.append("Twitter", twitter.toString());
        if (youtube === null || youtube === undefined)
            throw new Error("The parameter 'youtube' cannot be null.");
        else
            content_.append("Youtube", youtube.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTeamsPOST(_response);
        });
    }

    protected processTeamsPOST(response: AxiosResponse): Promise<AddTeamRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddTeamRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddTeamRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get team
     * @param id TeamId
     * @return Error
     */
    teamsGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetTeamRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/teams/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTeamsGET2(_response);
        });
    }

    protected processTeamsGET2(response: AxiosResponse): Promise<GetTeamRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetTeamRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetTeamRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify team
     * @param id TeamId
     * @param teamId (optional) 
     * @param teamName (optional) 
     * @param teamTag (optional) 
     * @param ownerId (optional) OwnerId
     * @param captainId (optional) CaptainId
     * @param manageId (optional) ManageId
     * @param excludedRankings (optional) 
     * @param image (optional) 
     * @param isRemoveImage (optional) if IsRemoveImage = true will remove Image and set ImageFilePath = null
     * @param gameId (optional) 
     * @param countryId (optional) 
     * @param description (optional) 
     * @param facebook (optional) 
     * @param twitter (optional) 
     * @param youtube (optional) 
     * @return Error
     */
    teamsPATCH(id: number, teamId: number | undefined, teamName: string | undefined, teamTag: string | undefined, ownerId: number | undefined, captainId: number | undefined, manageId: number | undefined, excludedRankings: boolean | undefined, image: FileParameter | undefined, isRemoveImage: boolean | undefined, gameId: number | undefined, countryId: number | undefined, description: string | undefined, facebook: string | undefined, twitter: string | undefined, youtube: string | undefined, cancelToken?: CancelToken | undefined): Promise<ModTeamRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/teams/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (teamId === null || teamId === undefined)
            throw new Error("The parameter 'teamId' cannot be null.");
        else
            content_.append("TeamId", teamId.toString());
        if (teamName === null || teamName === undefined)
            throw new Error("The parameter 'teamName' cannot be null.");
        else
            content_.append("TeamName", teamName.toString());
        if (teamTag === null || teamTag === undefined)
            throw new Error("The parameter 'teamTag' cannot be null.");
        else
            content_.append("TeamTag", teamTag.toString());
        if (ownerId === null || ownerId === undefined)
            throw new Error("The parameter 'ownerId' cannot be null.");
        else
            content_.append("OwnerId", ownerId.toString());
        if (captainId === null || captainId === undefined)
            throw new Error("The parameter 'captainId' cannot be null.");
        else
            content_.append("CaptainId", captainId.toString());
        if (manageId === null || manageId === undefined)
            throw new Error("The parameter 'manageId' cannot be null.");
        else
            content_.append("ManageId", manageId.toString());
        if (excludedRankings === null || excludedRankings === undefined)
            throw new Error("The parameter 'excludedRankings' cannot be null.");
        else
            content_.append("ExcludedRankings", excludedRankings.toString());
        if (image === null || image === undefined)
            throw new Error("The parameter 'image' cannot be null.");
        else
            content_.append("Image", image.data, image.fileName ? image.fileName : "Image");
        if (isRemoveImage === null || isRemoveImage === undefined)
            throw new Error("The parameter 'isRemoveImage' cannot be null.");
        else
            content_.append("IsRemoveImage", isRemoveImage.toString());
        if (gameId === null || gameId === undefined)
            throw new Error("The parameter 'gameId' cannot be null.");
        else
            content_.append("GameId", gameId.toString());
        if (countryId === null || countryId === undefined)
            throw new Error("The parameter 'countryId' cannot be null.");
        else
            content_.append("CountryId", countryId.toString());
        if (description === null || description === undefined)
            throw new Error("The parameter 'description' cannot be null.");
        else
            content_.append("Description", description.toString());
        if (facebook === null || facebook === undefined)
            throw new Error("The parameter 'facebook' cannot be null.");
        else
            content_.append("Facebook", facebook.toString());
        if (twitter === null || twitter === undefined)
            throw new Error("The parameter 'twitter' cannot be null.");
        else
            content_.append("Twitter", twitter.toString());
        if (youtube === null || youtube === undefined)
            throw new Error("The parameter 'youtube' cannot be null.");
        else
            content_.append("Youtube", youtube.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTeamsPATCH(_response);
        });
    }

    protected processTeamsPATCH(response: AxiosResponse): Promise<ModTeamRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModTeamRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModTeamRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete team
     * @param id TeamId
     * @return Error
     */
    teamsDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelTeamRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/teams/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTeamsDELETE(_response);
        });
    }

    protected processTeamsDELETE(response: AxiosResponse): Promise<DelTeamRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelTeamRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelTeamRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get team players
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    teamPlayersGET(teamid: number, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetTeamPlayersRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/teams/{teamid}/team-players?";
        if (teamid === undefined || teamid === null)
          throw new Error("The parameter 'teamid' must be defined.");
        url_ = url_.replace("{teamid}", encodeURIComponent("" + teamid));
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTeamPlayersGET(_response);
        });
    }

    protected processTeamPlayersGET(response: AxiosResponse): Promise<GetTeamPlayersRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetTeamPlayersRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetTeamPlayersRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add team player
     * @param playerId (optional) 
     * @param joinedAt (optional) 
     * @param isHidden (optional) 
     * @return Error
     */
    teamPlayersPOST(teamid: number, playerId: number | undefined, joinedAt: number | undefined, isHidden: boolean | undefined, cancelToken?: CancelToken | undefined): Promise<AddTeamPlayerRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/teams/{teamid}/team-players";
        if (teamid === undefined || teamid === null)
          throw new Error("The parameter 'teamid' must be defined.");
        url_ = url_.replace("{teamid}", encodeURIComponent("" + teamid));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (playerId === null || playerId === undefined)
            throw new Error("The parameter 'playerId' cannot be null.");
        else
            content_.append("PlayerId", playerId.toString());
        if (joinedAt === null || joinedAt === undefined)
            throw new Error("The parameter 'joinedAt' cannot be null.");
        else
            content_.append("JoinedAt", joinedAt.toString());
        if (isHidden === null || isHidden === undefined)
            throw new Error("The parameter 'isHidden' cannot be null.");
        else
            content_.append("IsHidden", isHidden.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTeamPlayersPOST(_response);
        });
    }

    protected processTeamPlayersPOST(response: AxiosResponse): Promise<AddTeamPlayerRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddTeamPlayerRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddTeamPlayerRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get team player
     * @return Error
     */
    teamPlayersGET2(teamid: number, teamplayerid: number, cancelToken?: CancelToken | undefined): Promise<GetTeamPlayerRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/teams/{teamid}/team-players/{teamplayerid}";
        if (teamid === undefined || teamid === null)
          throw new Error("The parameter 'teamid' must be defined.");
        url_ = url_.replace("{teamid}", encodeURIComponent("" + teamid));
        if (teamplayerid === undefined || teamplayerid === null)
          throw new Error("The parameter 'teamplayerid' must be defined.");
        url_ = url_.replace("{teamplayerid}", encodeURIComponent("" + teamplayerid));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTeamPlayersGET2(_response);
        });
    }

    protected processTeamPlayersGET2(response: AxiosResponse): Promise<GetTeamPlayerRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetTeamPlayerRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetTeamPlayerRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify team player
     * @param teamPlayerId (optional) TeamPlayerId
     * @param teamId (optional) TeamId
     * @param joinDate (optional) JoinDate
     * @param leaveDate (optional) LeaveDate
     * @param isHidden (optional) IsHidden
     * @return Error
     */
    teamPlayersPATCH(teamid: number, teamplayerid: number, teamPlayerId: number | undefined, teamId: number | undefined, joinDate: number | undefined, leaveDate: number | undefined, isHidden: boolean | undefined, cancelToken?: CancelToken | undefined): Promise<ModTeamPlayerRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/teams/{teamid}/team-players/{teamplayerid}";
        if (teamid === undefined || teamid === null)
          throw new Error("The parameter 'teamid' must be defined.");
        url_ = url_.replace("{teamid}", encodeURIComponent("" + teamid));
        if (teamplayerid === undefined || teamplayerid === null)
          throw new Error("The parameter 'teamplayerid' must be defined.");
        url_ = url_.replace("{teamplayerid}", encodeURIComponent("" + teamplayerid));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (teamPlayerId === null || teamPlayerId === undefined)
            throw new Error("The parameter 'teamPlayerId' cannot be null.");
        else
            content_.append("TeamPlayerId", teamPlayerId.toString());
        if (teamId === null || teamId === undefined)
            throw new Error("The parameter 'teamId' cannot be null.");
        else
            content_.append("TeamId", teamId.toString());
        if (joinDate === null || joinDate === undefined)
            throw new Error("The parameter 'joinDate' cannot be null.");
        else
            content_.append("JoinDate", joinDate.toString());
        if (leaveDate === null || leaveDate === undefined)
            throw new Error("The parameter 'leaveDate' cannot be null.");
        else
            content_.append("LeaveDate", leaveDate.toString());
        if (isHidden === null || isHidden === undefined)
            throw new Error("The parameter 'isHidden' cannot be null.");
        else
            content_.append("IsHidden", isHidden.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTeamPlayersPATCH(_response);
        });
    }

    protected processTeamPlayersPATCH(response: AxiosResponse): Promise<ModTeamPlayerRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModTeamPlayerRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModTeamPlayerRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete team player
     * @return Error
     */
    teamPlayersDELETE(teamid: number, teamplayerid: number, cancelToken?: CancelToken | undefined): Promise<DelTeamPlayerRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/teams/{teamid}/team-players/{teamplayerid}";
        if (teamid === undefined || teamid === null)
          throw new Error("The parameter 'teamid' must be defined.");
        url_ = url_.replace("{teamid}", encodeURIComponent("" + teamid));
        if (teamplayerid === undefined || teamplayerid === null)
          throw new Error("The parameter 'teamplayerid' must be defined.");
        url_ = url_.replace("{teamplayerid}", encodeURIComponent("" + teamplayerid));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTeamPlayersDELETE(_response);
        });
    }

    protected processTeamPlayersDELETE(response: AxiosResponse): Promise<DelTeamPlayerRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelTeamPlayerRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelTeamPlayerRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get fuzzy teams
     * @param maxCount (optional) 
     * @return Error
     */
    fuzzy4(fuzzyPrefix: string, maxCount: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetFuzzyTeamsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/teams/fuzzy?";
          if (fuzzyPrefix === undefined || fuzzyPrefix === null)
            throw new Error("The parameter 'fuzzyPrefix' must be defined and cannot be null.");
          else
            url_ += "FuzzyPrefix=" + encodeURIComponent("" + fuzzyPrefix) + "&";
        if (maxCount === null)
            throw new Error("The parameter 'maxCount' cannot be null.");
        else if (maxCount !== undefined)
            url_ += "MaxCount=" + encodeURIComponent("" + maxCount) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFuzzy4(_response);
        });
    }

    protected processFuzzy4(response: AxiosResponse): Promise<GetFuzzyTeamsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetFuzzyTeamsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetFuzzyTeamsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Clear All Memory Cache
     * @param api_version (optional) 
     * @return Success
     */
    clearAllMemoryCache(api_version: string | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/tools/clear-all-memory-cache?";
        if (api_version === null)
            throw new Error("The parameter 'api_version' cannot be null.");
        else if (api_version !== undefined)
            url_ += "api-version=" + encodeURIComponent("" + api_version) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processClearAllMemoryCache(_response);
        });
    }

    protected processClearAllMemoryCache(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Get GameAccounts
     * @param playerId PlayerId
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    gameAccountsGET(playerId: number, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetGameAccountsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/tournaments/game-accounts?";
          if (playerId === undefined || playerId === null)
            throw new Error("The parameter 'playerId' must be defined and cannot be null.");
          else
            url_ += "PlayerId=" + encodeURIComponent("" + playerId) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGameAccountsGET(_response);
        });
    }

    protected processGameAccountsGET(response: AxiosResponse): Promise<GetGameAccountsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetGameAccountsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetGameAccountsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add GameAccount
     * @param playerId (optional) PlayerId
     * @param gameId (optional) GameId
     * @param serverId (optional) Server Id
     * @param gameAccountName (optional) GameAccount Name
     * @return Error
     */
    gameAccountsPOST(playerId: number | undefined, gameId: number | undefined, serverId: number | undefined, gameAccountName: string | undefined, cancelToken?: CancelToken | undefined): Promise<AddGameAccountRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/tournaments/game-accounts";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (playerId === null || playerId === undefined)
            throw new Error("The parameter 'playerId' cannot be null.");
        else
            content_.append("PlayerId", playerId.toString());
        if (gameId === null || gameId === undefined)
            throw new Error("The parameter 'gameId' cannot be null.");
        else
            content_.append("GameId", gameId.toString());
        if (serverId === null || serverId === undefined)
            throw new Error("The parameter 'serverId' cannot be null.");
        else
            content_.append("ServerId", serverId.toString());
        if (gameAccountName === null || gameAccountName === undefined)
            throw new Error("The parameter 'gameAccountName' cannot be null.");
        else
            content_.append("GameAccountName", gameAccountName.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGameAccountsPOST(_response);
        });
    }

    protected processGameAccountsPOST(response: AxiosResponse): Promise<AddGameAccountRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddGameAccountRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddGameAccountRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get GameAccount
     * @param id GameAccountId
     * @return Error
     */
    gameAccountsGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetGameAccountRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/tournaments/game-accounts/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGameAccountsGET2(_response);
        });
    }

    protected processGameAccountsGET2(response: AxiosResponse): Promise<GetGameAccountRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetGameAccountRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetGameAccountRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify GameAccount
     * @param id PlayerId
     * @param body (optional) Request
     * @return Error
     */
    gameAccountsPATCH(id: number, body: ModGameAccountReq | undefined, cancelToken?: CancelToken | undefined): Promise<ModGameAccountRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/tournaments/game-accounts/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGameAccountsPATCH(_response);
        });
    }

    protected processGameAccountsPATCH(response: AxiosResponse): Promise<ModGameAccountRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModGameAccountRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModGameAccountRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete GameAccount
     * @param id GameAccountId
     * @return Error
     */
    gameAccountsDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelGameAccountRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/tournaments/game-accounts/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGameAccountsDELETE(_response);
        });
    }

    protected processGameAccountsDELETE(response: AxiosResponse): Promise<DelGameAccountRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelGameAccountRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelGameAccountRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get fuzzy users
     * @param maxCount (optional) 
     * @return Error
     */
    fuzzy5(fuzzyPrefix: string, maxCount: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetFuzzyTournamentsRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/tournaments/fuzzy?";
          if (fuzzyPrefix === undefined || fuzzyPrefix === null)
            throw new Error("The parameter 'fuzzyPrefix' must be defined and cannot be null.");
          else
            url_ += "FuzzyPrefix=" + encodeURIComponent("" + fuzzyPrefix) + "&";
        if (maxCount === null)
            throw new Error("The parameter 'maxCount' cannot be null.");
        else if (maxCount !== undefined)
            url_ += "MaxCount=" + encodeURIComponent("" + maxCount) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFuzzy5(_response);
        });
    }

    protected processFuzzy5(response: AxiosResponse): Promise<GetFuzzyTournamentsRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetFuzzyTournamentsRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetFuzzyTournamentsRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get users
     * @param filters_UserName (optional) 
     * @param filters_UserTypeId (optional) 
     * @param filters_FrontEndIds (optional) 
     * @param filters_Groups (optional) 
     * @param filters_Roles (optional) 
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    usersGET4(filters_UserName: string | undefined, filters_UserTypeId: number | undefined, filters_FrontEndIds: number[] | undefined, filters_Groups: number[] | undefined, filters_Roles: number[] | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetUsersRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/users?";
        if (filters_UserName === null)
            throw new Error("The parameter 'filters_UserName' cannot be null.");
        else if (filters_UserName !== undefined)
            url_ += "Filters.UserName=" + encodeURIComponent("" + filters_UserName) + "&";
        if (filters_UserTypeId === null)
            throw new Error("The parameter 'filters_UserTypeId' cannot be null.");
        else if (filters_UserTypeId !== undefined)
            url_ += "Filters.UserTypeId=" + encodeURIComponent("" + filters_UserTypeId) + "&";
        if (filters_FrontEndIds === null)
            throw new Error("The parameter 'filters_FrontEndIds' cannot be null.");
        else if (filters_FrontEndIds !== undefined)
            filters_FrontEndIds && filters_FrontEndIds.forEach(item => { url_ += "Filters.FrontEndIds=" + encodeURIComponent("" + item) + "&"; });
        if (filters_Groups === null)
            throw new Error("The parameter 'filters_Groups' cannot be null.");
        else if (filters_Groups !== undefined)
            filters_Groups && filters_Groups.forEach(item => { url_ += "Filters.Groups=" + encodeURIComponent("" + item) + "&"; });
        if (filters_Roles === null)
            throw new Error("The parameter 'filters_Roles' cannot be null.");
        else if (filters_Roles !== undefined)
            filters_Roles && filters_Roles.forEach(item => { url_ += "Filters.Roles=" + encodeURIComponent("" + item) + "&"; });
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUsersGET4(_response);
        });
    }

    protected processUsersGET4(response: AxiosResponse): Promise<GetUsersRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetUsersRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetUsersRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add User
     * @param userName (optional) 
     * @param email (optional) 
     * @param password (optional) 
     * @param lastName (optional) 
     * @param firstName (optional) 
     * @param userTypeId (optional) 
     * @param groupIds (optional) 
     * @param roleIds (optional) 
     * @param gender (optional) 
     * @param dateOfBirth (optional) 
     * @param city (optional) 
     * @param countryId (optional) 
     * @param aboutMe (optional) 
     * @param avatarImage (optional) 
     * @return Error
     */
    usersPOST(userName: string | undefined, email: string | undefined, password: string | undefined, lastName: string | undefined, firstName: string | undefined, userTypeId: number | undefined, groupIds: number[] | undefined, roleIds: number[] | undefined, gender: EnumGender | undefined, dateOfBirth: Date | undefined, city: string | undefined, countryId: number | undefined, aboutMe: string | undefined, avatarImage: FileParameter | undefined, cancelToken?: CancelToken | undefined): Promise<AddUserRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/users";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (userName === null || userName === undefined)
            throw new Error("The parameter 'userName' cannot be null.");
        else
            content_.append("UserName", userName.toString());
        if (email === null || email === undefined)
            throw new Error("The parameter 'email' cannot be null.");
        else
            content_.append("Email", email.toString());
        if (password === null || password === undefined)
            throw new Error("The parameter 'password' cannot be null.");
        else
            content_.append("Password", password.toString());
        if (lastName === null || lastName === undefined)
            throw new Error("The parameter 'lastName' cannot be null.");
        else
            content_.append("LastName", lastName.toString());
        if (firstName === null || firstName === undefined)
            throw new Error("The parameter 'firstName' cannot be null.");
        else
            content_.append("FirstName", firstName.toString());
        if (userTypeId === null || userTypeId === undefined)
            throw new Error("The parameter 'userTypeId' cannot be null.");
        else
            content_.append("UserTypeId", userTypeId.toString());
        if (groupIds === null || groupIds === undefined)
            throw new Error("The parameter 'groupIds' cannot be null.");
        else
            groupIds.forEach(item_ => content_.append("GroupIds", item_.toString()));
        if (roleIds === null || roleIds === undefined)
            throw new Error("The parameter 'roleIds' cannot be null.");
        else
            roleIds.forEach(item_ => content_.append("RoleIds", item_.toString()));
        if (gender === null || gender === undefined)
            throw new Error("The parameter 'gender' cannot be null.");
        else
            content_.append("Gender", gender.toString());
        if (dateOfBirth === null || dateOfBirth === undefined)
            throw new Error("The parameter 'dateOfBirth' cannot be null.");
        else
            content_.append("DateOfBirth", dateOfBirth.toJSON());
        if (city === null || city === undefined)
            throw new Error("The parameter 'city' cannot be null.");
        else
            content_.append("City", city.toString());
        if (countryId === null || countryId === undefined)
            throw new Error("The parameter 'countryId' cannot be null.");
        else
            content_.append("CountryId", countryId.toString());
        if (aboutMe === null || aboutMe === undefined)
            throw new Error("The parameter 'aboutMe' cannot be null.");
        else
            content_.append("AboutMe", aboutMe.toString());
        if (avatarImage === null || avatarImage === undefined)
            throw new Error("The parameter 'avatarImage' cannot be null.");
        else
            content_.append("AvatarImage", avatarImage.data, avatarImage.fileName ? avatarImage.fileName : "AvatarImage");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUsersPOST(_response);
        });
    }

    protected processUsersPOST(response: AxiosResponse): Promise<AddUserRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddUserRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddUserRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get User
     * @param id UserId
     * @return Error
     */
    usersGET5(id: number, cancelToken?: CancelToken | undefined): Promise<GetUserRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/users/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUsersGET5(_response);
        });
    }

    protected processUsersGET5(response: AxiosResponse): Promise<GetUserRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetUserRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetUserRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify user
     * @param id UserId
     * @param userId (optional) 
     * @param userName (optional) 
     * @param email (optional) 
     * @param password (optional) 
     * @param lastName (optional) 
     * @param firstName (optional) 
     * @param userTypeId (optional) 
     * @param groupIds (optional) 未變更帶null，變更後帶完整資料
     * @param roleIds (optional) 未變更帶null，變更後帶完整資料
     * @param gender (optional) 
     * @param dateOfBirth (optional) 
     * @param city (optional) 
     * @param countryId (optional) 
     * @param aboutMe (optional) 
     * @param avatarImage (optional) 
     * @return Error
     */
    usersPATCH(id: number, userId: number | undefined, userName: string | undefined, email: string | undefined, password: string | undefined, lastName: string | undefined, firstName: string | undefined, userTypeId: number | undefined, groupIds: number[] | undefined, roleIds: number[] | undefined, gender: EnumGender | undefined, dateOfBirth: Date | undefined, city: string | undefined, countryId: number | undefined, aboutMe: string | undefined, avatarImage: FileParameter | undefined, cancelToken?: CancelToken | undefined): Promise<ModUserRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/users/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (userId === null || userId === undefined)
            throw new Error("The parameter 'userId' cannot be null.");
        else
            content_.append("UserId", userId.toString());
        if (userName === null || userName === undefined)
            throw new Error("The parameter 'userName' cannot be null.");
        else
            content_.append("UserName", userName.toString());
        if (email === null || email === undefined)
            throw new Error("The parameter 'email' cannot be null.");
        else
            content_.append("Email", email.toString());
        if (password === null || password === undefined)
            throw new Error("The parameter 'password' cannot be null.");
        else
            content_.append("Password", password.toString());
        if (lastName === null || lastName === undefined)
            throw new Error("The parameter 'lastName' cannot be null.");
        else
            content_.append("LastName", lastName.toString());
        if (firstName === null || firstName === undefined)
            throw new Error("The parameter 'firstName' cannot be null.");
        else
            content_.append("FirstName", firstName.toString());
        if (userTypeId === null || userTypeId === undefined)
            throw new Error("The parameter 'userTypeId' cannot be null.");
        else
            content_.append("UserTypeId", userTypeId.toString());
        if (groupIds === null || groupIds === undefined)
            throw new Error("The parameter 'groupIds' cannot be null.");
        else
            groupIds.forEach(item_ => content_.append("GroupIds", item_.toString()));
        if (roleIds === null || roleIds === undefined)
            throw new Error("The parameter 'roleIds' cannot be null.");
        else
            roleIds.forEach(item_ => content_.append("RoleIds", item_.toString()));
        if (gender === null || gender === undefined)
            throw new Error("The parameter 'gender' cannot be null.");
        else
            content_.append("Gender", gender.toString());
        if (dateOfBirth === null || dateOfBirth === undefined)
            throw new Error("The parameter 'dateOfBirth' cannot be null.");
        else
            content_.append("DateOfBirth", dateOfBirth.toJSON());
        if (city === null || city === undefined)
            throw new Error("The parameter 'city' cannot be null.");
        else
            content_.append("City", city.toString());
        if (countryId === null || countryId === undefined)
            throw new Error("The parameter 'countryId' cannot be null.");
        else
            content_.append("CountryId", countryId.toString());
        if (aboutMe === null || aboutMe === undefined)
            throw new Error("The parameter 'aboutMe' cannot be null.");
        else
            content_.append("AboutMe", aboutMe.toString());
        if (avatarImage === null || avatarImage === undefined)
            throw new Error("The parameter 'avatarImage' cannot be null.");
        else
            content_.append("AvatarImage", avatarImage.data, avatarImage.fileName ? avatarImage.fileName : "AvatarImage");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUsersPATCH(_response);
        });
    }

    protected processUsersPATCH(response: AxiosResponse): Promise<ModUserRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModUserRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModUserRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete user
     * @param id UserId
     * @return Error
     */
    usersDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelUserRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/users/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUsersDELETE(_response);
        });
    }

    protected processUsersDELETE(response: AxiosResponse): Promise<DelUserRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelUserRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelUserRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get fuzzy users
     * @param maxCount (optional) 
     * @return Error
     */
    fuzzy6(fuzzyPrefix: string, maxCount: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetFuzzyUsersRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/users/fuzzy?";
          if (fuzzyPrefix === undefined || fuzzyPrefix === null)
            throw new Error("The parameter 'fuzzyPrefix' must be defined and cannot be null.");
          else
            url_ += "FuzzyPrefix=" + encodeURIComponent("" + fuzzyPrefix) + "&";
        if (maxCount === null)
            throw new Error("The parameter 'maxCount' cannot be null.");
        else if (maxCount !== undefined)
            url_ += "MaxCount=" + encodeURIComponent("" + maxCount) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFuzzy6(_response);
        });
    }

    protected processFuzzy6(response: AxiosResponse): Promise<GetFuzzyUsersRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetFuzzyUsersRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetFuzzyUsersRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get user menu and userprofile
     * @return Error
     */
    usersession( cancelToken?: CancelToken | undefined): Promise<GetUserSessionRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/usersession";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUsersession(_response);
        });
    }

    protected processUsersession(response: AxiosResponse): Promise<GetUserSessionRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetUserSessionRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetUserSessionRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get venues by condition
     * @param name (optional) Venues Name
     * @param countryId (optional) Venues Country Id
     * @param pageNo (optional) 
     * @param pageSize (optional) 
     * @return Error
     */
    venuesGET(name: string | undefined, countryId: number | undefined, pageNo: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetVenuesRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/venues?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (countryId === null)
            throw new Error("The parameter 'countryId' cannot be null.");
        else if (countryId !== undefined)
            url_ += "CountryId=" + encodeURIComponent("" + countryId) + "&";
        if (pageNo === null)
            throw new Error("The parameter 'pageNo' cannot be null.");
        else if (pageNo !== undefined)
            url_ += "PageNo=" + encodeURIComponent("" + pageNo) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processVenuesGET(_response);
        });
    }

    protected processVenuesGET(response: AxiosResponse): Promise<GetVenuesRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetVenuesRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetVenuesRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Add new tournaments venue
     * @param name (optional) Venues Name
     * @param countryId (optional) Venues Country Id
     * @param city (optional) Venues City
     * @param address (optional) Venues Address
     * @param coordinates (optional) Venues Coordinates
     * @param imageFile (optional) Image file
     * @return Error
     */
    venuesPOST(name: string | undefined, countryId: number | undefined, city: string | undefined, address: string | undefined, coordinates: string | undefined, imageFile: FileParameter | undefined, cancelToken?: CancelToken | undefined): Promise<AddVenueRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/venues";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (countryId === null || countryId === undefined)
            throw new Error("The parameter 'countryId' cannot be null.");
        else
            content_.append("CountryId", countryId.toString());
        if (city === null || city === undefined)
            throw new Error("The parameter 'city' cannot be null.");
        else
            content_.append("City", city.toString());
        if (address === null || address === undefined)
            throw new Error("The parameter 'address' cannot be null.");
        else
            content_.append("Address", address.toString());
        if (coordinates === null || coordinates === undefined)
            throw new Error("The parameter 'coordinates' cannot be null.");
        else
            content_.append("Coordinates", coordinates.toString());
        if (imageFile === null || imageFile === undefined)
            throw new Error("The parameter 'imageFile' cannot be null.");
        else
            content_.append("ImageFile", imageFile.data, imageFile.fileName ? imageFile.fileName : "ImageFile");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processVenuesPOST(_response);
        });
    }

    protected processVenuesPOST(response: AxiosResponse): Promise<AddVenueRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = AddVenueRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<AddVenueRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Get tournaments venue detail
     * @param id venue Id
     * @return Error
     */
    venuesGET2(id: number, cancelToken?: CancelToken | undefined): Promise<GetVenueRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/venues/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processVenuesGET2(_response);
        });
    }

    protected processVenuesGET2(response: AxiosResponse): Promise<GetVenueRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = GetVenueRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<GetVenueRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Modify tournaments venue
     * @param id tournaments venue Id
     * @param id (optional) Venue Id
     * @param name (optional) Venues Name
     * @param countryId (optional) Venues Country Id
     * @param city (optional) Venues City
     * @param address (optional) Venues Address
     * @param coordinates (optional) Venues Coordinates
     * @param imageFile (optional) Image file
     * @return Error
     */
    venuesPATCH(id: number, id: number | undefined, name: string | undefined, countryId: number | undefined, city: string | undefined, address: string | undefined, coordinates: string | undefined, imageFile: FileParameter | undefined, cancelToken?: CancelToken | undefined): Promise<ModVenueRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/venues/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("Id", id.toString());
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (countryId === null || countryId === undefined)
            throw new Error("The parameter 'countryId' cannot be null.");
        else
            content_.append("CountryId", countryId.toString());
        if (city === null || city === undefined)
            throw new Error("The parameter 'city' cannot be null.");
        else
            content_.append("City", city.toString());
        if (address === null || address === undefined)
            throw new Error("The parameter 'address' cannot be null.");
        else
            content_.append("Address", address.toString());
        if (coordinates === null || coordinates === undefined)
            throw new Error("The parameter 'coordinates' cannot be null.");
        else
            content_.append("Coordinates", coordinates.toString());
        if (imageFile === null || imageFile === undefined)
            throw new Error("The parameter 'imageFile' cannot be null.");
        else
            content_.append("ImageFile", imageFile.data, imageFile.fileName ? imageFile.fileName : "ImageFile");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processVenuesPATCH(_response);
        });
    }

    protected processVenuesPATCH(response: AxiosResponse): Promise<ModVenueRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = ModVenueRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<ModVenueRespApiRespBase>(resultdefault);

        }
    }

    /**
     * Delete tournaments venue
     * @param id tournaments venue Id
     * @return Error
     */
    venuesDELETE(id: number, cancelToken?: CancelToken | undefined): Promise<DelVenueRespApiRespBase> {
        let url_ = this.baseUrl + "/api/v4/venues/{id}";
        if (id === undefined || id === null)
          throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processVenuesDELETE(_response);
        });
    }

    protected processVenuesDELETE(response: AxiosResponse): Promise<DelVenueRespApiRespBase> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = DelVenueRespApiRespBase.fromJS(resultDatadefault);
            return Promise.resolve<DelVenueRespApiRespBase>(resultdefault);

        }
    }
}

//-----/ClientClass----

export * as Query from './axios-client/Query';



//-----Types.File-----
export class AddArticleResp implements IAddArticleResp {
    /** Article id */
    articleId?: number;

    constructor(data?: IAddArticleResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.articleId = _data["articleId"];
        }
    }

    static fromJS(data: any): AddArticleResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddArticleResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["articleId"] = this.articleId;
        return data;
    }
}

export interface IAddArticleResp {
    /** Article id */
    articleId?: number;
}

export class AddArticleRespApiRespBase implements IAddArticleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddArticleResp;

    constructor(data?: IAddArticleRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddArticleResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddArticleRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddArticleRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddArticleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddArticleResp;
}

export class AddBroadcastTalentResp implements IAddBroadcastTalentResp {

    constructor(data?: IAddBroadcastTalentResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddBroadcastTalentResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddBroadcastTalentResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddBroadcastTalentResp {
}

export class AddBroadcastTalentRespApiRespBase implements IAddBroadcastTalentRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddBroadcastTalentResp;

    constructor(data?: IAddBroadcastTalentRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddBroadcastTalentResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddBroadcastTalentRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddBroadcastTalentRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddBroadcastTalentRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddBroadcastTalentResp;
}

export class AddFileResp implements IAddFileResp {

    constructor(data?: IAddFileResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddFileResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddFileResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddFileResp {
}

export class AddFileRespApiRespBase implements IAddFileRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddFileResp;

    constructor(data?: IAddFileRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddFileResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddFileRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddFileRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddFileRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddFileResp;
}

export class AddFolderResp implements IAddFolderResp {
    id?: number;
    name?: string | undefined;

    constructor(data?: IAddFolderResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): AddFolderResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddFolderResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IAddFolderResp {
    id?: number;
    name?: string | undefined;
}

export class AddFolderRespApiRespBase implements IAddFolderRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddFolderResp;

    constructor(data?: IAddFolderRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddFolderResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddFolderRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddFolderRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddFolderRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddFolderResp;
}

export class AddFrontendSiteSectionsReq implements IAddFrontendSiteSectionsReq {
    /** New site sections */
    newSiteSections?: FrontendSiteSection[] | undefined;

    constructor(data?: IAddFrontendSiteSectionsReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["newSiteSections"])) {
                this.newSiteSections = [] as any;
                for (let item of _data["newSiteSections"])
                    this.newSiteSections!.push(FrontendSiteSection.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddFrontendSiteSectionsReq {
        data = typeof data === 'object' ? data : {};
        let result = new AddFrontendSiteSectionsReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.newSiteSections)) {
            data["newSiteSections"] = [];
            for (let item of this.newSiteSections)
                data["newSiteSections"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAddFrontendSiteSectionsReq {
    /** New site sections */
    newSiteSections?: FrontendSiteSection[] | undefined;
}

export class AddFrontendSiteSectionsResp implements IAddFrontendSiteSectionsResp {

    constructor(data?: IAddFrontendSiteSectionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddFrontendSiteSectionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddFrontendSiteSectionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddFrontendSiteSectionsResp {
}

export class AddFrontendSiteSectionsRespApiRespBase implements IAddFrontendSiteSectionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddFrontendSiteSectionsResp;

    constructor(data?: IAddFrontendSiteSectionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddFrontendSiteSectionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddFrontendSiteSectionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddFrontendSiteSectionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddFrontendSiteSectionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddFrontendSiteSectionsResp;
}

export class AddFuncResp implements IAddFuncResp {
    /** Backoffice func id */
    funcId?: number;

    constructor(data?: IAddFuncResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.funcId = _data["funcId"];
        }
    }

    static fromJS(data: any): AddFuncResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddFuncResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["funcId"] = this.funcId;
        return data;
    }
}

export interface IAddFuncResp {
    /** Backoffice func id */
    funcId?: number;
}

export class AddFuncRespApiRespBase implements IAddFuncRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddFuncResp;

    constructor(data?: IAddFuncRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddFuncResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddFuncRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddFuncRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddFuncRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddFuncResp;
}

export class AddGameAccountResp implements IAddGameAccountResp {

    constructor(data?: IAddGameAccountResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddGameAccountResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddGameAccountResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddGameAccountResp {
}

export class AddGameAccountRespApiRespBase implements IAddGameAccountRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddGameAccountResp;

    constructor(data?: IAddGameAccountRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddGameAccountResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddGameAccountRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddGameAccountRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddGameAccountRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddGameAccountResp;
}

export class AddGameRegionReq implements IAddGameRegionReq {
    /** Region name */
    regionName!: string;
    /** Game id */
    gameId!: number;
    /** Country Ids */
    countryIds!: number[];

    constructor(data?: IAddGameRegionReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.countryIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.regionName = _data["regionName"];
            this.gameId = _data["gameId"];
            if (Array.isArray(_data["countryIds"])) {
                this.countryIds = [] as any;
                for (let item of _data["countryIds"])
                    this.countryIds!.push(item);
            }
        }
    }

    static fromJS(data: any): AddGameRegionReq {
        data = typeof data === 'object' ? data : {};
        let result = new AddGameRegionReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regionName"] = this.regionName;
        data["gameId"] = this.gameId;
        if (Array.isArray(this.countryIds)) {
            data["countryIds"] = [];
            for (let item of this.countryIds)
                data["countryIds"].push(item);
        }
        return data;
    }
}

export interface IAddGameRegionReq {
    /** Region name */
    regionName: string;
    /** Game id */
    gameId: number;
    /** Country Ids */
    countryIds: number[];
}

export class AddGameRegionResp implements IAddGameRegionResp {
    /** Region id */
    regionId!: number;

    constructor(data?: IAddGameRegionResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.regionId = _data["regionId"];
        }
    }

    static fromJS(data: any): AddGameRegionResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddGameRegionResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regionId"] = this.regionId;
        return data;
    }
}

export interface IAddGameRegionResp {
    /** Region id */
    regionId: number;
}

export class AddGameResp implements IAddGameResp {
    /** Game id */
    gameId?: number;

    constructor(data?: IAddGameResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gameId = _data["gameId"];
        }
    }

    static fromJS(data: any): AddGameResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddGameResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gameId"] = this.gameId;
        return data;
    }
}

export interface IAddGameResp {
    /** Game id */
    gameId?: number;
}

export class AddGameRespApiRespBase implements IAddGameRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddGameResp;

    constructor(data?: IAddGameRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddGameResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddGameRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddGameRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddGameRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddGameResp;
}

export class AddGroupReq implements IAddGroupReq {
    /** User group name */
    name!: string;
    /** Remark */
    remark?: string | undefined;
    /** Frontend ids */
    frontendIds?: number[] | undefined;
    /** Backoffice func ids */
    backofficeFuncIds?: number[] | undefined;
    /** Save as template */
    saveAsTemplate!: boolean;

    constructor(data?: IAddGroupReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["frontendIds"])) {
                this.frontendIds = [] as any;
                for (let item of _data["frontendIds"])
                    this.frontendIds!.push(item);
            }
            if (Array.isArray(_data["backofficeFuncIds"])) {
                this.backofficeFuncIds = [] as any;
                for (let item of _data["backofficeFuncIds"])
                    this.backofficeFuncIds!.push(item);
            }
            this.saveAsTemplate = _data["saveAsTemplate"];
        }
    }

    static fromJS(data: any): AddGroupReq {
        data = typeof data === 'object' ? data : {};
        let result = new AddGroupReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["remark"] = this.remark;
        if (Array.isArray(this.frontendIds)) {
            data["frontendIds"] = [];
            for (let item of this.frontendIds)
                data["frontendIds"].push(item);
        }
        if (Array.isArray(this.backofficeFuncIds)) {
            data["backofficeFuncIds"] = [];
            for (let item of this.backofficeFuncIds)
                data["backofficeFuncIds"].push(item);
        }
        data["saveAsTemplate"] = this.saveAsTemplate;
        return data;
    }
}

export interface IAddGroupReq {
    /** User group name */
    name: string;
    /** Remark */
    remark?: string | undefined;
    /** Frontend ids */
    frontendIds?: number[] | undefined;
    /** Backoffice func ids */
    backofficeFuncIds?: number[] | undefined;
    /** Save as template */
    saveAsTemplate: boolean;
}

export class AddGroupResp implements IAddGroupResp {
    /** Group id */
    groupId?: number | undefined;

    constructor(data?: IAddGroupResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
        }
    }

    static fromJS(data: any): AddGroupResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddGroupResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        return data;
    }
}

export interface IAddGroupResp {
    /** Group id */
    groupId?: number | undefined;
}

export class AddGroupRespApiRespBase implements IAddGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddGroupResp;

    constructor(data?: IAddGroupRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddGroupResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddGroupRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddGroupRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddGroupResp;
}

export class AddHeroResp implements IAddHeroResp {

    constructor(data?: IAddHeroResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddHeroResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddHeroResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddHeroResp {
}

export class AddHeroRespApiRespBase implements IAddHeroRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddHeroResp;

    constructor(data?: IAddHeroRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddHeroResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddHeroRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddHeroRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddHeroRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddHeroResp;
}

export class AddMapResp implements IAddMapResp {

    constructor(data?: IAddMapResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddMapResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddMapResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddMapResp {
}

export class AddMapRespApiRespBase implements IAddMapRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddMapResp;

    constructor(data?: IAddMapRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddMapResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddMapRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddMapRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddMapRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddMapResp;
}

export class AddMediaItemsResp implements IAddMediaItemsResp {

    constructor(data?: IAddMediaItemsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddMediaItemsResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddMediaItemsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddMediaItemsResp {
}

export class AddMediaItemsRespApiRespBase implements IAddMediaItemsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddMediaItemsResp;

    constructor(data?: IAddMediaItemsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddMediaItemsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddMediaItemsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddMediaItemsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddMediaItemsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddMediaItemsResp;
}

export class AddMediaVodReq implements IAddMediaVodReq {
    /** Vod title */
    title!: string;
    /** Site section ids */
    siteSectionIds!: number[];
    /** Host id */
    hostId!: number;
    /** Host video id */
    hostVideoId!: string;
    /** Start time */
    startTime!: number;
    /** Description */
    description?: string | undefined;
    /** Tags */
    tags?: string[] | undefined;
    /** Is in game */
    isInGame!: boolean;
    /** Is featured */
    isFeatured!: boolean;
    /** Related players */
    playerIds?: number[] | undefined;
    /** Related teams */
    teamIds?: number[] | undefined;

    constructor(data?: IAddMediaVodReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.siteSectionIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            if (Array.isArray(_data["siteSectionIds"])) {
                this.siteSectionIds = [] as any;
                for (let item of _data["siteSectionIds"])
                    this.siteSectionIds!.push(item);
            }
            this.hostId = _data["hostId"];
            this.hostVideoId = _data["hostVideoId"];
            this.startTime = _data["startTime"];
            this.description = _data["description"];
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
            this.isInGame = _data["isInGame"];
            this.isFeatured = _data["isFeatured"];
            if (Array.isArray(_data["playerIds"])) {
                this.playerIds = [] as any;
                for (let item of _data["playerIds"])
                    this.playerIds!.push(item);
            }
            if (Array.isArray(_data["teamIds"])) {
                this.teamIds = [] as any;
                for (let item of _data["teamIds"])
                    this.teamIds!.push(item);
            }
        }
    }

    static fromJS(data: any): AddMediaVodReq {
        data = typeof data === 'object' ? data : {};
        let result = new AddMediaVodReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        if (Array.isArray(this.siteSectionIds)) {
            data["siteSectionIds"] = [];
            for (let item of this.siteSectionIds)
                data["siteSectionIds"].push(item);
        }
        data["hostId"] = this.hostId;
        data["hostVideoId"] = this.hostVideoId;
        data["startTime"] = this.startTime;
        data["description"] = this.description;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        data["isInGame"] = this.isInGame;
        data["isFeatured"] = this.isFeatured;
        if (Array.isArray(this.playerIds)) {
            data["playerIds"] = [];
            for (let item of this.playerIds)
                data["playerIds"].push(item);
        }
        if (Array.isArray(this.teamIds)) {
            data["teamIds"] = [];
            for (let item of this.teamIds)
                data["teamIds"].push(item);
        }
        return data;
    }
}

export interface IAddMediaVodReq {
    /** Vod title */
    title: string;
    /** Site section ids */
    siteSectionIds: number[];
    /** Host id */
    hostId: number;
    /** Host video id */
    hostVideoId: string;
    /** Start time */
    startTime: number;
    /** Description */
    description?: string | undefined;
    /** Tags */
    tags?: string[] | undefined;
    /** Is in game */
    isInGame: boolean;
    /** Is featured */
    isFeatured: boolean;
    /** Related players */
    playerIds?: number[] | undefined;
    /** Related teams */
    teamIds?: number[] | undefined;
}

export class AddMediaVodResp implements IAddMediaVodResp {
    /** Vod id */
    vodId!: number;

    constructor(data?: IAddMediaVodResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vodId = _data["vodId"];
        }
    }

    static fromJS(data: any): AddMediaVodResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddMediaVodResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vodId"] = this.vodId;
        return data;
    }
}

export interface IAddMediaVodResp {
    /** Vod id */
    vodId: number;
}

export class AddMediaVodRespApiRespBase implements IAddMediaVodRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddMediaVodResp;

    constructor(data?: IAddMediaVodRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddMediaVodResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddMediaVodRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddMediaVodRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddMediaVodRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddMediaVodResp;
}

export class AddModeReq implements IAddModeReq {
    /** Game Map Name */
    name!: string;
    /** Modes Abbreviation */
    abbreviation?: string | undefined;
    /** Map Game Id */
    gameId!: number;

    constructor(data?: IAddModeReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.abbreviation = _data["abbreviation"];
            this.gameId = _data["gameId"];
        }
    }

    static fromJS(data: any): AddModeReq {
        data = typeof data === 'object' ? data : {};
        let result = new AddModeReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["abbreviation"] = this.abbreviation;
        data["gameId"] = this.gameId;
        return data;
    }
}

export interface IAddModeReq {
    /** Game Map Name */
    name: string;
    /** Modes Abbreviation */
    abbreviation?: string | undefined;
    /** Map Game Id */
    gameId: number;
}

export class AddModeResp implements IAddModeResp {

    constructor(data?: IAddModeResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddModeResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddModeResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddModeResp {
}

export class AddModeRespApiRespBase implements IAddModeRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddModeResp;

    constructor(data?: IAddModeRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddModeResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddModeRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddModeRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddModeRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddModeResp;
}

export class AddNotificationTemplateReq implements IAddNotificationTemplateReq {
    frontEndId!: number;
    messagingNotificationTypeId!: number;
    webTitle!: string;
    webBody!: string;
    pushTitle?: string | undefined;
    pushBody?: string | undefined;
    emailSubject?: string | undefined;
    emailTextBody?: string | undefined;
    emailHtmlBody?: string | undefined;

    constructor(data?: IAddNotificationTemplateReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.frontEndId = _data["frontEndId"];
            this.messagingNotificationTypeId = _data["messagingNotificationTypeId"];
            this.webTitle = _data["webTitle"];
            this.webBody = _data["webBody"];
            this.pushTitle = _data["pushTitle"];
            this.pushBody = _data["pushBody"];
            this.emailSubject = _data["emailSubject"];
            this.emailTextBody = _data["emailTextBody"];
            this.emailHtmlBody = _data["emailHtmlBody"];
        }
    }

    static fromJS(data: any): AddNotificationTemplateReq {
        data = typeof data === 'object' ? data : {};
        let result = new AddNotificationTemplateReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frontEndId"] = this.frontEndId;
        data["messagingNotificationTypeId"] = this.messagingNotificationTypeId;
        data["webTitle"] = this.webTitle;
        data["webBody"] = this.webBody;
        data["pushTitle"] = this.pushTitle;
        data["pushBody"] = this.pushBody;
        data["emailSubject"] = this.emailSubject;
        data["emailTextBody"] = this.emailTextBody;
        data["emailHtmlBody"] = this.emailHtmlBody;
        return data;
    }
}

export interface IAddNotificationTemplateReq {
    frontEndId: number;
    messagingNotificationTypeId: number;
    webTitle: string;
    webBody: string;
    pushTitle?: string | undefined;
    pushBody?: string | undefined;
    emailSubject?: string | undefined;
    emailTextBody?: string | undefined;
    emailHtmlBody?: string | undefined;
}

export class AddNotificationTemplateResp implements IAddNotificationTemplateResp {
    /** Notification Template Id */
    notificationTemplateId?: number;

    constructor(data?: IAddNotificationTemplateResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.notificationTemplateId = _data["notificationTemplateId"];
        }
    }

    static fromJS(data: any): AddNotificationTemplateResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddNotificationTemplateResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["notificationTemplateId"] = this.notificationTemplateId;
        return data;
    }
}

export interface IAddNotificationTemplateResp {
    /** Notification Template Id */
    notificationTemplateId?: number;
}

export class AddNotificationTemplateRespApiRespBase implements IAddNotificationTemplateRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddNotificationTemplateResp;

    constructor(data?: IAddNotificationTemplateRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddNotificationTemplateResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddNotificationTemplateRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddNotificationTemplateRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddNotificationTemplateRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddNotificationTemplateResp;
}

export class AddOneSignalAppReq implements IAddOneSignalAppReq {
    /** App Id */
    appId!: string;
    /** Api Key */
    apiKey!: string;
    /** Safari Web Id */
    safariWebId!: string;
    /** Player Match Starting Notification Android Channel Id */
    playerMatchStartingNotificationAndroidChannelId?: string | undefined;
    /** Team Match Starting Notification Android Channel Id */
    teamMatchStartingNotificationAndroidChannelId?: string | undefined;
    /** Player Article Notification Android Channel Id */
    playerArticleNotificationAndroidChannelId?: string | undefined;
    /** Team Article Notification Android Channel Id */
    teamArticleNotificationAndroidChannelId?: string | undefined;
    /** Player Match Resulted Notification Android Channel Id */
    playerMatchResultedNotificationAndroidChannelId?: string | undefined;
    /** Team Match Resulted Notification Android Channel Id */
    teamMatchResultedNotificationAndroidChannelId?: string | undefined;
    /** Team Transfer Notification Android Channel Id */
    teamTransferNotificationAndroidChannelId?: string | undefined;
    /** Player Transfer Notification Android Channel Id */
    playerTransferNotificationAndroidChannelId?: string | undefined;

    constructor(data?: IAddOneSignalAppReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appId = _data["appId"];
            this.apiKey = _data["apiKey"];
            this.safariWebId = _data["safariWebId"];
            this.playerMatchStartingNotificationAndroidChannelId = _data["playerMatchStartingNotificationAndroidChannelId"];
            this.teamMatchStartingNotificationAndroidChannelId = _data["teamMatchStartingNotificationAndroidChannelId"];
            this.playerArticleNotificationAndroidChannelId = _data["playerArticleNotificationAndroidChannelId"];
            this.teamArticleNotificationAndroidChannelId = _data["teamArticleNotificationAndroidChannelId"];
            this.playerMatchResultedNotificationAndroidChannelId = _data["playerMatchResultedNotificationAndroidChannelId"];
            this.teamMatchResultedNotificationAndroidChannelId = _data["teamMatchResultedNotificationAndroidChannelId"];
            this.teamTransferNotificationAndroidChannelId = _data["teamTransferNotificationAndroidChannelId"];
            this.playerTransferNotificationAndroidChannelId = _data["playerTransferNotificationAndroidChannelId"];
        }
    }

    static fromJS(data: any): AddOneSignalAppReq {
        data = typeof data === 'object' ? data : {};
        let result = new AddOneSignalAppReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appId"] = this.appId;
        data["apiKey"] = this.apiKey;
        data["safariWebId"] = this.safariWebId;
        data["playerMatchStartingNotificationAndroidChannelId"] = this.playerMatchStartingNotificationAndroidChannelId;
        data["teamMatchStartingNotificationAndroidChannelId"] = this.teamMatchStartingNotificationAndroidChannelId;
        data["playerArticleNotificationAndroidChannelId"] = this.playerArticleNotificationAndroidChannelId;
        data["teamArticleNotificationAndroidChannelId"] = this.teamArticleNotificationAndroidChannelId;
        data["playerMatchResultedNotificationAndroidChannelId"] = this.playerMatchResultedNotificationAndroidChannelId;
        data["teamMatchResultedNotificationAndroidChannelId"] = this.teamMatchResultedNotificationAndroidChannelId;
        data["teamTransferNotificationAndroidChannelId"] = this.teamTransferNotificationAndroidChannelId;
        data["playerTransferNotificationAndroidChannelId"] = this.playerTransferNotificationAndroidChannelId;
        return data;
    }
}

export interface IAddOneSignalAppReq {
    /** App Id */
    appId: string;
    /** Api Key */
    apiKey: string;
    /** Safari Web Id */
    safariWebId: string;
    /** Player Match Starting Notification Android Channel Id */
    playerMatchStartingNotificationAndroidChannelId?: string | undefined;
    /** Team Match Starting Notification Android Channel Id */
    teamMatchStartingNotificationAndroidChannelId?: string | undefined;
    /** Player Article Notification Android Channel Id */
    playerArticleNotificationAndroidChannelId?: string | undefined;
    /** Team Article Notification Android Channel Id */
    teamArticleNotificationAndroidChannelId?: string | undefined;
    /** Player Match Resulted Notification Android Channel Id */
    playerMatchResultedNotificationAndroidChannelId?: string | undefined;
    /** Team Match Resulted Notification Android Channel Id */
    teamMatchResultedNotificationAndroidChannelId?: string | undefined;
    /** Team Transfer Notification Android Channel Id */
    teamTransferNotificationAndroidChannelId?: string | undefined;
    /** Player Transfer Notification Android Channel Id */
    playerTransferNotificationAndroidChannelId?: string | undefined;
}

export class AddOneSignalAppResp implements IAddOneSignalAppResp {
    /** One Signal App Id */
    oneSignalAppId?: number;

    constructor(data?: IAddOneSignalAppResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oneSignalAppId = _data["oneSignalAppId"];
        }
    }

    static fromJS(data: any): AddOneSignalAppResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddOneSignalAppResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oneSignalAppId"] = this.oneSignalAppId;
        return data;
    }
}

export interface IAddOneSignalAppResp {
    /** One Signal App Id */
    oneSignalAppId?: number;
}

export class AddOneSignalAppRespApiRespBase implements IAddOneSignalAppRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddOneSignalAppResp;

    constructor(data?: IAddOneSignalAppRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddOneSignalAppResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddOneSignalAppRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddOneSignalAppRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddOneSignalAppRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddOneSignalAppResp;
}

export class AddPageReq implements IAddPageReq {
    /** Title */
    title!: string;
    /** Content */
    content!: string;
    /** Frontend id */
    frontendId!: number;
    /** Extra css */
    extraCss?: string | undefined;

    constructor(data?: IAddPageReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.content = _data["content"];
            this.frontendId = _data["frontendId"];
            this.extraCss = _data["extraCss"];
        }
    }

    static fromJS(data: any): AddPageReq {
        data = typeof data === 'object' ? data : {};
        let result = new AddPageReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["content"] = this.content;
        data["frontendId"] = this.frontendId;
        data["extraCss"] = this.extraCss;
        return data;
    }
}

export interface IAddPageReq {
    /** Title */
    title: string;
    /** Content */
    content: string;
    /** Frontend id */
    frontendId: number;
    /** Extra css */
    extraCss?: string | undefined;
}

export class AddPageResp implements IAddPageResp {
    /** Page id */
    pageId?: number;

    constructor(data?: IAddPageResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageId = _data["pageId"];
        }
    }

    static fromJS(data: any): AddPageResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddPageResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageId"] = this.pageId;
        return data;
    }
}

export interface IAddPageResp {
    /** Page id */
    pageId?: number;
}

export class AddPageRespApiRespBase implements IAddPageRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddPageResp;

    constructor(data?: IAddPageRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddPageResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddPageRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddPageRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddPageRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddPageResp;
}

export class AddPlayerMediaItemResp implements IAddPlayerMediaItemResp {

    constructor(data?: IAddPlayerMediaItemResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddPlayerMediaItemResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddPlayerMediaItemResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddPlayerMediaItemResp {
}

export class AddPlayerMediaItemRespApiRespBase implements IAddPlayerMediaItemRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddPlayerMediaItemResp;

    constructor(data?: IAddPlayerMediaItemRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddPlayerMediaItemResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddPlayerMediaItemRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddPlayerMediaItemRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddPlayerMediaItemRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddPlayerMediaItemResp;
}

export class AddPlayerResp implements IAddPlayerResp {

    constructor(data?: IAddPlayerResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddPlayerResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddPlayerResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddPlayerResp {
}

export class AddPlayerRespApiRespBase implements IAddPlayerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddPlayerResp;

    constructor(data?: IAddPlayerRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddPlayerResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddPlayerRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddPlayerRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddPlayerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddPlayerResp;
}

export class AddRoleReq implements IAddRoleReq {
    /** Group Id */
    groupId!: number;
    /** Role name */
    name!: string;
    /** Remark */
    remark?: string | undefined;
    /** Func Ids */
    funcIds?: number[] | undefined;
    /** Frontend Ids */
    frontendIds?: number[] | undefined;
    /** Save as template */
    saveAsTemplate!: boolean;

    constructor(data?: IAddRoleReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["funcIds"])) {
                this.funcIds = [] as any;
                for (let item of _data["funcIds"])
                    this.funcIds!.push(item);
            }
            if (Array.isArray(_data["frontendIds"])) {
                this.frontendIds = [] as any;
                for (let item of _data["frontendIds"])
                    this.frontendIds!.push(item);
            }
            this.saveAsTemplate = _data["saveAsTemplate"];
        }
    }

    static fromJS(data: any): AddRoleReq {
        data = typeof data === 'object' ? data : {};
        let result = new AddRoleReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["name"] = this.name;
        data["remark"] = this.remark;
        if (Array.isArray(this.funcIds)) {
            data["funcIds"] = [];
            for (let item of this.funcIds)
                data["funcIds"].push(item);
        }
        if (Array.isArray(this.frontendIds)) {
            data["frontendIds"] = [];
            for (let item of this.frontendIds)
                data["frontendIds"].push(item);
        }
        data["saveAsTemplate"] = this.saveAsTemplate;
        return data;
    }
}

export interface IAddRoleReq {
    /** Group Id */
    groupId: number;
    /** Role name */
    name: string;
    /** Remark */
    remark?: string | undefined;
    /** Func Ids */
    funcIds?: number[] | undefined;
    /** Frontend Ids */
    frontendIds?: number[] | undefined;
    /** Save as template */
    saveAsTemplate: boolean;
}

export class AddRoleResp implements IAddRoleResp {

    constructor(data?: IAddRoleResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddRoleResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddRoleResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddRoleResp {
}

export class AddRoleRespApiRespBase implements IAddRoleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddRoleResp;

    constructor(data?: IAddRoleRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddRoleResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddRoleRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddRoleRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddRoleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddRoleResp;
}

export class AddServerResp implements IAddServerResp {

    constructor(data?: IAddServerResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddServerResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddServerResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddServerResp {
}

export class AddServerRespApiRespBase implements IAddServerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddServerResp;

    constructor(data?: IAddServerRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddServerResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddServerRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddServerRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddServerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddServerResp;
}

export class AddSideResp implements IAddSideResp {

    constructor(data?: IAddSideResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddSideResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddSideResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddSideResp {
}

export class AddSideRespApiRespBase implements IAddSideRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddSideResp;

    constructor(data?: IAddSideRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddSideResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddSideRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddSideRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddSideRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddSideResp;
}

export class AddSiteSectionsResp implements IAddSiteSectionsResp {
    id?: number | undefined;

    constructor(data?: IAddSiteSectionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): AddSiteSectionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddSiteSectionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IAddSiteSectionsResp {
    id?: number | undefined;
}

export class AddSiteSectionsRespApiRespBase implements IAddSiteSectionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddSiteSectionsResp;

    constructor(data?: IAddSiteSectionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddSiteSectionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddSiteSectionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddSiteSectionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddSiteSectionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddSiteSectionsResp;
}

export class AddSponsorResp implements IAddSponsorResp {

    constructor(data?: IAddSponsorResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddSponsorResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddSponsorResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddSponsorResp {
}

export class AddSponsorRespApiRespBase implements IAddSponsorRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddSponsorResp;

    constructor(data?: IAddSponsorRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddSponsorResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddSponsorRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddSponsorRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddSponsorRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddSponsorResp;
}

export class AddStreamResp implements IAddStreamResp {

    constructor(data?: IAddStreamResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddStreamResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddStreamResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddStreamResp {
}

export class AddStreamRespApiRespBase implements IAddStreamRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddStreamResp;

    constructor(data?: IAddStreamRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddStreamResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddStreamRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddStreamRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddStreamRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddStreamResp;
}

export class AddTeamPlayerResp implements IAddTeamPlayerResp {

    constructor(data?: IAddTeamPlayerResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddTeamPlayerResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddTeamPlayerResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddTeamPlayerResp {
}

export class AddTeamPlayerRespApiRespBase implements IAddTeamPlayerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddTeamPlayerResp;

    constructor(data?: IAddTeamPlayerRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddTeamPlayerResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddTeamPlayerRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddTeamPlayerRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddTeamPlayerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddTeamPlayerResp;
}

export class AddTeamResp implements IAddTeamResp {

    constructor(data?: IAddTeamResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddTeamResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddTeamResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddTeamResp {
}

export class AddTeamRespApiRespBase implements IAddTeamRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddTeamResp;

    constructor(data?: IAddTeamRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddTeamResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddTeamRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddTeamRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddTeamRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddTeamResp;
}

export class AddUserResp implements IAddUserResp {

    constructor(data?: IAddUserResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddUserResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddUserResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddUserResp {
}

export class AddUserRespApiRespBase implements IAddUserRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddUserResp;

    constructor(data?: IAddUserRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddUserResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddUserRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddUserRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddUserRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddUserResp;
}

export class AddVenueResp implements IAddVenueResp {

    constructor(data?: IAddVenueResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddVenueResp {
        data = typeof data === 'object' ? data : {};
        let result = new AddVenueResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IAddVenueResp {
}

export class AddVenueRespApiRespBase implements IAddVenueRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AddVenueResp;

    constructor(data?: IAddVenueRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AddVenueResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddVenueRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AddVenueRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAddVenueRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AddVenueResp;
}

export class ApiLogDetail implements IApiLogDetail {
    id?: number;
    traceId?: string | undefined;
    ip?: string | undefined;
    scheme?: string | undefined;
    host?: string | undefined;
    path?: string | undefined;
    method?: string | undefined;
    prefix?: string | undefined;
    serverName?: string | undefined;
    requestHeaders?: string | undefined;
    requestContent?: string | undefined;
    responseHeaders?: string | undefined;
    responseContent?: string | undefined;
    responseCode?: number;
    executeTimeMs?: number;
    recordedAt?: number;

    constructor(data?: IApiLogDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.traceId = _data["traceId"];
            this.ip = _data["ip"];
            this.scheme = _data["scheme"];
            this.host = _data["host"];
            this.path = _data["path"];
            this.method = _data["method"];
            this.prefix = _data["prefix"];
            this.serverName = _data["serverName"];
            this.requestHeaders = _data["requestHeaders"];
            this.requestContent = _data["requestContent"];
            this.responseHeaders = _data["responseHeaders"];
            this.responseContent = _data["responseContent"];
            this.responseCode = _data["responseCode"];
            this.executeTimeMs = _data["executeTimeMs"];
            this.recordedAt = _data["recordedAt"];
        }
    }

    static fromJS(data: any): ApiLogDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ApiLogDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["traceId"] = this.traceId;
        data["ip"] = this.ip;
        data["scheme"] = this.scheme;
        data["host"] = this.host;
        data["path"] = this.path;
        data["method"] = this.method;
        data["prefix"] = this.prefix;
        data["serverName"] = this.serverName;
        data["requestHeaders"] = this.requestHeaders;
        data["requestContent"] = this.requestContent;
        data["responseHeaders"] = this.responseHeaders;
        data["responseContent"] = this.responseContent;
        data["responseCode"] = this.responseCode;
        data["executeTimeMs"] = this.executeTimeMs;
        data["recordedAt"] = this.recordedAt;
        return data;
    }
}

export interface IApiLogDetail {
    id?: number;
    traceId?: string | undefined;
    ip?: string | undefined;
    scheme?: string | undefined;
    host?: string | undefined;
    path?: string | undefined;
    method?: string | undefined;
    prefix?: string | undefined;
    serverName?: string | undefined;
    requestHeaders?: string | undefined;
    requestContent?: string | undefined;
    responseHeaders?: string | undefined;
    responseContent?: string | undefined;
    responseCode?: number;
    executeTimeMs?: number;
    recordedAt?: number;
}

export class ApiLogListItem implements IApiLogListItem {
    /** Id */
    id?: number;
    /** Trace Id */
    traceId?: string | undefined;
    /** Ip Address */
    ip?: string | undefined;
    /** Scheme */
    scheme?: string | undefined;
    /** Host */
    host?: string | undefined;
    /** Path */
    path?: string | undefined;
    /** Method */
    method?: string | undefined;
    /** Prefix */
    prefix?: string | undefined;
    /** Server Name */
    serverName?: string | undefined;
    /** Response Status Code */
    responseCode?: number;
    /** Response Length */
    responseLen?: number;
    /** Execute Time MilliSeconds */
    executeTimeMs?: number;
    /** Record at */
    recordedAt?: number;

    constructor(data?: IApiLogListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.traceId = _data["traceId"];
            this.ip = _data["ip"];
            this.scheme = _data["scheme"];
            this.host = _data["host"];
            this.path = _data["path"];
            this.method = _data["method"];
            this.prefix = _data["prefix"];
            this.serverName = _data["serverName"];
            this.responseCode = _data["responseCode"];
            this.responseLen = _data["responseLen"];
            this.executeTimeMs = _data["executeTimeMs"];
            this.recordedAt = _data["recordedAt"];
        }
    }

    static fromJS(data: any): ApiLogListItem {
        data = typeof data === 'object' ? data : {};
        let result = new ApiLogListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["traceId"] = this.traceId;
        data["ip"] = this.ip;
        data["scheme"] = this.scheme;
        data["host"] = this.host;
        data["path"] = this.path;
        data["method"] = this.method;
        data["prefix"] = this.prefix;
        data["serverName"] = this.serverName;
        data["responseCode"] = this.responseCode;
        data["responseLen"] = this.responseLen;
        data["executeTimeMs"] = this.executeTimeMs;
        data["recordedAt"] = this.recordedAt;
        return data;
    }
}

export interface IApiLogListItem {
    /** Id */
    id?: number;
    /** Trace Id */
    traceId?: string | undefined;
    /** Ip Address */
    ip?: string | undefined;
    /** Scheme */
    scheme?: string | undefined;
    /** Host */
    host?: string | undefined;
    /** Path */
    path?: string | undefined;
    /** Method */
    method?: string | undefined;
    /** Prefix */
    prefix?: string | undefined;
    /** Server Name */
    serverName?: string | undefined;
    /** Response Status Code */
    responseCode?: number;
    /** Response Length */
    responseLen?: number;
    /** Execute Time MilliSeconds */
    executeTimeMs?: number;
    /** Record at */
    recordedAt?: number;
}

export class ArticleDetail implements IArticleDetail {
    /** Article Id */
    id!: number;
    /** Article subtype id */
    subTypeId!: number;
    /** Title */
    title!: string;
    /** Redirect url */
    redirectUrl?: string | undefined;
    /** Teaser */
    teaser!: string;
    /** Content */
    content!: string;
    /** Frontend id */
    frontendId!: number;
    /** Local id */
    localeId!: number;
    /** Site sections */
    siteSections?: SiteSection[] | undefined;
    /** Headline image url */
    headlineImagePath?: string | undefined;
    /** Headline image text */
    headlineImageText?: string | undefined;
    /** Square image url */
    squareHeadlineImageUrl?: string | undefined;
    /** Is published */
    isPublished!: boolean;
    /** Published At */
    publishedAt?: number | undefined;
    /** Is sticky */
    isSticky!: boolean;
    /** Is featured */
    isFeatured!: boolean;
    /** Time spent */
    timeSpent!: number;
    /** Proofread state */
    isProofread!: boolean;
    /** Time spent for proofreading article */
    timeSpentProofreading!: number;
    /** Proofread datetime */
    proofreadAt?: number | undefined;

    constructor(data?: IArticleDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.subTypeId = _data["subTypeId"];
            this.title = _data["title"];
            this.redirectUrl = _data["redirectUrl"];
            this.teaser = _data["teaser"];
            this.content = _data["content"];
            this.frontendId = _data["frontendId"];
            this.localeId = _data["localeId"];
            if (Array.isArray(_data["siteSections"])) {
                this.siteSections = [] as any;
                for (let item of _data["siteSections"])
                    this.siteSections!.push(SiteSection.fromJS(item));
            }
            this.headlineImagePath = _data["headlineImagePath"];
            this.headlineImageText = _data["headlineImageText"];
            this.squareHeadlineImageUrl = _data["squareHeadlineImageUrl"];
            this.isPublished = _data["isPublished"];
            this.publishedAt = _data["publishedAt"];
            this.isSticky = _data["isSticky"];
            this.isFeatured = _data["isFeatured"];
            this.timeSpent = _data["timeSpent"];
            this.isProofread = _data["isProofread"];
            this.timeSpentProofreading = _data["timeSpentProofreading"];
            this.proofreadAt = _data["proofreadAt"];
        }
    }

    static fromJS(data: any): ArticleDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["subTypeId"] = this.subTypeId;
        data["title"] = this.title;
        data["redirectUrl"] = this.redirectUrl;
        data["teaser"] = this.teaser;
        data["content"] = this.content;
        data["frontendId"] = this.frontendId;
        data["localeId"] = this.localeId;
        if (Array.isArray(this.siteSections)) {
            data["siteSections"] = [];
            for (let item of this.siteSections)
                data["siteSections"].push(item.toJSON());
        }
        data["headlineImagePath"] = this.headlineImagePath;
        data["headlineImageText"] = this.headlineImageText;
        data["squareHeadlineImageUrl"] = this.squareHeadlineImageUrl;
        data["isPublished"] = this.isPublished;
        data["publishedAt"] = this.publishedAt;
        data["isSticky"] = this.isSticky;
        data["isFeatured"] = this.isFeatured;
        data["timeSpent"] = this.timeSpent;
        data["isProofread"] = this.isProofread;
        data["timeSpentProofreading"] = this.timeSpentProofreading;
        data["proofreadAt"] = this.proofreadAt;
        return data;
    }
}

export interface IArticleDetail {
    /** Article Id */
    id: number;
    /** Article subtype id */
    subTypeId: number;
    /** Title */
    title: string;
    /** Redirect url */
    redirectUrl?: string | undefined;
    /** Teaser */
    teaser: string;
    /** Content */
    content: string;
    /** Frontend id */
    frontendId: number;
    /** Local id */
    localeId: number;
    /** Site sections */
    siteSections?: SiteSection[] | undefined;
    /** Headline image url */
    headlineImagePath?: string | undefined;
    /** Headline image text */
    headlineImageText?: string | undefined;
    /** Square image url */
    squareHeadlineImageUrl?: string | undefined;
    /** Is published */
    isPublished: boolean;
    /** Published At */
    publishedAt?: number | undefined;
    /** Is sticky */
    isSticky: boolean;
    /** Is featured */
    isFeatured: boolean;
    /** Time spent */
    timeSpent: number;
    /** Proofread state */
    isProofread: boolean;
    /** Time spent for proofreading article */
    timeSpentProofreading: number;
    /** Proofread datetime */
    proofreadAt?: number | undefined;
}

export class ArticleListItem implements IArticleListItem {
    /** Article id */
    id!: number;
    /** Frontend Name */
    feName!: string;
    /** Article title */
    title!: string;
    /** Article url */
    url?: string | undefined;
    /** Published state */
    isPublished!: boolean;
    /** Proofread state */
    isProofread!: boolean;
    /** Author */
    author!: string;
    /** Created At */
    createdAt!: number;
    /** Updater */
    updater?: string | undefined;
    /** Update At */
    updateAt?: number;
    type!: EnumArticleType;
    /** Article Type Name */
    readonly typeName!: string;
    /** View counts */
    views!: number;

    constructor(data?: IArticleListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.feName = _data["feName"];
            this.title = _data["title"];
            this.url = _data["url"];
            this.isPublished = _data["isPublished"];
            this.isProofread = _data["isProofread"];
            this.author = _data["author"];
            this.createdAt = _data["createdAt"];
            this.updater = _data["updater"];
            this.updateAt = _data["updateAt"];
            this.type = _data["type"];
            (<any>this).typeName = _data["typeName"];
            this.views = _data["views"];
        }
    }

    static fromJS(data: any): ArticleListItem {
        data = typeof data === 'object' ? data : {};
        let result = new ArticleListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["feName"] = this.feName;
        data["title"] = this.title;
        data["url"] = this.url;
        data["isPublished"] = this.isPublished;
        data["isProofread"] = this.isProofread;
        data["author"] = this.author;
        data["createdAt"] = this.createdAt;
        data["updater"] = this.updater;
        data["updateAt"] = this.updateAt;
        data["type"] = this.type;
        data["typeName"] = this.typeName;
        data["views"] = this.views;
        return data;
    }
}

export interface IArticleListItem {
    /** Article id */
    id: number;
    /** Frontend Name */
    feName: string;
    /** Article title */
    title: string;
    /** Article url */
    url?: string | undefined;
    /** Published state */
    isPublished: boolean;
    /** Proofread state */
    isProofread: boolean;
    /** Author */
    author: string;
    /** Created At */
    createdAt: number;
    /** Updater */
    updater?: string | undefined;
    /** Update At */
    updateAt?: number;
    type: EnumArticleType;
    /** Article Type Name */
    typeName: string;
    /** View counts */
    views: number;
}

export class AssignGroupReq implements IAssignGroupReq {
    /** Group id */
    groupId!: number;
    /** Add user ids */
    userIds!: number[];

    constructor(data?: IAssignGroupReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.userIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            if (Array.isArray(_data["userIds"])) {
                this.userIds = [] as any;
                for (let item of _data["userIds"])
                    this.userIds!.push(item);
            }
        }
    }

    static fromJS(data: any): AssignGroupReq {
        data = typeof data === 'object' ? data : {};
        let result = new AssignGroupReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        if (Array.isArray(this.userIds)) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        return data;
    }
}

export interface IAssignGroupReq {
    /** Group id */
    groupId: number;
    /** Add user ids */
    userIds: number[];
}

export class AssignGroupResp implements IAssignGroupResp {
    /** Add users */
    addUsers?: Int32Item[] | undefined;

    constructor(data?: IAssignGroupResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["addUsers"])) {
                this.addUsers = [] as any;
                for (let item of _data["addUsers"])
                    this.addUsers!.push(Int32Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AssignGroupResp {
        data = typeof data === 'object' ? data : {};
        let result = new AssignGroupResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.addUsers)) {
            data["addUsers"] = [];
            for (let item of this.addUsers)
                data["addUsers"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAssignGroupResp {
    /** Add users */
    addUsers?: Int32Item[] | undefined;
}

export class AssignGroupRespApiRespBase implements IAssignGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AssignGroupResp;

    constructor(data?: IAssignGroupRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AssignGroupResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AssignGroupRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AssignGroupRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAssignGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AssignGroupResp;
}

export class AssignRoleReq implements IAssignRoleReq {
    /** Role id */
    roleId!: number;
    /** Add user ids */
    userIds!: number[];

    constructor(data?: IAssignRoleReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.userIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleId = _data["roleId"];
            if (Array.isArray(_data["userIds"])) {
                this.userIds = [] as any;
                for (let item of _data["userIds"])
                    this.userIds!.push(item);
            }
        }
    }

    static fromJS(data: any): AssignRoleReq {
        data = typeof data === 'object' ? data : {};
        let result = new AssignRoleReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        if (Array.isArray(this.userIds)) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        return data;
    }
}

export interface IAssignRoleReq {
    /** Role id */
    roleId: number;
    /** Add user ids */
    userIds: number[];
}

export class AssignRoleResp implements IAssignRoleResp {
    /** Assign users */
    addUsers?: Int32Item[] | undefined;

    constructor(data?: IAssignRoleResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["addUsers"])) {
                this.addUsers = [] as any;
                for (let item of _data["addUsers"])
                    this.addUsers!.push(Int32Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AssignRoleResp {
        data = typeof data === 'object' ? data : {};
        let result = new AssignRoleResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.addUsers)) {
            data["addUsers"] = [];
            for (let item of this.addUsers)
                data["addUsers"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAssignRoleResp {
    /** Assign users */
    addUsers?: Int32Item[] | undefined;
}

export class AssignRoleRespApiRespBase implements IAssignRoleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: AssignRoleResp;

    constructor(data?: IAssignRoleRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? AssignRoleResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AssignRoleRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new AssignRoleRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAssignRoleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: AssignRoleResp;
}

export class BroadcastTalentCountry implements IBroadcastTalentCountry {
    id?: number;
    name?: string | undefined;
    code?: string | undefined;
    flagImageUrl?: string | undefined;

    constructor(data?: IBroadcastTalentCountry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.flagImageUrl = _data["flagImageUrl"];
        }
    }

    static fromJS(data: any): BroadcastTalentCountry {
        data = typeof data === 'object' ? data : {};
        let result = new BroadcastTalentCountry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["flagImageUrl"] = this.flagImageUrl;
        return data;
    }
}

export interface IBroadcastTalentCountry {
    id?: number;
    name?: string | undefined;
    code?: string | undefined;
    flagImageUrl?: string | undefined;
}

export class BroadcastTalentGame implements IBroadcastTalentGame {
    id?: number | undefined;
    name?: string | undefined;
    urlSafeName?: string | undefined;

    constructor(data?: IBroadcastTalentGame) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.urlSafeName = _data["urlSafeName"];
        }
    }

    static fromJS(data: any): BroadcastTalentGame {
        data = typeof data === 'object' ? data : {};
        let result = new BroadcastTalentGame();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["urlSafeName"] = this.urlSafeName;
        return data;
    }
}

export interface IBroadcastTalentGame {
    id?: number | undefined;
    name?: string | undefined;
    urlSafeName?: string | undefined;
}

export class BroadcastTalentLanguage implements IBroadcastTalentLanguage {
    id?: number;
    name?: string | undefined;
    code?: string | undefined;

    constructor(data?: IBroadcastTalentLanguage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): BroadcastTalentLanguage {
        data = typeof data === 'object' ? data : {};
        let result = new BroadcastTalentLanguage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        return data;
    }
}

export interface IBroadcastTalentLanguage {
    id?: number;
    name?: string | undefined;
    code?: string | undefined;
}

export class BroadcastTalentPlayer implements IBroadcastTalentPlayer {
    id?: number;
    name?: string | undefined;

    constructor(data?: IBroadcastTalentPlayer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): BroadcastTalentPlayer {
        data = typeof data === 'object' ? data : {};
        let result = new BroadcastTalentPlayer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IBroadcastTalentPlayer {
    id?: number;
    name?: string | undefined;
}

export class BroadcastTalentStream implements IBroadcastTalentStream {
    id?: number;
    title?: string | undefined;

    constructor(data?: IBroadcastTalentStream) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): BroadcastTalentStream {
        data = typeof data === 'object' ? data : {};
        let result = new BroadcastTalentStream();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data;
    }
}

export interface IBroadcastTalentStream {
    id?: number;
    title?: string | undefined;
}

export class ByteItem implements IByteItem {
    id?: number;
    name?: string | undefined;

    constructor(data?: IByteItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ByteItem {
        data = typeof data === 'object' ? data : {};
        let result = new ByteItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IByteItem {
    id?: number;
    name?: string | undefined;
}

export class CountryOption implements ICountryOption {
    /** Country id */
    id?: number;
    /** Country name */
    name?: string | undefined;
    /** Country code */
    code?: string | undefined;
    /** Flag image url */
    flagImageUrl?: string | undefined;

    constructor(data?: ICountryOption) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.flagImageUrl = _data["flagImageUrl"];
        }
    }

    static fromJS(data: any): CountryOption {
        data = typeof data === 'object' ? data : {};
        let result = new CountryOption();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["flagImageUrl"] = this.flagImageUrl;
        return data;
    }
}

export interface ICountryOption {
    /** Country id */
    id?: number;
    /** Country name */
    name?: string | undefined;
    /** Country code */
    code?: string | undefined;
    /** Flag image url */
    flagImageUrl?: string | undefined;
}

export class CrewFile implements ICrewFile {
    /** File Id */
    id?: number;
    name?: string | undefined;
    url?: string | undefined;
    uploadedAt?: number;
    size?: number;
    mineType?: string | undefined;
    folderId?: number;
    userId?: number;
    userName?: string | undefined;
    url_Safe_UserName?: string | undefined;
    path?: string | undefined;

    constructor(data?: ICrewFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.url = _data["url"];
            this.uploadedAt = _data["uploadedAt"];
            this.size = _data["size"];
            this.mineType = _data["mineType"];
            this.folderId = _data["folderId"];
            this.userId = _data["userId"];
            this.userName = _data["userName"];
            this.url_Safe_UserName = _data["url_Safe_UserName"];
            this.path = _data["path"];
        }
    }

    static fromJS(data: any): CrewFile {
        data = typeof data === 'object' ? data : {};
        let result = new CrewFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["url"] = this.url;
        data["uploadedAt"] = this.uploadedAt;
        data["size"] = this.size;
        data["mineType"] = this.mineType;
        data["folderId"] = this.folderId;
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["url_Safe_UserName"] = this.url_Safe_UserName;
        data["path"] = this.path;
        return data;
    }
}

export interface ICrewFile {
    /** File Id */
    id?: number;
    name?: string | undefined;
    url?: string | undefined;
    uploadedAt?: number;
    size?: number;
    mineType?: string | undefined;
    folderId?: number;
    userId?: number;
    userName?: string | undefined;
    url_Safe_UserName?: string | undefined;
    path?: string | undefined;
}

export class DelArticleResp implements IDelArticleResp {
    /** Backoffice func id */
    funcId?: number;

    constructor(data?: IDelArticleResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.funcId = _data["funcId"];
        }
    }

    static fromJS(data: any): DelArticleResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelArticleResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["funcId"] = this.funcId;
        return data;
    }
}

export interface IDelArticleResp {
    /** Backoffice func id */
    funcId?: number;
}

export class DelArticleRespApiRespBase implements IDelArticleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelArticleResp;

    constructor(data?: IDelArticleRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelArticleResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelArticleRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelArticleRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelArticleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelArticleResp;
}

export class DelBroadcastTalentResp implements IDelBroadcastTalentResp {

    constructor(data?: IDelBroadcastTalentResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelBroadcastTalentResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelBroadcastTalentResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelBroadcastTalentResp {
}

export class DelBroadcastTalentRespApiRespBase implements IDelBroadcastTalentRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelBroadcastTalentResp;

    constructor(data?: IDelBroadcastTalentRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelBroadcastTalentResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelBroadcastTalentRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelBroadcastTalentRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelBroadcastTalentRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelBroadcastTalentResp;
}

export class DelFileResp implements IDelFileResp {

    constructor(data?: IDelFileResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelFileResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelFileResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelFileResp {
}

export class DelFileRespApiRespBase implements IDelFileRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelFileResp;

    constructor(data?: IDelFileRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelFileResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelFileRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelFileRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelFileRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelFileResp;
}

export class DelFolderResp implements IDelFolderResp {

    constructor(data?: IDelFolderResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelFolderResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelFolderResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelFolderResp {
}

export class DelFolderRespApiRespBase implements IDelFolderRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelFolderResp;

    constructor(data?: IDelFolderRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelFolderResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelFolderRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelFolderRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelFolderRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelFolderResp;
}

export class DelFrontendSiteSectionReq implements IDelFrontendSiteSectionReq {
    /** Frontend id */
    frontendId!: number;
    /** Site section id */
    siteSectionId!: number;

    constructor(data?: IDelFrontendSiteSectionReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.frontendId = _data["frontendId"];
            this.siteSectionId = _data["siteSectionId"];
        }
    }

    static fromJS(data: any): DelFrontendSiteSectionReq {
        data = typeof data === 'object' ? data : {};
        let result = new DelFrontendSiteSectionReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frontendId"] = this.frontendId;
        data["siteSectionId"] = this.siteSectionId;
        return data;
    }
}

export interface IDelFrontendSiteSectionReq {
    /** Frontend id */
    frontendId: number;
    /** Site section id */
    siteSectionId: number;
}

export class DelFrontendSiteSectionResp implements IDelFrontendSiteSectionResp {
    /** Frontend id */
    frontendId?: number;
    /** Site section id */
    siteSectionId?: number;

    constructor(data?: IDelFrontendSiteSectionResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.frontendId = _data["frontendId"];
            this.siteSectionId = _data["siteSectionId"];
        }
    }

    static fromJS(data: any): DelFrontendSiteSectionResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelFrontendSiteSectionResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frontendId"] = this.frontendId;
        data["siteSectionId"] = this.siteSectionId;
        return data;
    }
}

export interface IDelFrontendSiteSectionResp {
    /** Frontend id */
    frontendId?: number;
    /** Site section id */
    siteSectionId?: number;
}

export class DelFrontendSiteSectionRespApiRespBase implements IDelFrontendSiteSectionRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelFrontendSiteSectionResp;

    constructor(data?: IDelFrontendSiteSectionRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelFrontendSiteSectionResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelFrontendSiteSectionRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelFrontendSiteSectionRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelFrontendSiteSectionRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelFrontendSiteSectionResp;
}

export class DelFuncResp implements IDelFuncResp {
    /** Backoffice func id */
    funcId?: number;

    constructor(data?: IDelFuncResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.funcId = _data["funcId"];
        }
    }

    static fromJS(data: any): DelFuncResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelFuncResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["funcId"] = this.funcId;
        return data;
    }
}

export interface IDelFuncResp {
    /** Backoffice func id */
    funcId?: number;
}

export class DelFuncRespApiRespBase implements IDelFuncRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelFuncResp;

    constructor(data?: IDelFuncRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelFuncResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelFuncRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelFuncRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelFuncRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelFuncResp;
}

export class DelGameAccountResp implements IDelGameAccountResp {

    constructor(data?: IDelGameAccountResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelGameAccountResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelGameAccountResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelGameAccountResp {
}

export class DelGameAccountRespApiRespBase implements IDelGameAccountRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelGameAccountResp;

    constructor(data?: IDelGameAccountRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelGameAccountResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelGameAccountRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelGameAccountRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelGameAccountRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelGameAccountResp;
}

export class DelGameRegionResp implements IDelGameRegionResp {
    /** Region id */
    regionId!: number;

    constructor(data?: IDelGameRegionResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.regionId = _data["regionId"];
        }
    }

    static fromJS(data: any): DelGameRegionResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelGameRegionResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regionId"] = this.regionId;
        return data;
    }
}

export interface IDelGameRegionResp {
    /** Region id */
    regionId: number;
}

export class DelGameResp implements IDelGameResp {
    /** Game id */
    gameId?: number;

    constructor(data?: IDelGameResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gameId = _data["gameId"];
        }
    }

    static fromJS(data: any): DelGameResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelGameResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gameId"] = this.gameId;
        return data;
    }
}

export interface IDelGameResp {
    /** Game id */
    gameId?: number;
}

export class DelGameRespApiRespBase implements IDelGameRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelGameResp;

    constructor(data?: IDelGameRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelGameResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelGameRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelGameRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelGameRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelGameResp;
}

export class DelGroupResp implements IDelGroupResp {
    /** Group id */
    groupId?: number | undefined;

    constructor(data?: IDelGroupResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
        }
    }

    static fromJS(data: any): DelGroupResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelGroupResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        return data;
    }
}

export interface IDelGroupResp {
    /** Group id */
    groupId?: number | undefined;
}

export class DelGroupRespApiRespBase implements IDelGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelGroupResp;

    constructor(data?: IDelGroupRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelGroupResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelGroupRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelGroupRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelGroupResp;
}

export class DelHeroResp implements IDelHeroResp {

    constructor(data?: IDelHeroResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelHeroResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelHeroResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelHeroResp {
}

export class DelHeroRespApiRespBase implements IDelHeroRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelHeroResp;

    constructor(data?: IDelHeroRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelHeroResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelHeroRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelHeroRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelHeroRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelHeroResp;
}

export class DelMapResp implements IDelMapResp {

    constructor(data?: IDelMapResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelMapResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelMapResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelMapResp {
}

export class DelMapRespApiRespBase implements IDelMapRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelMapResp;

    constructor(data?: IDelMapRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelMapResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelMapRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelMapRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelMapRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelMapResp;
}

export class DelMediaItemResp implements IDelMediaItemResp {

    constructor(data?: IDelMediaItemResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelMediaItemResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelMediaItemResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelMediaItemResp {
}

export class DelMediaItemRespApiRespBase implements IDelMediaItemRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelMediaItemResp;

    constructor(data?: IDelMediaItemRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelMediaItemResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelMediaItemRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelMediaItemRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelMediaItemRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelMediaItemResp;
}

export class DelMediaVodResp implements IDelMediaVodResp {
    /** Vod id */
    vodId!: number;

    constructor(data?: IDelMediaVodResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vodId = _data["vodId"];
        }
    }

    static fromJS(data: any): DelMediaVodResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelMediaVodResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vodId"] = this.vodId;
        return data;
    }
}

export interface IDelMediaVodResp {
    /** Vod id */
    vodId: number;
}

export class DelMediaVodRespApiRespBase implements IDelMediaVodRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelMediaVodResp;

    constructor(data?: IDelMediaVodRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelMediaVodResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelMediaVodRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelMediaVodRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelMediaVodRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelMediaVodResp;
}

export class DelModeResp implements IDelModeResp {

    constructor(data?: IDelModeResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelModeResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelModeResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelModeResp {
}

export class DelModeRespApiRespBase implements IDelModeRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelModeResp;

    constructor(data?: IDelModeRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelModeResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelModeRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelModeRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelModeRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelModeResp;
}

export class DelNotificationTemplateResp implements IDelNotificationTemplateResp {
    /** Notification Template Id */
    notificationTemplateId?: number;

    constructor(data?: IDelNotificationTemplateResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.notificationTemplateId = _data["notificationTemplateId"];
        }
    }

    static fromJS(data: any): DelNotificationTemplateResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelNotificationTemplateResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["notificationTemplateId"] = this.notificationTemplateId;
        return data;
    }
}

export interface IDelNotificationTemplateResp {
    /** Notification Template Id */
    notificationTemplateId?: number;
}

export class DelNotificationTemplateRespApiRespBase implements IDelNotificationTemplateRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelNotificationTemplateResp;

    constructor(data?: IDelNotificationTemplateRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelNotificationTemplateResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelNotificationTemplateRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelNotificationTemplateRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelNotificationTemplateRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelNotificationTemplateResp;
}

export class DelOneSignalAppResp implements IDelOneSignalAppResp {
    /** One Signal App Id */
    oneSignalAppId?: number;

    constructor(data?: IDelOneSignalAppResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oneSignalAppId = _data["oneSignalAppId"];
        }
    }

    static fromJS(data: any): DelOneSignalAppResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelOneSignalAppResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oneSignalAppId"] = this.oneSignalAppId;
        return data;
    }
}

export interface IDelOneSignalAppResp {
    /** One Signal App Id */
    oneSignalAppId?: number;
}

export class DelOneSignalAppRespApiRespBase implements IDelOneSignalAppRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelOneSignalAppResp;

    constructor(data?: IDelOneSignalAppRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelOneSignalAppResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelOneSignalAppRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelOneSignalAppRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelOneSignalAppRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelOneSignalAppResp;
}

export class DelPageReq implements IDelPageReq {
    pageIds!: number[];

    constructor(data?: IDelPageReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.pageIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["pageIds"])) {
                this.pageIds = [] as any;
                for (let item of _data["pageIds"])
                    this.pageIds!.push(item);
            }
        }
    }

    static fromJS(data: any): DelPageReq {
        data = typeof data === 'object' ? data : {};
        let result = new DelPageReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.pageIds)) {
            data["pageIds"] = [];
            for (let item of this.pageIds)
                data["pageIds"].push(item);
        }
        return data;
    }
}

export interface IDelPageReq {
    pageIds: number[];
}

export class DelPageResp implements IDelPageResp {
    /** Page id */
    pageId?: number[] | undefined;

    constructor(data?: IDelPageResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["pageId"])) {
                this.pageId = [] as any;
                for (let item of _data["pageId"])
                    this.pageId!.push(item);
            }
        }
    }

    static fromJS(data: any): DelPageResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelPageResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.pageId)) {
            data["pageId"] = [];
            for (let item of this.pageId)
                data["pageId"].push(item);
        }
        return data;
    }
}

export interface IDelPageResp {
    /** Page id */
    pageId?: number[] | undefined;
}

export class DelPageRespApiRespBase implements IDelPageRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelPageResp;

    constructor(data?: IDelPageRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelPageResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelPageRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelPageRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelPageRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelPageResp;
}

export class DelPlayerMediaItemResp implements IDelPlayerMediaItemResp {

    constructor(data?: IDelPlayerMediaItemResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelPlayerMediaItemResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelPlayerMediaItemResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelPlayerMediaItemResp {
}

export class DelPlayerMediaItemRespApiRespBase implements IDelPlayerMediaItemRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelPlayerMediaItemResp;

    constructor(data?: IDelPlayerMediaItemRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelPlayerMediaItemResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelPlayerMediaItemRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelPlayerMediaItemRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelPlayerMediaItemRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelPlayerMediaItemResp;
}

export class DelPlayerResp implements IDelPlayerResp {

    constructor(data?: IDelPlayerResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelPlayerResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelPlayerResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelPlayerResp {
}

export class DelPlayerRespApiRespBase implements IDelPlayerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelPlayerResp;

    constructor(data?: IDelPlayerRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelPlayerResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelPlayerRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelPlayerRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelPlayerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelPlayerResp;
}

export class DelRoleResp implements IDelRoleResp {
    /** Role id */
    roleId?: number | undefined;

    constructor(data?: IDelRoleResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleId = _data["roleId"];
        }
    }

    static fromJS(data: any): DelRoleResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelRoleResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        return data;
    }
}

export interface IDelRoleResp {
    /** Role id */
    roleId?: number | undefined;
}

export class DelRoleRespApiRespBase implements IDelRoleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelRoleResp;

    constructor(data?: IDelRoleRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelRoleResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelRoleRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelRoleRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelRoleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelRoleResp;
}

export class DelServerResp implements IDelServerResp {

    constructor(data?: IDelServerResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelServerResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelServerResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelServerResp {
}

export class DelServerRespApiRespBase implements IDelServerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelServerResp;

    constructor(data?: IDelServerRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelServerResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelServerRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelServerRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelServerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelServerResp;
}

export class DelSideResp implements IDelSideResp {

    constructor(data?: IDelSideResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelSideResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelSideResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelSideResp {
}

export class DelSideRespApiRespBase implements IDelSideRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelSideResp;

    constructor(data?: IDelSideRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelSideResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelSideRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelSideRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelSideRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelSideResp;
}

export class DelSiteSectionsResp implements IDelSiteSectionsResp {

    constructor(data?: IDelSiteSectionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelSiteSectionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelSiteSectionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelSiteSectionsResp {
}

export class DelSiteSectionsRespApiRespBase implements IDelSiteSectionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelSiteSectionsResp;

    constructor(data?: IDelSiteSectionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelSiteSectionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelSiteSectionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelSiteSectionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelSiteSectionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelSiteSectionsResp;
}

export class DelSponsorResp implements IDelSponsorResp {

    constructor(data?: IDelSponsorResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelSponsorResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelSponsorResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelSponsorResp {
}

export class DelSponsorRespApiRespBase implements IDelSponsorRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelSponsorResp;

    constructor(data?: IDelSponsorRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelSponsorResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelSponsorRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelSponsorRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelSponsorRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelSponsorResp;
}

export class DelStreamResp implements IDelStreamResp {

    constructor(data?: IDelStreamResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelStreamResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelStreamResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelStreamResp {
}

export class DelStreamRespApiRespBase implements IDelStreamRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelStreamResp;

    constructor(data?: IDelStreamRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelStreamResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelStreamRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelStreamRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelStreamRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelStreamResp;
}

export class DelTeamPlayerResp implements IDelTeamPlayerResp {

    constructor(data?: IDelTeamPlayerResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelTeamPlayerResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelTeamPlayerResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelTeamPlayerResp {
}

export class DelTeamPlayerRespApiRespBase implements IDelTeamPlayerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelTeamPlayerResp;

    constructor(data?: IDelTeamPlayerRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelTeamPlayerResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelTeamPlayerRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelTeamPlayerRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelTeamPlayerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelTeamPlayerResp;
}

export class DelTeamResp implements IDelTeamResp {

    constructor(data?: IDelTeamResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelTeamResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelTeamResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelTeamResp {
}

export class DelTeamRespApiRespBase implements IDelTeamRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelTeamResp;

    constructor(data?: IDelTeamRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelTeamResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelTeamRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelTeamRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelTeamRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelTeamResp;
}

export class DelUserResp implements IDelUserResp {

    constructor(data?: IDelUserResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelUserResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelUserResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelUserResp {
}

export class DelUserRespApiRespBase implements IDelUserRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelUserResp;

    constructor(data?: IDelUserRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelUserResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelUserRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelUserRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelUserRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelUserResp;
}

export class DelVenueResp implements IDelVenueResp {

    constructor(data?: IDelVenueResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): DelVenueResp {
        data = typeof data === 'object' ? data : {};
        let result = new DelVenueResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IDelVenueResp {
}

export class DelVenueRespApiRespBase implements IDelVenueRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: DelVenueResp;

    constructor(data?: IDelVenueRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? DelVenueResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DelVenueRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new DelVenueRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDelVenueRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: DelVenueResp;
}

export enum EnumArticleState {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export enum EnumArticleType {
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export enum EnumBroadcastTalentType {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _99 = 99,
}

export enum EnumFieldSort {
    _0 = 0,
    _1 = 1,
}

export enum EnumFuncType {
    _1 = 1,
    _2 = 2,
}

export enum EnumGender {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export enum EnumPlatform {
    _1 = 1,
    _10 = 10,
    _11 = 11,
    _99 = 99,
}

export enum EnumRet {
    _0 = 0,
    _10001 = 10001,
    _10002 = 10002,
    _20000 = 20000,
    _20001 = 20001,
    _20002 = 20002,
    _20003 = 20003,
    _20004 = 20004,
    _20005 = 20005,
    _20006 = 20006,
    _20007 = 20007,
    _20008 = 20008,
    _20009 = 20009,
    _20010 = 20010,
    _20011 = 20011,
    _20012 = 20012,
    _20013 = 20013,
    _20014 = 20014,
    _20015 = 20015,
    _20016 = 20016,
    _20017 = 20017,
    _20018 = 20018,
    _20019 = 20019,
    _20020 = 20020,
    _20021 = 20021,
    _20022 = 20022,
    _20023 = 20023,
    _20024 = 20024,
    _20025 = 20025,
    _20026 = 20026,
    _20027 = 20027,
    _20028 = 20028,
    _20029 = 20029,
    _20030 = 20030,
    _20031 = 20031,
    _20032 = 20032,
    _29999 = 29999,
    _30000 = 30000,
    _30001 = 30001,
    _30002 = 30002,
    _30003 = 30003,
    _30004 = 30004,
    _30005 = 30005,
    _39999 = 39999,
    _40000 = 40000,
    _40001 = 40001,
    _40999 = 40999,
    _50000 = 50000,
    _50001 = 50001,
    _50002 = 50002,
    _50003 = 50003,
    _50004 = 50004,
    _50005 = 50005,
    _59999 = 59999,
    _60000 = 60000,
    _60001 = 60001,
    _69999 = 69999,
}

export enum EnumState {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class FolderDetail implements IFolderDetail {
    /** Folder id */
    id?: number;
    /** Folder name */
    name?: string | undefined;
    /** Folder path */
    path?: string | undefined;

    constructor(data?: IFolderDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.path = _data["path"];
        }
    }

    static fromJS(data: any): FolderDetail {
        data = typeof data === 'object' ? data : {};
        let result = new FolderDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["path"] = this.path;
        return data;
    }
}

export interface IFolderDetail {
    /** Folder id */
    id?: number;
    /** Folder name */
    name?: string | undefined;
    /** Folder path */
    path?: string | undefined;
}

export class FrontendSiteSection implements IFrontendSiteSection {
    /** Frontend id */
    frontendId?: number;
    /** Site section id */
    siteSectionId?: number;
    state?: EnumState;
    /** Position */
    position?: number;

    constructor(data?: IFrontendSiteSection) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.frontendId = _data["frontendId"];
            this.siteSectionId = _data["siteSectionId"];
            this.state = _data["state"];
            this.position = _data["position"];
        }
    }

    static fromJS(data: any): FrontendSiteSection {
        data = typeof data === 'object' ? data : {};
        let result = new FrontendSiteSection();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frontendId"] = this.frontendId;
        data["siteSectionId"] = this.siteSectionId;
        data["state"] = this.state;
        data["position"] = this.position;
        return data;
    }
}

export interface IFrontendSiteSection {
    /** Frontend id */
    frontendId?: number;
    /** Site section id */
    siteSectionId?: number;
    state?: EnumState;
    /** Position */
    position?: number;
}

export class FrontendSiteSectionListItem implements IFrontendSiteSectionListItem {
    /** Frontend id */
    frontendId?: number;
    /** Site section id */
    siteSectionId?: number;
    /** Site section name */
    name?: string | undefined;
    /** Game name */
    gameName?: string | undefined;

    constructor(data?: IFrontendSiteSectionListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.frontendId = _data["frontendId"];
            this.siteSectionId = _data["siteSectionId"];
            this.name = _data["name"];
            this.gameName = _data["gameName"];
        }
    }

    static fromJS(data: any): FrontendSiteSectionListItem {
        data = typeof data === 'object' ? data : {};
        let result = new FrontendSiteSectionListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frontendId"] = this.frontendId;
        data["siteSectionId"] = this.siteSectionId;
        data["name"] = this.name;
        data["gameName"] = this.gameName;
        return data;
    }
}

export interface IFrontendSiteSectionListItem {
    /** Frontend id */
    frontendId?: number;
    /** Site section id */
    siteSectionId?: number;
    /** Site section name */
    name?: string | undefined;
    /** Game name */
    gameName?: string | undefined;
}

export class FuncItem implements IFuncItem {
    /** Backoffice func id */
    funcId?: number;
    /** Parent id */
    parentId?: number;
    /** Func name */
    name?: string | undefined;
    /** Func code */
    code?: string | undefined;
    type?: EnumFuncType;
    /** Func type name */
    readonly typeName?: string | undefined;
    /** Func position */
    position?: number;
    state?: EnumState;
    /** State name */
    readonly stateName?: string | undefined;
    /** Func url */
    url?: string | undefined;
    /** Func icon */
    icon?: string | undefined;
    /** Sub funcs */
    subFuncs?: FuncItem[] | undefined;

    constructor(data?: IFuncItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.funcId = _data["funcId"];
            this.parentId = _data["parentId"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.type = _data["type"];
            (<any>this).typeName = _data["typeName"];
            this.position = _data["position"];
            this.state = _data["state"];
            (<any>this).stateName = _data["stateName"];
            this.url = _data["url"];
            this.icon = _data["icon"];
            if (Array.isArray(_data["subFuncs"])) {
                this.subFuncs = [] as any;
                for (let item of _data["subFuncs"])
                    this.subFuncs!.push(FuncItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FuncItem {
        data = typeof data === 'object' ? data : {};
        let result = new FuncItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["funcId"] = this.funcId;
        data["parentId"] = this.parentId;
        data["name"] = this.name;
        data["code"] = this.code;
        data["type"] = this.type;
        data["typeName"] = this.typeName;
        data["position"] = this.position;
        data["state"] = this.state;
        data["stateName"] = this.stateName;
        data["url"] = this.url;
        data["icon"] = this.icon;
        if (Array.isArray(this.subFuncs)) {
            data["subFuncs"] = [];
            for (let item of this.subFuncs)
                data["subFuncs"].push(item.toJSON());
        }
        return data;
    }
}

export interface IFuncItem {
    /** Backoffice func id */
    funcId?: number;
    /** Parent id */
    parentId?: number;
    /** Func name */
    name?: string | undefined;
    /** Func code */
    code?: string | undefined;
    type?: EnumFuncType;
    /** Func type name */
    typeName?: string | undefined;
    /** Func position */
    position?: number;
    state?: EnumState;
    /** State name */
    stateName?: string | undefined;
    /** Func url */
    url?: string | undefined;
    /** Func icon */
    icon?: string | undefined;
    /** Sub funcs */
    subFuncs?: FuncItem[] | undefined;
}

export class FuzzyFolderDetail implements IFuzzyFolderDetail {
    id?: number;
    path?: string | undefined;

    constructor(data?: IFuzzyFolderDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.path = _data["path"];
        }
    }

    static fromJS(data: any): FuzzyFolderDetail {
        data = typeof data === 'object' ? data : {};
        let result = new FuzzyFolderDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["path"] = this.path;
        return data;
    }
}

export interface IFuzzyFolderDetail {
    id?: number;
    path?: string | undefined;
}

export class GameListItem implements IGameListItem {
    /** Game id */
    id?: number;
    /** Game name */
    name?: string | undefined;
    /** Has player rankings */
    hasPlayerRankings?: boolean;
    /** Has team rankings */
    hasTeamRankings?: boolean;
    /** Has streams */
    hasStreams?: boolean;
    /** Grid id */
    gridId?: number | undefined;
    /** Is legacy */
    isLegacy?: boolean;
    /** Icon image url */
    iconImageUrl?: string | undefined;
    /** Translation */
    translations?: Translation[] | undefined;

    constructor(data?: IGameListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.hasPlayerRankings = _data["hasPlayerRankings"];
            this.hasTeamRankings = _data["hasTeamRankings"];
            this.hasStreams = _data["hasStreams"];
            this.gridId = _data["gridId"];
            this.isLegacy = _data["isLegacy"];
            this.iconImageUrl = _data["iconImageUrl"];
            if (Array.isArray(_data["translations"])) {
                this.translations = [] as any;
                for (let item of _data["translations"])
                    this.translations!.push(Translation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GameListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GameListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["hasPlayerRankings"] = this.hasPlayerRankings;
        data["hasTeamRankings"] = this.hasTeamRankings;
        data["hasStreams"] = this.hasStreams;
        data["gridId"] = this.gridId;
        data["isLegacy"] = this.isLegacy;
        data["iconImageUrl"] = this.iconImageUrl;
        if (Array.isArray(this.translations)) {
            data["translations"] = [];
            for (let item of this.translations)
                data["translations"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGameListItem {
    /** Game id */
    id?: number;
    /** Game name */
    name?: string | undefined;
    /** Has player rankings */
    hasPlayerRankings?: boolean;
    /** Has team rankings */
    hasTeamRankings?: boolean;
    /** Has streams */
    hasStreams?: boolean;
    /** Grid id */
    gridId?: number | undefined;
    /** Is legacy */
    isLegacy?: boolean;
    /** Icon image url */
    iconImageUrl?: string | undefined;
    /** Translation */
    translations?: Translation[] | undefined;
}

export class GameRegionListItem implements IGameRegionListItem {
    /** Region id */
    regionId!: number;
    /** Region name */
    regionName!: string;
    /** Game name */
    gameName!: string;
    /** Translations */
    translations!: Translation[];

    constructor(data?: IGameRegionListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.translations = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.regionId = _data["regionId"];
            this.regionName = _data["regionName"];
            this.gameName = _data["gameName"];
            if (Array.isArray(_data["translations"])) {
                this.translations = [] as any;
                for (let item of _data["translations"])
                    this.translations!.push(Translation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GameRegionListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GameRegionListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regionId"] = this.regionId;
        data["regionName"] = this.regionName;
        data["gameName"] = this.gameName;
        if (Array.isArray(this.translations)) {
            data["translations"] = [];
            for (let item of this.translations)
                data["translations"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGameRegionListItem {
    /** Region id */
    regionId: number;
    /** Region name */
    regionName: string;
    /** Game name */
    gameName: string;
    /** Translations */
    translations: Translation[];
}

export class GenderOption implements IGenderOption {
    id?: number;
    name?: string | undefined;

    constructor(data?: IGenderOption) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): GenderOption {
        data = typeof data === 'object' ? data : {};
        let result = new GenderOption();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IGenderOption {
    id?: number;
    name?: string | undefined;
}

export class GetApiLogResp implements IGetApiLogResp {
    log?: ApiLogDetail;

    constructor(data?: IGetApiLogResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.log = _data["log"] ? ApiLogDetail.fromJS(_data["log"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetApiLogResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetApiLogResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["log"] = this.log ? this.log.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetApiLogResp {
    log?: ApiLogDetail;
}

export class GetApiLogRespApiRespBase implements IGetApiLogRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetApiLogResp;

    constructor(data?: IGetApiLogRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetApiLogResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetApiLogRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetApiLogRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetApiLogRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetApiLogResp;
}

export class GetApiLogsResp implements IGetApiLogsResp {
    /** Api Logs */
    logs?: ApiLogListItem[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetApiLogsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["logs"])) {
                this.logs = [] as any;
                for (let item of _data["logs"])
                    this.logs!.push(ApiLogListItem.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetApiLogsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetApiLogsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.logs)) {
            data["logs"] = [];
            for (let item of this.logs)
                data["logs"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetApiLogsResp {
    /** Api Logs */
    logs?: ApiLogListItem[] | undefined;
    paging?: PagingRespBase;
}

export class GetApiLogsRespApiRespBase implements IGetApiLogsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetApiLogsResp;

    constructor(data?: IGetApiLogsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetApiLogsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetApiLogsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetApiLogsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetApiLogsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetApiLogsResp;
}

export class GetArticleResp implements IGetArticleResp {
    articleDetail?: ArticleDetail;
    players?: Int32Item[] | undefined;
    teams?: Int32Item[] | undefined;
    tournaments?: Int32Item[] | undefined;
    quickPoll?: RelatedQuickPoll;
    siteSections?: Int16Item[] | undefined;

    constructor(data?: IGetArticleResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.articleDetail = _data["articleDetail"] ? ArticleDetail.fromJS(_data["articleDetail"]) : <any>undefined;
            if (Array.isArray(_data["players"])) {
                this.players = [] as any;
                for (let item of _data["players"])
                    this.players!.push(Int32Item.fromJS(item));
            }
            if (Array.isArray(_data["teams"])) {
                this.teams = [] as any;
                for (let item of _data["teams"])
                    this.teams!.push(Int32Item.fromJS(item));
            }
            if (Array.isArray(_data["tournaments"])) {
                this.tournaments = [] as any;
                for (let item of _data["tournaments"])
                    this.tournaments!.push(Int32Item.fromJS(item));
            }
            this.quickPoll = _data["quickPoll"] ? RelatedQuickPoll.fromJS(_data["quickPoll"]) : <any>undefined;
            if (Array.isArray(_data["siteSections"])) {
                this.siteSections = [] as any;
                for (let item of _data["siteSections"])
                    this.siteSections!.push(Int16Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetArticleResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetArticleResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["articleDetail"] = this.articleDetail ? this.articleDetail.toJSON() : <any>undefined;
        if (Array.isArray(this.players)) {
            data["players"] = [];
            for (let item of this.players)
                data["players"].push(item.toJSON());
        }
        if (Array.isArray(this.teams)) {
            data["teams"] = [];
            for (let item of this.teams)
                data["teams"].push(item.toJSON());
        }
        if (Array.isArray(this.tournaments)) {
            data["tournaments"] = [];
            for (let item of this.tournaments)
                data["tournaments"].push(item.toJSON());
        }
        data["quickPoll"] = this.quickPoll ? this.quickPoll.toJSON() : <any>undefined;
        if (Array.isArray(this.siteSections)) {
            data["siteSections"] = [];
            for (let item of this.siteSections)
                data["siteSections"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetArticleResp {
    articleDetail?: ArticleDetail;
    players?: Int32Item[] | undefined;
    teams?: Int32Item[] | undefined;
    tournaments?: Int32Item[] | undefined;
    quickPoll?: RelatedQuickPoll;
    siteSections?: Int16Item[] | undefined;
}

export class GetArticleRespApiRespBase implements IGetArticleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetArticleResp;

    constructor(data?: IGetArticleRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetArticleResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetArticleRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetArticleRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetArticleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetArticleResp;
}

export class GetArticleTypesResp implements IGetArticleTypesResp {
    types?: Int16ItemWithSubItem[] | undefined;

    constructor(data?: IGetArticleTypesResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["types"])) {
                this.types = [] as any;
                for (let item of _data["types"])
                    this.types!.push(Int16ItemWithSubItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetArticleTypesResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetArticleTypesResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.types)) {
            data["types"] = [];
            for (let item of this.types)
                data["types"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetArticleTypesResp {
    types?: Int16ItemWithSubItem[] | undefined;
}

export class GetArticleTypesRespApiRespBase implements IGetArticleTypesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetArticleTypesResp;

    constructor(data?: IGetArticleTypesRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetArticleTypesResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetArticleTypesRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetArticleTypesRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetArticleTypesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetArticleTypesResp;
}

export class GetArticlesResp implements IGetArticlesResp {
    /** Articles */
    articles?: ArticleListItem[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetArticlesResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["articles"])) {
                this.articles = [] as any;
                for (let item of _data["articles"])
                    this.articles!.push(ArticleListItem.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetArticlesResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetArticlesResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.articles)) {
            data["articles"] = [];
            for (let item of this.articles)
                data["articles"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetArticlesResp {
    /** Articles */
    articles?: ArticleListItem[] | undefined;
    paging?: PagingRespBase;
}

export class GetArticlesRespApiRespBase implements IGetArticlesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetArticlesResp;

    constructor(data?: IGetArticlesRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetArticlesResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetArticlesRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetArticlesRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetArticlesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetArticlesResp;
}

export class GetBroadcastTalentResp implements IGetBroadcastTalentResp {
    id?: number;
    name?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    type?: number;
    gender?: number;
    isActive?: boolean | undefined;
    about?: string | undefined;
    dateOfBirth?: Date | undefined;
    headerImagePath?: string | undefined;
    imagePath?: string | undefined;
    socialFacebook?: string | undefined;
    socialTwitter?: string | undefined;
    socialYoutube?: string | undefined;
    website?: string | undefined;
    primaryGame?: BroadcastTalentGame;
    country?: BroadcastTalentCountry;
    language?: BroadcastTalentLanguage;
    player?: BroadcastTalentPlayer;
    personalStream?: BroadcastTalentStream;

    constructor(data?: IGetBroadcastTalentResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.type = _data["type"];
            this.gender = _data["gender"];
            this.isActive = _data["isActive"];
            this.about = _data["about"];
            this.dateOfBirth = _data["dateOfBirth"] ? parseDateOnly(_data["dateOfBirth"].toString()) : <any>undefined;
            this.headerImagePath = _data["headerImagePath"];
            this.imagePath = _data["imagePath"];
            this.socialFacebook = _data["socialFacebook"];
            this.socialTwitter = _data["socialTwitter"];
            this.socialYoutube = _data["socialYoutube"];
            this.website = _data["website"];
            this.primaryGame = _data["primaryGame"] ? BroadcastTalentGame.fromJS(_data["primaryGame"]) : <any>undefined;
            this.country = _data["country"] ? BroadcastTalentCountry.fromJS(_data["country"]) : <any>undefined;
            this.language = _data["language"] ? BroadcastTalentLanguage.fromJS(_data["language"]) : <any>undefined;
            this.player = _data["player"] ? BroadcastTalentPlayer.fromJS(_data["player"]) : <any>undefined;
            this.personalStream = _data["personalStream"] ? BroadcastTalentStream.fromJS(_data["personalStream"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetBroadcastTalentResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetBroadcastTalentResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["type"] = this.type;
        data["gender"] = this.gender;
        data["isActive"] = this.isActive;
        data["about"] = this.about;
        data["dateOfBirth"] = this.dateOfBirth ? formatDate(this.dateOfBirth) : <any>undefined;
        data["headerImagePath"] = this.headerImagePath;
        data["imagePath"] = this.imagePath;
        data["socialFacebook"] = this.socialFacebook;
        data["socialTwitter"] = this.socialTwitter;
        data["socialYoutube"] = this.socialYoutube;
        data["website"] = this.website;
        data["primaryGame"] = this.primaryGame ? this.primaryGame.toJSON() : <any>undefined;
        data["country"] = this.country ? this.country.toJSON() : <any>undefined;
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        data["player"] = this.player ? this.player.toJSON() : <any>undefined;
        data["personalStream"] = this.personalStream ? this.personalStream.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetBroadcastTalentResp {
    id?: number;
    name?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    type?: number;
    gender?: number;
    isActive?: boolean | undefined;
    about?: string | undefined;
    dateOfBirth?: Date | undefined;
    headerImagePath?: string | undefined;
    imagePath?: string | undefined;
    socialFacebook?: string | undefined;
    socialTwitter?: string | undefined;
    socialYoutube?: string | undefined;
    website?: string | undefined;
    primaryGame?: BroadcastTalentGame;
    country?: BroadcastTalentCountry;
    language?: BroadcastTalentLanguage;
    player?: BroadcastTalentPlayer;
    personalStream?: BroadcastTalentStream;
}

export class GetBroadcastTalentRespApiRespBase implements IGetBroadcastTalentRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetBroadcastTalentResp;

    constructor(data?: IGetBroadcastTalentRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetBroadcastTalentResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetBroadcastTalentRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetBroadcastTalentRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetBroadcastTalentRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetBroadcastTalentResp;
}

export class GetBroadcastTalents implements IGetBroadcastTalents {
    id?: number;
    name?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    urlSafeName?: string | undefined;
    type?: number;
    gender?: number;
    isActive?: boolean;
    primaryGame?: BroadcastTalentGame;
    country?: BroadcastTalentCountry;
    language?: BroadcastTalentLanguage;

    constructor(data?: IGetBroadcastTalents) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.urlSafeName = _data["urlSafeName"];
            this.type = _data["type"];
            this.gender = _data["gender"];
            this.isActive = _data["isActive"];
            this.primaryGame = _data["primaryGame"] ? BroadcastTalentGame.fromJS(_data["primaryGame"]) : <any>undefined;
            this.country = _data["country"] ? BroadcastTalentCountry.fromJS(_data["country"]) : <any>undefined;
            this.language = _data["language"] ? BroadcastTalentLanguage.fromJS(_data["language"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetBroadcastTalents {
        data = typeof data === 'object' ? data : {};
        let result = new GetBroadcastTalents();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["urlSafeName"] = this.urlSafeName;
        data["type"] = this.type;
        data["gender"] = this.gender;
        data["isActive"] = this.isActive;
        data["primaryGame"] = this.primaryGame ? this.primaryGame.toJSON() : <any>undefined;
        data["country"] = this.country ? this.country.toJSON() : <any>undefined;
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetBroadcastTalents {
    id?: number;
    name?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    urlSafeName?: string | undefined;
    type?: number;
    gender?: number;
    isActive?: boolean;
    primaryGame?: BroadcastTalentGame;
    country?: BroadcastTalentCountry;
    language?: BroadcastTalentLanguage;
}

export class GetBroadcastTalentsResp implements IGetBroadcastTalentsResp {
    broadcastTalents?: GetBroadcastTalents[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetBroadcastTalentsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["broadcastTalents"])) {
                this.broadcastTalents = [] as any;
                for (let item of _data["broadcastTalents"])
                    this.broadcastTalents!.push(GetBroadcastTalents.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetBroadcastTalentsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetBroadcastTalentsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.broadcastTalents)) {
            data["broadcastTalents"] = [];
            for (let item of this.broadcastTalents)
                data["broadcastTalents"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetBroadcastTalentsResp {
    broadcastTalents?: GetBroadcastTalents[] | undefined;
    paging?: PagingRespBase;
}

export class GetBroadcastTalentsRespApiRespBase implements IGetBroadcastTalentsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetBroadcastTalentsResp;

    constructor(data?: IGetBroadcastTalentsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetBroadcastTalentsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetBroadcastTalentsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetBroadcastTalentsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetBroadcastTalentsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetBroadcastTalentsResp;
}

export class GetContactTypesResp implements IGetContactTypesResp {
    /** Contact types */
    contactTypes?: ByteItem[] | undefined;

    constructor(data?: IGetContactTypesResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["contactTypes"])) {
                this.contactTypes = [] as any;
                for (let item of _data["contactTypes"])
                    this.contactTypes!.push(ByteItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetContactTypesResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetContactTypesResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.contactTypes)) {
            data["contactTypes"] = [];
            for (let item of this.contactTypes)
                data["contactTypes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetContactTypesResp {
    /** Contact types */
    contactTypes?: ByteItem[] | undefined;
}

export class GetContactTypesRespApiRespBase implements IGetContactTypesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetContactTypesResp;

    constructor(data?: IGetContactTypesRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetContactTypesResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetContactTypesRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetContactTypesRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetContactTypesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetContactTypesResp;
}

export class GetCountryOptionsResp implements IGetCountryOptionsResp {
    countries?: CountryOption[] | undefined;

    constructor(data?: IGetCountryOptionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["countries"])) {
                this.countries = [] as any;
                for (let item of _data["countries"])
                    this.countries!.push(CountryOption.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetCountryOptionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetCountryOptionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.countries)) {
            data["countries"] = [];
            for (let item of this.countries)
                data["countries"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetCountryOptionsResp {
    countries?: CountryOption[] | undefined;
}

export class GetCountryOptionsRespApiRespBase implements IGetCountryOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetCountryOptionsResp;

    constructor(data?: IGetCountryOptionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetCountryOptionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCountryOptionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetCountryOptionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetCountryOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetCountryOptionsResp;
}

export class GetCrewFilesResp implements IGetCrewFilesResp {
    files?: CrewFile[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetCrewFilesResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(CrewFile.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCrewFilesResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetCrewFilesResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetCrewFilesResp {
    files?: CrewFile[] | undefined;
    paging?: PagingRespBase;
}

export class GetCrewFilesRespApiRespBase implements IGetCrewFilesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetCrewFilesResp;

    constructor(data?: IGetCrewFilesRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetCrewFilesResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCrewFilesRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetCrewFilesRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetCrewFilesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetCrewFilesResp;
}

export class GetCrewFoldersResp implements IGetCrewFoldersResp {
    parent?: ParentFolder[] | undefined;
    folders?: FolderDetail[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetCrewFoldersResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["parent"])) {
                this.parent = [] as any;
                for (let item of _data["parent"])
                    this.parent!.push(ParentFolder.fromJS(item));
            }
            if (Array.isArray(_data["folders"])) {
                this.folders = [] as any;
                for (let item of _data["folders"])
                    this.folders!.push(FolderDetail.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCrewFoldersResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetCrewFoldersResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.parent)) {
            data["parent"] = [];
            for (let item of this.parent)
                data["parent"].push(item.toJSON());
        }
        if (Array.isArray(this.folders)) {
            data["folders"] = [];
            for (let item of this.folders)
                data["folders"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetCrewFoldersResp {
    parent?: ParentFolder[] | undefined;
    folders?: FolderDetail[] | undefined;
    paging?: PagingRespBase;
}

export class GetCrewFoldersRespApiRespBase implements IGetCrewFoldersRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetCrewFoldersResp;

    constructor(data?: IGetCrewFoldersRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetCrewFoldersResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCrewFoldersRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetCrewFoldersRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetCrewFoldersRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetCrewFoldersResp;
}

export class GetFrontendLocaleOptionsResp implements IGetFrontendLocaleOptionsResp {
    localeOptions?: { [key: string]: Int16Item[]; } | undefined;

    constructor(data?: IGetFrontendLocaleOptionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["localeOptions"]) {
                this.localeOptions = {} as any;
                for (let key in _data["localeOptions"]) {
                    if (_data["localeOptions"].hasOwnProperty(key))
                        (<any>this.localeOptions)![key] = _data["localeOptions"][key] ? _data["localeOptions"][key].map((i: any) => Int16Item.fromJS(i)) : [];
                }
            }
        }
    }

    static fromJS(data: any): GetFrontendLocaleOptionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetFrontendLocaleOptionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.localeOptions) {
            data["localeOptions"] = {};
            for (let key in this.localeOptions) {
                if (this.localeOptions.hasOwnProperty(key))
                    (<any>data["localeOptions"])[key] = (<any>this.localeOptions)[key];
            }
        }
        return data;
    }
}

export interface IGetFrontendLocaleOptionsResp {
    localeOptions?: { [key: string]: Int16Item[]; } | undefined;
}

export class GetFrontendLocaleOptionsRespApiRespBase implements IGetFrontendLocaleOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetFrontendLocaleOptionsResp;

    constructor(data?: IGetFrontendLocaleOptionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetFrontendLocaleOptionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFrontendLocaleOptionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetFrontendLocaleOptionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFrontendLocaleOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetFrontendLocaleOptionsResp;
}

export class GetFrontendOptionsResp implements IGetFrontendOptionsResp {
    frontendOptions?: Int16Item[] | undefined;

    constructor(data?: IGetFrontendOptionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["frontendOptions"])) {
                this.frontendOptions = [] as any;
                for (let item of _data["frontendOptions"])
                    this.frontendOptions!.push(Int16Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFrontendOptionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetFrontendOptionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.frontendOptions)) {
            data["frontendOptions"] = [];
            for (let item of this.frontendOptions)
                data["frontendOptions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFrontendOptionsResp {
    frontendOptions?: Int16Item[] | undefined;
}

export class GetFrontendOptionsRespApiRespBase implements IGetFrontendOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetFrontendOptionsResp;

    constructor(data?: IGetFrontendOptionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetFrontendOptionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFrontendOptionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetFrontendOptionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFrontendOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetFrontendOptionsResp;
}

export class GetFrontendSiteSectionsResp implements IGetFrontendSiteSectionsResp {
    /** Frontend site sections */
    frontendSiteSections?: FrontendSiteSectionListItem[] | undefined;

    constructor(data?: IGetFrontendSiteSectionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["frontendSiteSections"])) {
                this.frontendSiteSections = [] as any;
                for (let item of _data["frontendSiteSections"])
                    this.frontendSiteSections!.push(FrontendSiteSectionListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFrontendSiteSectionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetFrontendSiteSectionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.frontendSiteSections)) {
            data["frontendSiteSections"] = [];
            for (let item of this.frontendSiteSections)
                data["frontendSiteSections"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFrontendSiteSectionsResp {
    /** Frontend site sections */
    frontendSiteSections?: FrontendSiteSectionListItem[] | undefined;
}

export class GetFrontendSiteSectionsRespApiRespBase implements IGetFrontendSiteSectionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetFrontendSiteSectionsResp;

    constructor(data?: IGetFrontendSiteSectionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetFrontendSiteSectionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFrontendSiteSectionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetFrontendSiteSectionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFrontendSiteSectionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetFrontendSiteSectionsResp;
}

export class GetFuncOptionsResp implements IGetFuncOptionsResp {
    /** Func options */
    funcOptions?: UInt16Item[] | undefined;

    constructor(data?: IGetFuncOptionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["funcOptions"])) {
                this.funcOptions = [] as any;
                for (let item of _data["funcOptions"])
                    this.funcOptions!.push(UInt16Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFuncOptionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuncOptionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.funcOptions)) {
            data["funcOptions"] = [];
            for (let item of this.funcOptions)
                data["funcOptions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFuncOptionsResp {
    /** Func options */
    funcOptions?: UInt16Item[] | undefined;
}

export class GetFuncOptionsRespApiRespBase implements IGetFuncOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetFuncOptionsResp;

    constructor(data?: IGetFuncOptionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetFuncOptionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFuncOptionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuncOptionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFuncOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetFuncOptionsResp;
}

export class GetFuncResp implements IGetFuncResp {
    /** Func id */
    funcId?: number;
    /** Func name */
    name?: string | undefined;
    /** Func code */
    code?: string | undefined;
    type?: EnumFuncType;
    /** Type name */
    readonly typeName?: string | undefined;
    /** Func position */
    position?: number;
    state?: EnumState;
    /** State name */
    readonly stateName?: string | undefined;
    /** Func url */
    url?: string | undefined;
    /** Func icon */
    icon?: string | undefined;
    /** Created At */
    createdAt?: number;
    /** Updated At */
    updatedAt?: number;

    constructor(data?: IGetFuncResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.funcId = _data["funcId"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.type = _data["type"];
            (<any>this).typeName = _data["typeName"];
            this.position = _data["position"];
            this.state = _data["state"];
            (<any>this).stateName = _data["stateName"];
            this.url = _data["url"];
            this.icon = _data["icon"];
            this.createdAt = _data["createdAt"];
            this.updatedAt = _data["updatedAt"];
        }
    }

    static fromJS(data: any): GetFuncResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuncResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["funcId"] = this.funcId;
        data["name"] = this.name;
        data["code"] = this.code;
        data["type"] = this.type;
        data["typeName"] = this.typeName;
        data["position"] = this.position;
        data["state"] = this.state;
        data["stateName"] = this.stateName;
        data["url"] = this.url;
        data["icon"] = this.icon;
        data["createdAt"] = this.createdAt;
        data["updatedAt"] = this.updatedAt;
        return data;
    }
}

export interface IGetFuncResp {
    /** Func id */
    funcId?: number;
    /** Func name */
    name?: string | undefined;
    /** Func code */
    code?: string | undefined;
    type?: EnumFuncType;
    /** Type name */
    typeName?: string | undefined;
    /** Func position */
    position?: number;
    state?: EnumState;
    /** State name */
    stateName?: string | undefined;
    /** Func url */
    url?: string | undefined;
    /** Func icon */
    icon?: string | undefined;
    /** Created At */
    createdAt?: number;
    /** Updated At */
    updatedAt?: number;
}

export class GetFuncRespApiRespBase implements IGetFuncRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetFuncResp;

    constructor(data?: IGetFuncRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetFuncResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFuncRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuncRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFuncRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetFuncResp;
}

export class GetFuncTypesResp implements IGetFuncTypesResp {
    /** Func types */
    funcTypes?: ByteItem[] | undefined;

    constructor(data?: IGetFuncTypesResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["funcTypes"])) {
                this.funcTypes = [] as any;
                for (let item of _data["funcTypes"])
                    this.funcTypes!.push(ByteItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFuncTypesResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuncTypesResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.funcTypes)) {
            data["funcTypes"] = [];
            for (let item of this.funcTypes)
                data["funcTypes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFuncTypesResp {
    /** Func types */
    funcTypes?: ByteItem[] | undefined;
}

export class GetFuncTypesRespApiRespBase implements IGetFuncTypesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetFuncTypesResp;

    constructor(data?: IGetFuncTypesRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetFuncTypesResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFuncTypesRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuncTypesRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFuncTypesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetFuncTypesResp;
}

export class GetFuncsResp implements IGetFuncsResp {
    /** Funcs */
    funcs?: FuncItem[] | undefined;

    constructor(data?: IGetFuncsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["funcs"])) {
                this.funcs = [] as any;
                for (let item of _data["funcs"])
                    this.funcs!.push(FuncItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFuncsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuncsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.funcs)) {
            data["funcs"] = [];
            for (let item of this.funcs)
                data["funcs"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFuncsResp {
    /** Funcs */
    funcs?: FuncItem[] | undefined;
}

export class GetFuncsRespApiRespBase implements IGetFuncsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetFuncsResp;

    constructor(data?: IGetFuncsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetFuncsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFuncsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuncsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFuncsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetFuncsResp;
}

export class GetFuzzyFoldersResp implements IGetFuzzyFoldersResp {
    folders?: FuzzyFolderDetail[] | undefined;

    constructor(data?: IGetFuzzyFoldersResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["folders"])) {
                this.folders = [] as any;
                for (let item of _data["folders"])
                    this.folders!.push(FuzzyFolderDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFuzzyFoldersResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyFoldersResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.folders)) {
            data["folders"] = [];
            for (let item of this.folders)
                data["folders"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFuzzyFoldersResp {
    folders?: FuzzyFolderDetail[] | undefined;
}

export class GetFuzzyFoldersRespApiRespBase implements IGetFuzzyFoldersRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetFuzzyFoldersResp;

    constructor(data?: IGetFuzzyFoldersRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetFuzzyFoldersResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFuzzyFoldersRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyFoldersRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFuzzyFoldersRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetFuzzyFoldersResp;
}

export class GetFuzzyGameRaceResp implements IGetFuzzyGameRaceResp {
    fuzzyGames?: Int32Item[] | undefined;

    constructor(data?: IGetFuzzyGameRaceResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["fuzzyGames"])) {
                this.fuzzyGames = [] as any;
                for (let item of _data["fuzzyGames"])
                    this.fuzzyGames!.push(Int32Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFuzzyGameRaceResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyGameRaceResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.fuzzyGames)) {
            data["fuzzyGames"] = [];
            for (let item of this.fuzzyGames)
                data["fuzzyGames"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFuzzyGameRaceResp {
    fuzzyGames?: Int32Item[] | undefined;
}

export class GetFuzzyGameRaceRespApiRespBase implements IGetFuzzyGameRaceRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetFuzzyGameRaceResp;

    constructor(data?: IGetFuzzyGameRaceRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetFuzzyGameRaceResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFuzzyGameRaceRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyGameRaceRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFuzzyGameRaceRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetFuzzyGameRaceResp;
}

export class GetFuzzyGamesResp implements IGetFuzzyGamesResp {
    fuzzyGames?: Int32Item[] | undefined;

    constructor(data?: IGetFuzzyGamesResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["fuzzyGames"])) {
                this.fuzzyGames = [] as any;
                for (let item of _data["fuzzyGames"])
                    this.fuzzyGames!.push(Int32Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFuzzyGamesResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyGamesResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.fuzzyGames)) {
            data["fuzzyGames"] = [];
            for (let item of this.fuzzyGames)
                data["fuzzyGames"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFuzzyGamesResp {
    fuzzyGames?: Int32Item[] | undefined;
}

export class GetFuzzyGamesRespApiRespBase implements IGetFuzzyGamesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetFuzzyGamesResp;

    constructor(data?: IGetFuzzyGamesRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetFuzzyGamesResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFuzzyGamesRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyGamesRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFuzzyGamesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetFuzzyGamesResp;
}

export class GetFuzzyMediaStreamsResp implements IGetFuzzyMediaStreamsResp {
    fuzzyMediaItems?: Int32Item[] | undefined;

    constructor(data?: IGetFuzzyMediaStreamsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["fuzzyMediaItems"])) {
                this.fuzzyMediaItems = [] as any;
                for (let item of _data["fuzzyMediaItems"])
                    this.fuzzyMediaItems!.push(Int32Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFuzzyMediaStreamsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyMediaStreamsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.fuzzyMediaItems)) {
            data["fuzzyMediaItems"] = [];
            for (let item of this.fuzzyMediaItems)
                data["fuzzyMediaItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFuzzyMediaStreamsResp {
    fuzzyMediaItems?: Int32Item[] | undefined;
}

export class GetFuzzyMediaStreamsRespApiRespBase implements IGetFuzzyMediaStreamsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetFuzzyMediaStreamsResp;

    constructor(data?: IGetFuzzyMediaStreamsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetFuzzyMediaStreamsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFuzzyMediaStreamsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyMediaStreamsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFuzzyMediaStreamsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetFuzzyMediaStreamsResp;
}

export class GetFuzzyMediaVideosResp implements IGetFuzzyMediaVideosResp {
    fuzzyMediaItems?: Int32Item[] | undefined;

    constructor(data?: IGetFuzzyMediaVideosResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["fuzzyMediaItems"])) {
                this.fuzzyMediaItems = [] as any;
                for (let item of _data["fuzzyMediaItems"])
                    this.fuzzyMediaItems!.push(Int32Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFuzzyMediaVideosResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyMediaVideosResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.fuzzyMediaItems)) {
            data["fuzzyMediaItems"] = [];
            for (let item of this.fuzzyMediaItems)
                data["fuzzyMediaItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFuzzyMediaVideosResp {
    fuzzyMediaItems?: Int32Item[] | undefined;
}

export class GetFuzzyMediaVideosRespApiRespBase implements IGetFuzzyMediaVideosRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetFuzzyMediaVideosResp;

    constructor(data?: IGetFuzzyMediaVideosRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetFuzzyMediaVideosResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFuzzyMediaVideosRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyMediaVideosRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFuzzyMediaVideosRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetFuzzyMediaVideosResp;
}

export class GetFuzzyPlayersResp implements IGetFuzzyPlayersResp {
    fuzzyPlayers?: Int32Item[] | undefined;

    constructor(data?: IGetFuzzyPlayersResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["fuzzyPlayers"])) {
                this.fuzzyPlayers = [] as any;
                for (let item of _data["fuzzyPlayers"])
                    this.fuzzyPlayers!.push(Int32Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFuzzyPlayersResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyPlayersResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.fuzzyPlayers)) {
            data["fuzzyPlayers"] = [];
            for (let item of this.fuzzyPlayers)
                data["fuzzyPlayers"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFuzzyPlayersResp {
    fuzzyPlayers?: Int32Item[] | undefined;
}

export class GetFuzzyPlayersRespApiRespBase implements IGetFuzzyPlayersRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetFuzzyPlayersResp;

    constructor(data?: IGetFuzzyPlayersRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetFuzzyPlayersResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFuzzyPlayersRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyPlayersRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFuzzyPlayersRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetFuzzyPlayersResp;
}

export class GetFuzzyTeamsResp implements IGetFuzzyTeamsResp {
    fuzzyTeams?: Int32Item[] | undefined;

    constructor(data?: IGetFuzzyTeamsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["fuzzyTeams"])) {
                this.fuzzyTeams = [] as any;
                for (let item of _data["fuzzyTeams"])
                    this.fuzzyTeams!.push(Int32Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFuzzyTeamsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyTeamsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.fuzzyTeams)) {
            data["fuzzyTeams"] = [];
            for (let item of this.fuzzyTeams)
                data["fuzzyTeams"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFuzzyTeamsResp {
    fuzzyTeams?: Int32Item[] | undefined;
}

export class GetFuzzyTeamsRespApiRespBase implements IGetFuzzyTeamsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetFuzzyTeamsResp;

    constructor(data?: IGetFuzzyTeamsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetFuzzyTeamsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFuzzyTeamsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyTeamsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFuzzyTeamsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetFuzzyTeamsResp;
}

export class GetFuzzyTournamentsResp implements IGetFuzzyTournamentsResp {
    fuzzyTournaments?: Int32Item[] | undefined;

    constructor(data?: IGetFuzzyTournamentsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["fuzzyTournaments"])) {
                this.fuzzyTournaments = [] as any;
                for (let item of _data["fuzzyTournaments"])
                    this.fuzzyTournaments!.push(Int32Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFuzzyTournamentsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyTournamentsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.fuzzyTournaments)) {
            data["fuzzyTournaments"] = [];
            for (let item of this.fuzzyTournaments)
                data["fuzzyTournaments"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFuzzyTournamentsResp {
    fuzzyTournaments?: Int32Item[] | undefined;
}

export class GetFuzzyTournamentsRespApiRespBase implements IGetFuzzyTournamentsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetFuzzyTournamentsResp;

    constructor(data?: IGetFuzzyTournamentsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetFuzzyTournamentsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFuzzyTournamentsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyTournamentsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFuzzyTournamentsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetFuzzyTournamentsResp;
}

export class GetFuzzyUsersByGroupResp implements IGetFuzzyUsersByGroupResp {
    /** Fuzzy users */
    users?: GroupUserListItem[] | undefined;

    constructor(data?: IGetFuzzyUsersByGroupResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(GroupUserListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFuzzyUsersByGroupResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyUsersByGroupResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFuzzyUsersByGroupResp {
    /** Fuzzy users */
    users?: GroupUserListItem[] | undefined;
}

export class GetFuzzyUsersByGroupRespApiRespBase implements IGetFuzzyUsersByGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetFuzzyUsersByGroupResp;

    constructor(data?: IGetFuzzyUsersByGroupRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetFuzzyUsersByGroupResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFuzzyUsersByGroupRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyUsersByGroupRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFuzzyUsersByGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetFuzzyUsersByGroupResp;
}

export class GetFuzzyUsersResp implements IGetFuzzyUsersResp {
    fuzzyUsers?: Int32Item[] | undefined;

    constructor(data?: IGetFuzzyUsersResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["fuzzyUsers"])) {
                this.fuzzyUsers = [] as any;
                for (let item of _data["fuzzyUsers"])
                    this.fuzzyUsers!.push(Int32Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFuzzyUsersResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyUsersResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.fuzzyUsers)) {
            data["fuzzyUsers"] = [];
            for (let item of this.fuzzyUsers)
                data["fuzzyUsers"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetFuzzyUsersResp {
    fuzzyUsers?: Int32Item[] | undefined;
}

export class GetFuzzyUsersRespApiRespBase implements IGetFuzzyUsersRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetFuzzyUsersResp;

    constructor(data?: IGetFuzzyUsersRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetFuzzyUsersResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFuzzyUsersRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetFuzzyUsersRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetFuzzyUsersRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetFuzzyUsersResp;
}

export class GetGameAccountDetail implements IGetGameAccountDetail {
    gameAccountId?: number;
    playerId?: number;
    gameAccountName?: string | undefined;
    gameId?: number;
    gameName?: string | undefined;
    gameUrlSafeName?: string | undefined;
    serverId?: number;
    serverName?: string | undefined;
    isDeleted?: boolean;

    constructor(data?: IGetGameAccountDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gameAccountId = _data["gameAccountId"];
            this.playerId = _data["playerId"];
            this.gameAccountName = _data["gameAccountName"];
            this.gameId = _data["gameId"];
            this.gameName = _data["gameName"];
            this.gameUrlSafeName = _data["gameUrlSafeName"];
            this.serverId = _data["serverId"];
            this.serverName = _data["serverName"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): GetGameAccountDetail {
        data = typeof data === 'object' ? data : {};
        let result = new GetGameAccountDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gameAccountId"] = this.gameAccountId;
        data["playerId"] = this.playerId;
        data["gameAccountName"] = this.gameAccountName;
        data["gameId"] = this.gameId;
        data["gameName"] = this.gameName;
        data["gameUrlSafeName"] = this.gameUrlSafeName;
        data["serverId"] = this.serverId;
        data["serverName"] = this.serverName;
        data["isDeleted"] = this.isDeleted;
        return data;
    }
}

export interface IGetGameAccountDetail {
    gameAccountId?: number;
    playerId?: number;
    gameAccountName?: string | undefined;
    gameId?: number;
    gameName?: string | undefined;
    gameUrlSafeName?: string | undefined;
    serverId?: number;
    serverName?: string | undefined;
    isDeleted?: boolean;
}

export class GetGameAccountResp implements IGetGameAccountResp {
    gameAccountId?: number;
    playerId?: number;
    gameAccountName?: string | undefined;
    gameId?: number;
    serverId?: number | undefined;

    constructor(data?: IGetGameAccountResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gameAccountId = _data["gameAccountId"];
            this.playerId = _data["playerId"];
            this.gameAccountName = _data["gameAccountName"];
            this.gameId = _data["gameId"];
            this.serverId = _data["serverId"];
        }
    }

    static fromJS(data: any): GetGameAccountResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetGameAccountResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gameAccountId"] = this.gameAccountId;
        data["playerId"] = this.playerId;
        data["gameAccountName"] = this.gameAccountName;
        data["gameId"] = this.gameId;
        data["serverId"] = this.serverId;
        return data;
    }
}

export interface IGetGameAccountResp {
    gameAccountId?: number;
    playerId?: number;
    gameAccountName?: string | undefined;
    gameId?: number;
    serverId?: number | undefined;
}

export class GetGameAccountRespApiRespBase implements IGetGameAccountRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetGameAccountResp;

    constructor(data?: IGetGameAccountRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetGameAccountResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetGameAccountRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetGameAccountRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetGameAccountRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetGameAccountResp;
}

export class GetGameAccountsResp implements IGetGameAccountsResp {
    gameAccounts?: GetGameAccountDetail[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetGameAccountsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["gameAccounts"])) {
                this.gameAccounts = [] as any;
                for (let item of _data["gameAccounts"])
                    this.gameAccounts!.push(GetGameAccountDetail.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetGameAccountsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetGameAccountsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.gameAccounts)) {
            data["gameAccounts"] = [];
            for (let item of this.gameAccounts)
                data["gameAccounts"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetGameAccountsResp {
    gameAccounts?: GetGameAccountDetail[] | undefined;
    paging?: PagingRespBase;
}

export class GetGameAccountsRespApiRespBase implements IGetGameAccountsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetGameAccountsResp;

    constructor(data?: IGetGameAccountsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetGameAccountsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetGameAccountsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetGameAccountsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetGameAccountsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetGameAccountsResp;
}

export class GetGameOptionsResp implements IGetGameOptionsResp {
    /** Games */
    games?: Int16Item[] | undefined;

    constructor(data?: IGetGameOptionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["games"])) {
                this.games = [] as any;
                for (let item of _data["games"])
                    this.games!.push(Int16Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetGameOptionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetGameOptionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.games)) {
            data["games"] = [];
            for (let item of this.games)
                data["games"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetGameOptionsResp {
    /** Games */
    games?: Int16Item[] | undefined;
}

export class GetGameOptionsRespApiRespBase implements IGetGameOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetGameOptionsResp;

    constructor(data?: IGetGameOptionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetGameOptionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetGameOptionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetGameOptionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetGameOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetGameOptionsResp;
}

export class GetGameRegionResp implements IGetGameRegionResp {
    /** Region id */
    regionId!: number;
    /** Region name */
    regionName!: string;
    /** Countries */
    countries!: Int16Item[];

    constructor(data?: IGetGameRegionResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.countries = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.regionId = _data["regionId"];
            this.regionName = _data["regionName"];
            if (Array.isArray(_data["countries"])) {
                this.countries = [] as any;
                for (let item of _data["countries"])
                    this.countries!.push(Int16Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetGameRegionResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetGameRegionResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regionId"] = this.regionId;
        data["regionName"] = this.regionName;
        if (Array.isArray(this.countries)) {
            data["countries"] = [];
            for (let item of this.countries)
                data["countries"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetGameRegionResp {
    /** Region id */
    regionId: number;
    /** Region name */
    regionName: string;
    /** Countries */
    countries: Int16Item[];
}

export class GetGameRegionTranslationResp implements IGetGameRegionTranslationResp {
    /** Region id */
    regionId!: number;
    /** Region name */
    regionName!: string;
    /** Translations */
    translations!: Translation[];

    constructor(data?: IGetGameRegionTranslationResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.translations = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.regionId = _data["regionId"];
            this.regionName = _data["regionName"];
            if (Array.isArray(_data["translations"])) {
                this.translations = [] as any;
                for (let item of _data["translations"])
                    this.translations!.push(Translation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetGameRegionTranslationResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetGameRegionTranslationResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regionId"] = this.regionId;
        data["regionName"] = this.regionName;
        if (Array.isArray(this.translations)) {
            data["translations"] = [];
            for (let item of this.translations)
                data["translations"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetGameRegionTranslationResp {
    /** Region id */
    regionId: number;
    /** Region name */
    regionName: string;
    /** Translations */
    translations: Translation[];
}

export class GetGameRegionsResp implements IGetGameRegionsResp {
    /** Game regions */
    gameRegions?: GameRegionListItem[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetGameRegionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["gameRegions"])) {
                this.gameRegions = [] as any;
                for (let item of _data["gameRegions"])
                    this.gameRegions!.push(GameRegionListItem.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetGameRegionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetGameRegionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.gameRegions)) {
            data["gameRegions"] = [];
            for (let item of this.gameRegions)
                data["gameRegions"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetGameRegionsResp {
    /** Game regions */
    gameRegions?: GameRegionListItem[] | undefined;
    paging?: PagingRespBase;
}

export class GetGameResp implements IGetGameResp {
    /** Game id */
    id?: number;
    /** Game name */
    name?: string | undefined;
    /** Has player rankings */
    hasPlayerRankings?: boolean;
    /** Has team rankings */
    hasTeamRankings?: boolean;
    /** Has streams */
    hasStreams?: boolean;
    /** Grid id */
    gridId?: number | undefined;
    /** Steam app id */
    steamAppId?: number | undefined;
    /** Twitch game id */
    twitchGameId?: number | undefined;
    /** Game icon image url */
    iconImageUrl?: string | undefined;
    /** Is legacy */
    isLegacy?: boolean;
    /** Replay count */
    replayCount?: number;
    /** Recommended replay count */
    recommendedReplayCount?: number;

    constructor(data?: IGetGameResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.hasPlayerRankings = _data["hasPlayerRankings"];
            this.hasTeamRankings = _data["hasTeamRankings"];
            this.hasStreams = _data["hasStreams"];
            this.gridId = _data["gridId"];
            this.steamAppId = _data["steamAppId"];
            this.twitchGameId = _data["twitchGameId"];
            this.iconImageUrl = _data["iconImageUrl"];
            this.isLegacy = _data["isLegacy"];
            this.replayCount = _data["replayCount"];
            this.recommendedReplayCount = _data["recommendedReplayCount"];
        }
    }

    static fromJS(data: any): GetGameResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetGameResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["hasPlayerRankings"] = this.hasPlayerRankings;
        data["hasTeamRankings"] = this.hasTeamRankings;
        data["hasStreams"] = this.hasStreams;
        data["gridId"] = this.gridId;
        data["steamAppId"] = this.steamAppId;
        data["twitchGameId"] = this.twitchGameId;
        data["iconImageUrl"] = this.iconImageUrl;
        data["isLegacy"] = this.isLegacy;
        data["replayCount"] = this.replayCount;
        data["recommendedReplayCount"] = this.recommendedReplayCount;
        return data;
    }
}

export interface IGetGameResp {
    /** Game id */
    id?: number;
    /** Game name */
    name?: string | undefined;
    /** Has player rankings */
    hasPlayerRankings?: boolean;
    /** Has team rankings */
    hasTeamRankings?: boolean;
    /** Has streams */
    hasStreams?: boolean;
    /** Grid id */
    gridId?: number | undefined;
    /** Steam app id */
    steamAppId?: number | undefined;
    /** Twitch game id */
    twitchGameId?: number | undefined;
    /** Game icon image url */
    iconImageUrl?: string | undefined;
    /** Is legacy */
    isLegacy?: boolean;
    /** Replay count */
    replayCount?: number;
    /** Recommended replay count */
    recommendedReplayCount?: number;
}

export class GetGameRespApiRespBase implements IGetGameRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetGameResp;

    constructor(data?: IGetGameRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetGameResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetGameRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetGameRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetGameRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetGameResp;
}

export class GetGamesResp implements IGetGamesResp {
    /** Games */
    games?: GameListItem[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetGamesResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["games"])) {
                this.games = [] as any;
                for (let item of _data["games"])
                    this.games!.push(GameListItem.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetGamesResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetGamesResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.games)) {
            data["games"] = [];
            for (let item of this.games)
                data["games"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetGamesResp {
    /** Games */
    games?: GameListItem[] | undefined;
    paging?: PagingRespBase;
}

export class GetGamesRespApiRespBase implements IGetGamesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetGamesResp;

    constructor(data?: IGetGamesRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetGamesResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetGamesRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetGamesRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetGamesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetGamesResp;
}

export class GetGenderOptionsResp implements IGetGenderOptionsResp {
    genders?: GenderOption[] | undefined;

    constructor(data?: IGetGenderOptionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["genders"])) {
                this.genders = [] as any;
                for (let item of _data["genders"])
                    this.genders!.push(GenderOption.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetGenderOptionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetGenderOptionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.genders)) {
            data["genders"] = [];
            for (let item of this.genders)
                data["genders"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetGenderOptionsResp {
    genders?: GenderOption[] | undefined;
}

export class GetGenderOptionsRespApiRespBase implements IGetGenderOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetGenderOptionsResp;

    constructor(data?: IGetGenderOptionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetGenderOptionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetGenderOptionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetGenderOptionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetGenderOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetGenderOptionsResp;
}

export class GetGgCodeInfoResp implements IGetGgCodeInfoResp {
    type?: string | undefined;
    version?: string | undefined;
    providerName?: string | undefined;
    providerUrl?: string | undefined;
    width?: number;
    height?: number;
    html?: string | undefined;

    constructor(data?: IGetGgCodeInfoResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.version = _data["version"];
            this.providerName = _data["providerName"];
            this.providerUrl = _data["providerUrl"];
            this.width = _data["width"];
            this.height = _data["height"];
            this.html = _data["html"];
        }
    }

    static fromJS(data: any): GetGgCodeInfoResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetGgCodeInfoResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["version"] = this.version;
        data["providerName"] = this.providerName;
        data["providerUrl"] = this.providerUrl;
        data["width"] = this.width;
        data["height"] = this.height;
        data["html"] = this.html;
        return data;
    }
}

export interface IGetGgCodeInfoResp {
    type?: string | undefined;
    version?: string | undefined;
    providerName?: string | undefined;
    providerUrl?: string | undefined;
    width?: number;
    height?: number;
    html?: string | undefined;
}

export class GetGgCodeInfoRespApiRespBase implements IGetGgCodeInfoRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetGgCodeInfoResp;

    constructor(data?: IGetGgCodeInfoRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetGgCodeInfoResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetGgCodeInfoRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetGgCodeInfoRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetGgCodeInfoRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetGgCodeInfoResp;
}

export class GetGroupBlankPermissionsResp implements IGetGroupBlankPermissionsResp {
    /** Frontend permissions */
    frontendPermissions?: Int16Item[] | undefined;
    /** Backoffice permissions */
    backofficePermissions?: SimpleBackOfficePermissionItem[] | undefined;

    constructor(data?: IGetGroupBlankPermissionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["frontendPermissions"])) {
                this.frontendPermissions = [] as any;
                for (let item of _data["frontendPermissions"])
                    this.frontendPermissions!.push(Int16Item.fromJS(item));
            }
            if (Array.isArray(_data["backofficePermissions"])) {
                this.backofficePermissions = [] as any;
                for (let item of _data["backofficePermissions"])
                    this.backofficePermissions!.push(SimpleBackOfficePermissionItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetGroupBlankPermissionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetGroupBlankPermissionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.frontendPermissions)) {
            data["frontendPermissions"] = [];
            for (let item of this.frontendPermissions)
                data["frontendPermissions"].push(item.toJSON());
        }
        if (Array.isArray(this.backofficePermissions)) {
            data["backofficePermissions"] = [];
            for (let item of this.backofficePermissions)
                data["backofficePermissions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetGroupBlankPermissionsResp {
    /** Frontend permissions */
    frontendPermissions?: Int16Item[] | undefined;
    /** Backoffice permissions */
    backofficePermissions?: SimpleBackOfficePermissionItem[] | undefined;
}

export class GetGroupBlankPermissionsRespApiRespBase implements IGetGroupBlankPermissionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetGroupBlankPermissionsResp;

    constructor(data?: IGetGroupBlankPermissionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetGroupBlankPermissionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetGroupBlankPermissionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetGroupBlankPermissionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetGroupBlankPermissionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetGroupBlankPermissionsResp;
}

export class GetGroupOptionsResp implements IGetGroupOptionsResp {
    /** Groups */
    groups?: UInt32Item[] | undefined;

    constructor(data?: IGetGroupOptionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(UInt32Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetGroupOptionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetGroupOptionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetGroupOptionsResp {
    /** Groups */
    groups?: UInt32Item[] | undefined;
}

export class GetGroupOptionsRespApiRespBase implements IGetGroupOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetGroupOptionsResp;

    constructor(data?: IGetGroupOptionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetGroupOptionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetGroupOptionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetGroupOptionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetGroupOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetGroupOptionsResp;
}

export class GetGroupResp implements IGetGroupResp {
    /** Group id */
    groupId!: number;
    /** User group name */
    name!: string;
    /** Remark */
    remark!: string;
    /** Frontend permissions */
    frontendPermissions!: Int16Item[];
    /** Backoffice permissions */
    backofficePermissions!: SimpleBackOfficePermissionItem[];

    constructor(data?: IGetGroupResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.frontendPermissions = [];
            this.backofficePermissions = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["frontendPermissions"])) {
                this.frontendPermissions = [] as any;
                for (let item of _data["frontendPermissions"])
                    this.frontendPermissions!.push(Int16Item.fromJS(item));
            }
            if (Array.isArray(_data["backofficePermissions"])) {
                this.backofficePermissions = [] as any;
                for (let item of _data["backofficePermissions"])
                    this.backofficePermissions!.push(SimpleBackOfficePermissionItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetGroupResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetGroupResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["name"] = this.name;
        data["remark"] = this.remark;
        if (Array.isArray(this.frontendPermissions)) {
            data["frontendPermissions"] = [];
            for (let item of this.frontendPermissions)
                data["frontendPermissions"].push(item.toJSON());
        }
        if (Array.isArray(this.backofficePermissions)) {
            data["backofficePermissions"] = [];
            for (let item of this.backofficePermissions)
                data["backofficePermissions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetGroupResp {
    /** Group id */
    groupId: number;
    /** User group name */
    name: string;
    /** Remark */
    remark: string;
    /** Frontend permissions */
    frontendPermissions: Int16Item[];
    /** Backoffice permissions */
    backofficePermissions: SimpleBackOfficePermissionItem[];
}

export class GetGroupRespApiRespBase implements IGetGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetGroupResp;

    constructor(data?: IGetGroupRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetGroupResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetGroupRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetGroupRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetGroupResp;
}

export class GetGroupTemplatesResp implements IGetGroupTemplatesResp {
    /** Templates */
    templates?: GroupTemplate[] | undefined;

    constructor(data?: IGetGroupTemplatesResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["templates"])) {
                this.templates = [] as any;
                for (let item of _data["templates"])
                    this.templates!.push(GroupTemplate.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetGroupTemplatesResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetGroupTemplatesResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.templates)) {
            data["templates"] = [];
            for (let item of this.templates)
                data["templates"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetGroupTemplatesResp {
    /** Templates */
    templates?: GroupTemplate[] | undefined;
}

export class GetGroupTemplatesRespApiRespBase implements IGetGroupTemplatesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetGroupTemplatesResp;

    constructor(data?: IGetGroupTemplatesRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetGroupTemplatesResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetGroupTemplatesRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetGroupTemplatesRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetGroupTemplatesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetGroupTemplatesResp;
}

export class GetGroupsResp implements IGetGroupsResp {
    /** Groups */
    groups?: GroupListItem[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetGroupsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(GroupListItem.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetGroupsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetGroupsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetGroupsResp {
    /** Groups */
    groups?: GroupListItem[] | undefined;
    paging?: PagingRespBase;
}

export class GetGroupsRespApiRespBase implements IGetGroupsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetGroupsResp;

    constructor(data?: IGetGroupsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetGroupsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetGroupsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetGroupsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetGroupsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetGroupsResp;
}

export class GetHero implements IGetHero {
    /** Hero Id */
    id?: number;
    /** Hero Name */
    name?: string | undefined;
    /** Referred To By */
    referredToBy?: number;
    /** Title */
    title?: string | undefined;
    gameName?: string | undefined;
    translations?: GetHeroesTranslation[] | undefined;

    constructor(data?: IGetHero) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.referredToBy = _data["referredToBy"];
            this.title = _data["title"];
            this.gameName = _data["gameName"];
            if (Array.isArray(_data["translations"])) {
                this.translations = [] as any;
                for (let item of _data["translations"])
                    this.translations!.push(GetHeroesTranslation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetHero {
        data = typeof data === 'object' ? data : {};
        let result = new GetHero();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["referredToBy"] = this.referredToBy;
        data["title"] = this.title;
        data["gameName"] = this.gameName;
        if (Array.isArray(this.translations)) {
            data["translations"] = [];
            for (let item of this.translations)
                data["translations"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetHero {
    /** Hero Id */
    id?: number;
    /** Hero Name */
    name?: string | undefined;
    /** Referred To By */
    referredToBy?: number;
    /** Title */
    title?: string | undefined;
    gameName?: string | undefined;
    translations?: GetHeroesTranslation[] | undefined;
}

export class GetHeroLocale implements IGetHeroLocale {
    id?: number;
    bcp47Identifier?: string | undefined;
    displayName?: string | undefined;

    constructor(data?: IGetHeroLocale) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.bcp47Identifier = _data["bcp47Identifier"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): GetHeroLocale {
        data = typeof data === 'object' ? data : {};
        let result = new GetHeroLocale();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["bcp47Identifier"] = this.bcp47Identifier;
        data["displayName"] = this.displayName;
        return data;
    }
}

export interface IGetHeroLocale {
    id?: number;
    bcp47Identifier?: string | undefined;
    displayName?: string | undefined;
}

export class GetHeroResp implements IGetHeroResp {
    /** Hero Id */
    id?: number;
    gameId?: number;
    name?: string | undefined;
    title?: string | undefined;
    referredToBy?: number;
    tagline?: string | undefined;
    description?: string | undefined;
    imageFileName?: string | undefined;
    iconFileName?: string | undefined;

    constructor(data?: IGetHeroResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.gameId = _data["gameId"];
            this.name = _data["name"];
            this.title = _data["title"];
            this.referredToBy = _data["referredToBy"];
            this.tagline = _data["tagline"];
            this.description = _data["description"];
            this.imageFileName = _data["imageFileName"];
            this.iconFileName = _data["iconFileName"];
        }
    }

    static fromJS(data: any): GetHeroResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetHeroResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["gameId"] = this.gameId;
        data["name"] = this.name;
        data["title"] = this.title;
        data["referredToBy"] = this.referredToBy;
        data["tagline"] = this.tagline;
        data["description"] = this.description;
        data["imageFileName"] = this.imageFileName;
        data["iconFileName"] = this.iconFileName;
        return data;
    }
}

export interface IGetHeroResp {
    /** Hero Id */
    id?: number;
    gameId?: number;
    name?: string | undefined;
    title?: string | undefined;
    referredToBy?: number;
    tagline?: string | undefined;
    description?: string | undefined;
    imageFileName?: string | undefined;
    iconFileName?: string | undefined;
}

export class GetHeroRespApiRespBase implements IGetHeroRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetHeroResp;

    constructor(data?: IGetHeroRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetHeroResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetHeroRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetHeroRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetHeroRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetHeroResp;
}

export class GetHeroTranslation implements IGetHeroTranslation {
    name?: string | undefined;
    /** Title */
    title?: string | undefined;
    /** Tagline */
    tagline?: string | undefined;
    /** Description */
    description?: string | undefined;
    status?: string | undefined;
    locale?: GetHeroLocale;

    constructor(data?: IGetHeroTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.title = _data["title"];
            this.tagline = _data["tagline"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.locale = _data["locale"] ? GetHeroLocale.fromJS(_data["locale"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetHeroTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new GetHeroTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["title"] = this.title;
        data["tagline"] = this.tagline;
        data["description"] = this.description;
        data["status"] = this.status;
        data["locale"] = this.locale ? this.locale.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetHeroTranslation {
    name?: string | undefined;
    /** Title */
    title?: string | undefined;
    /** Tagline */
    tagline?: string | undefined;
    /** Description */
    description?: string | undefined;
    status?: string | undefined;
    locale?: GetHeroLocale;
}

export class GetHeroTranslationsResp implements IGetHeroTranslationsResp {
    /** Hero Id */
    id?: number;
    /** Hero Name */
    name?: string | undefined;
    /** Title */
    title?: string | undefined;
    /** Tagline */
    tagline?: string | undefined;
    /** Description */
    description?: string | undefined;
    translations?: GetHeroTranslation[] | undefined;

    constructor(data?: IGetHeroTranslationsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.title = _data["title"];
            this.tagline = _data["tagline"];
            this.description = _data["description"];
            if (Array.isArray(_data["translations"])) {
                this.translations = [] as any;
                for (let item of _data["translations"])
                    this.translations!.push(GetHeroTranslation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetHeroTranslationsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetHeroTranslationsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["title"] = this.title;
        data["tagline"] = this.tagline;
        data["description"] = this.description;
        if (Array.isArray(this.translations)) {
            data["translations"] = [];
            for (let item of this.translations)
                data["translations"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetHeroTranslationsResp {
    /** Hero Id */
    id?: number;
    /** Hero Name */
    name?: string | undefined;
    /** Title */
    title?: string | undefined;
    /** Tagline */
    tagline?: string | undefined;
    /** Description */
    description?: string | undefined;
    translations?: GetHeroTranslation[] | undefined;
}

export class GetHeroTranslationsRespApiRespBase implements IGetHeroTranslationsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetHeroTranslationsResp;

    constructor(data?: IGetHeroTranslationsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetHeroTranslationsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetHeroTranslationsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetHeroTranslationsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetHeroTranslationsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetHeroTranslationsResp;
}

export class GetHeroesResp implements IGetHeroesResp {
    heroes?: GetHero[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetHeroesResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["heroes"])) {
                this.heroes = [] as any;
                for (let item of _data["heroes"])
                    this.heroes!.push(GetHero.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetHeroesResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetHeroesResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.heroes)) {
            data["heroes"] = [];
            for (let item of this.heroes)
                data["heroes"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetHeroesResp {
    heroes?: GetHero[] | undefined;
    paging?: PagingRespBase;
}

export class GetHeroesRespApiRespBase implements IGetHeroesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetHeroesResp;

    constructor(data?: IGetHeroesRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetHeroesResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetHeroesRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetHeroesRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetHeroesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetHeroesResp;
}

export class GetHeroesTranslation implements IGetHeroesTranslation {
    name?: string | undefined;
    status?: string | undefined;
    locale?: GetHeroLocale;

    constructor(data?: IGetHeroesTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.status = _data["status"];
            this.locale = _data["locale"] ? GetHeroLocale.fromJS(_data["locale"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetHeroesTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new GetHeroesTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["status"] = this.status;
        data["locale"] = this.locale ? this.locale.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetHeroesTranslation {
    name?: string | undefined;
    status?: string | undefined;
    locale?: GetHeroLocale;
}

export class GetLanguagesResp implements IGetLanguagesResp {
    languageOptions?: LanguageOption[] | undefined;

    constructor(data?: IGetLanguagesResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["languageOptions"])) {
                this.languageOptions = [] as any;
                for (let item of _data["languageOptions"])
                    this.languageOptions!.push(LanguageOption.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetLanguagesResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetLanguagesResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.languageOptions)) {
            data["languageOptions"] = [];
            for (let item of this.languageOptions)
                data["languageOptions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetLanguagesResp {
    languageOptions?: LanguageOption[] | undefined;
}

export class GetLanguagesRespApiRespBase implements IGetLanguagesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetLanguagesResp;

    constructor(data?: IGetLanguagesRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetLanguagesResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetLanguagesRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetLanguagesRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetLanguagesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetLanguagesResp;
}

export class GetLocaleOptionsResp implements IGetLocaleOptionsResp {
    /** Locales */
    locales?: Int16Item[] | undefined;

    constructor(data?: IGetLocaleOptionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["locales"])) {
                this.locales = [] as any;
                for (let item of _data["locales"])
                    this.locales!.push(Int16Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetLocaleOptionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetLocaleOptionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.locales)) {
            data["locales"] = [];
            for (let item of this.locales)
                data["locales"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetLocaleOptionsResp {
    /** Locales */
    locales?: Int16Item[] | undefined;
}

export class GetLocaleOptionsRespApiRespBase implements IGetLocaleOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetLocaleOptionsResp;

    constructor(data?: IGetLocaleOptionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetLocaleOptionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetLocaleOptionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetLocaleOptionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetLocaleOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetLocaleOptionsResp;
}

export class GetMap implements IGetMap {
    /** Map Id */
    id?: number;
    name?: string | undefined;
    gameName?: string | undefined;
    translations?: GetMapTranslation[] | undefined;

    constructor(data?: IGetMap) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.gameName = _data["gameName"];
            if (Array.isArray(_data["translations"])) {
                this.translations = [] as any;
                for (let item of _data["translations"])
                    this.translations!.push(GetMapTranslation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetMap {
        data = typeof data === 'object' ? data : {};
        let result = new GetMap();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["gameName"] = this.gameName;
        if (Array.isArray(this.translations)) {
            data["translations"] = [];
            for (let item of this.translations)
                data["translations"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetMap {
    /** Map Id */
    id?: number;
    name?: string | undefined;
    gameName?: string | undefined;
    translations?: GetMapTranslation[] | undefined;
}

export class GetMapLocale implements IGetMapLocale {
    id?: number;
    bcp47Identifier?: string | undefined;
    displayName?: string | undefined;

    constructor(data?: IGetMapLocale) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.bcp47Identifier = _data["bcp47Identifier"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): GetMapLocale {
        data = typeof data === 'object' ? data : {};
        let result = new GetMapLocale();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["bcp47Identifier"] = this.bcp47Identifier;
        data["displayName"] = this.displayName;
        return data;
    }
}

export interface IGetMapLocale {
    id?: number;
    bcp47Identifier?: string | undefined;
    displayName?: string | undefined;
}

export class GetMapResp implements IGetMapResp {
    /** Map Id */
    id?: number;
    gameId?: number;
    name?: string | undefined;
    imageFileName?: string | undefined;

    constructor(data?: IGetMapResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.gameId = _data["gameId"];
            this.name = _data["name"];
            this.imageFileName = _data["imageFileName"];
        }
    }

    static fromJS(data: any): GetMapResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetMapResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["gameId"] = this.gameId;
        data["name"] = this.name;
        data["imageFileName"] = this.imageFileName;
        return data;
    }
}

export interface IGetMapResp {
    /** Map Id */
    id?: number;
    gameId?: number;
    name?: string | undefined;
    imageFileName?: string | undefined;
}

export class GetMapRespApiRespBase implements IGetMapRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetMapResp;

    constructor(data?: IGetMapRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetMapResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMapRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetMapRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetMapRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetMapResp;
}

export class GetMapTranslation implements IGetMapTranslation {
    name?: string | undefined;
    status?: string | undefined;
    locale?: GetMapLocale;

    constructor(data?: IGetMapTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.status = _data["status"];
            this.locale = _data["locale"] ? GetMapLocale.fromJS(_data["locale"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMapTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new GetMapTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["status"] = this.status;
        data["locale"] = this.locale ? this.locale.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetMapTranslation {
    name?: string | undefined;
    status?: string | undefined;
    locale?: GetMapLocale;
}

export class GetMapTranslationsResp implements IGetMapTranslationsResp {
    id?: number;
    name?: string | undefined;
    translations?: GetMapTranslation[] | undefined;

    constructor(data?: IGetMapTranslationsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["translations"])) {
                this.translations = [] as any;
                for (let item of _data["translations"])
                    this.translations!.push(GetMapTranslation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetMapTranslationsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetMapTranslationsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.translations)) {
            data["translations"] = [];
            for (let item of this.translations)
                data["translations"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetMapTranslationsResp {
    id?: number;
    name?: string | undefined;
    translations?: GetMapTranslation[] | undefined;
}

export class GetMapTranslationsRespApiRespBase implements IGetMapTranslationsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetMapTranslationsResp;

    constructor(data?: IGetMapTranslationsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetMapTranslationsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMapTranslationsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetMapTranslationsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetMapTranslationsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetMapTranslationsResp;
}

export class GetMapsResp implements IGetMapsResp {
    maps?: GetMap[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetMapsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["maps"])) {
                this.maps = [] as any;
                for (let item of _data["maps"])
                    this.maps!.push(GetMap.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMapsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetMapsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.maps)) {
            data["maps"] = [];
            for (let item of this.maps)
                data["maps"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetMapsResp {
    maps?: GetMap[] | undefined;
    paging?: PagingRespBase;
}

export class GetMapsRespApiRespBase implements IGetMapsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetMapsResp;

    constructor(data?: IGetMapsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetMapsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMapsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetMapsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetMapsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetMapsResp;
}

export class GetMediaItems implements IGetMediaItems {
    broadcastTalentId?: number;
    mediaItemId?: number;
    title?: string | undefined;
    type?: string | undefined;
    urlSafeTitle?: string | undefined;
    viewCount?: number;

    constructor(data?: IGetMediaItems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.broadcastTalentId = _data["broadcastTalentId"];
            this.mediaItemId = _data["mediaItemId"];
            this.title = _data["title"];
            this.type = _data["type"];
            this.urlSafeTitle = _data["urlSafeTitle"];
            this.viewCount = _data["viewCount"];
        }
    }

    static fromJS(data: any): GetMediaItems {
        data = typeof data === 'object' ? data : {};
        let result = new GetMediaItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["broadcastTalentId"] = this.broadcastTalentId;
        data["mediaItemId"] = this.mediaItemId;
        data["title"] = this.title;
        data["type"] = this.type;
        data["urlSafeTitle"] = this.urlSafeTitle;
        data["viewCount"] = this.viewCount;
        return data;
    }
}

export interface IGetMediaItems {
    broadcastTalentId?: number;
    mediaItemId?: number;
    title?: string | undefined;
    type?: string | undefined;
    urlSafeTitle?: string | undefined;
    viewCount?: number;
}

export class GetMediaItemsResp implements IGetMediaItemsResp {
    mediaItems?: GetMediaItems[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetMediaItemsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["mediaItems"])) {
                this.mediaItems = [] as any;
                for (let item of _data["mediaItems"])
                    this.mediaItems!.push(GetMediaItems.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMediaItemsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetMediaItemsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.mediaItems)) {
            data["mediaItems"] = [];
            for (let item of this.mediaItems)
                data["mediaItems"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetMediaItemsResp {
    mediaItems?: GetMediaItems[] | undefined;
    paging?: PagingRespBase;
}

export class GetMediaItemsRespApiRespBase implements IGetMediaItemsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetMediaItemsResp;

    constructor(data?: IGetMediaItemsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetMediaItemsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMediaItemsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetMediaItemsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetMediaItemsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetMediaItemsResp;
}

export class GetMediaVodHostOptionsResp implements IGetMediaVodHostOptionsResp {
    /** Hosts */
    hosts?: Int16Item[] | undefined;

    constructor(data?: IGetMediaVodHostOptionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["hosts"])) {
                this.hosts = [] as any;
                for (let item of _data["hosts"])
                    this.hosts!.push(Int16Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetMediaVodHostOptionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetMediaVodHostOptionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.hosts)) {
            data["hosts"] = [];
            for (let item of this.hosts)
                data["hosts"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetMediaVodHostOptionsResp {
    /** Hosts */
    hosts?: Int16Item[] | undefined;
}

export class GetMediaVodResp implements IGetMediaVodResp {
    /** Vod id */
    vodId!: number;
    /** Vod title */
    title!: string;
    /** Related site sections */
    siteSections!: Int16Item[];
    /** Host id */
    hostId!: number;
    /** Host name */
    readonly hostName!: string;
    /** Host video id */
    hostVideoId!: string;
    /** Start time */
    startTime!: number;
    /** Description */
    description?: string | undefined;
    /** Tags */
    tags?: Int32Item[] | undefined;
    /** Is in game */
    isInGame!: boolean;
    /** Is featured */
    isFeatured!: boolean;
    /** Related players */
    players?: Int32Item[] | undefined;
    /** Related teams */
    teams?: Int32Item[] | undefined;

    constructor(data?: IGetMediaVodResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.siteSections = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vodId = _data["vodId"];
            this.title = _data["title"];
            if (Array.isArray(_data["siteSections"])) {
                this.siteSections = [] as any;
                for (let item of _data["siteSections"])
                    this.siteSections!.push(Int16Item.fromJS(item));
            }
            this.hostId = _data["hostId"];
            (<any>this).hostName = _data["hostName"];
            this.hostVideoId = _data["hostVideoId"];
            this.startTime = _data["startTime"];
            this.description = _data["description"];
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(Int32Item.fromJS(item));
            }
            this.isInGame = _data["isInGame"];
            this.isFeatured = _data["isFeatured"];
            if (Array.isArray(_data["players"])) {
                this.players = [] as any;
                for (let item of _data["players"])
                    this.players!.push(Int32Item.fromJS(item));
            }
            if (Array.isArray(_data["teams"])) {
                this.teams = [] as any;
                for (let item of _data["teams"])
                    this.teams!.push(Int32Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetMediaVodResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetMediaVodResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vodId"] = this.vodId;
        data["title"] = this.title;
        if (Array.isArray(this.siteSections)) {
            data["siteSections"] = [];
            for (let item of this.siteSections)
                data["siteSections"].push(item.toJSON());
        }
        data["hostId"] = this.hostId;
        data["hostName"] = this.hostName;
        data["hostVideoId"] = this.hostVideoId;
        data["startTime"] = this.startTime;
        data["description"] = this.description;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["isInGame"] = this.isInGame;
        data["isFeatured"] = this.isFeatured;
        if (Array.isArray(this.players)) {
            data["players"] = [];
            for (let item of this.players)
                data["players"].push(item.toJSON());
        }
        if (Array.isArray(this.teams)) {
            data["teams"] = [];
            for (let item of this.teams)
                data["teams"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetMediaVodResp {
    /** Vod id */
    vodId: number;
    /** Vod title */
    title: string;
    /** Related site sections */
    siteSections: Int16Item[];
    /** Host id */
    hostId: number;
    /** Host name */
    hostName: string;
    /** Host video id */
    hostVideoId: string;
    /** Start time */
    startTime: number;
    /** Description */
    description?: string | undefined;
    /** Tags */
    tags?: Int32Item[] | undefined;
    /** Is in game */
    isInGame: boolean;
    /** Is featured */
    isFeatured: boolean;
    /** Related players */
    players?: Int32Item[] | undefined;
    /** Related teams */
    teams?: Int32Item[] | undefined;
}

export class GetMediaVodRespApiRespBase implements IGetMediaVodRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetMediaVodResp;

    constructor(data?: IGetMediaVodRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetMediaVodResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMediaVodRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetMediaVodRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetMediaVodRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetMediaVodResp;
}

export class GetMediaVodsResp implements IGetMediaVodsResp {
    /** Vods */
    vods?: MediaVodListItem[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetMediaVodsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["vods"])) {
                this.vods = [] as any;
                for (let item of _data["vods"])
                    this.vods!.push(MediaVodListItem.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMediaVodsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetMediaVodsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.vods)) {
            data["vods"] = [];
            for (let item of this.vods)
                data["vods"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetMediaVodsResp {
    /** Vods */
    vods?: MediaVodListItem[] | undefined;
    paging?: PagingRespBase;
}

export class GetMediaVodsRespApiRespBase implements IGetMediaVodsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetMediaVodsResp;

    constructor(data?: IGetMediaVodsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetMediaVodsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMediaVodsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetMediaVodsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetMediaVodsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetMediaVodsResp;
}

export class GetMode implements IGetMode {
    /** Mode Id */
    id?: number;
    name?: string | undefined;
    abbreviation?: string | undefined;
    gameName?: string | undefined;
    translations?: GetModeTranslation[] | undefined;

    constructor(data?: IGetMode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.abbreviation = _data["abbreviation"];
            this.gameName = _data["gameName"];
            if (Array.isArray(_data["translations"])) {
                this.translations = [] as any;
                for (let item of _data["translations"])
                    this.translations!.push(GetModeTranslation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetMode {
        data = typeof data === 'object' ? data : {};
        let result = new GetMode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["abbreviation"] = this.abbreviation;
        data["gameName"] = this.gameName;
        if (Array.isArray(this.translations)) {
            data["translations"] = [];
            for (let item of this.translations)
                data["translations"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetMode {
    /** Mode Id */
    id?: number;
    name?: string | undefined;
    abbreviation?: string | undefined;
    gameName?: string | undefined;
    translations?: GetModeTranslation[] | undefined;
}

export class GetModeLocale implements IGetModeLocale {
    id?: number;
    bcp47Identifier?: string | undefined;
    displayName?: string | undefined;

    constructor(data?: IGetModeLocale) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.bcp47Identifier = _data["bcp47Identifier"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): GetModeLocale {
        data = typeof data === 'object' ? data : {};
        let result = new GetModeLocale();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["bcp47Identifier"] = this.bcp47Identifier;
        data["displayName"] = this.displayName;
        return data;
    }
}

export interface IGetModeLocale {
    id?: number;
    bcp47Identifier?: string | undefined;
    displayName?: string | undefined;
}

export class GetModeResp implements IGetModeResp {
    /** Mode Id */
    id?: number;
    gameId?: number;
    name?: string | undefined;
    abbreviation?: string | undefined;

    constructor(data?: IGetModeResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.gameId = _data["gameId"];
            this.name = _data["name"];
            this.abbreviation = _data["abbreviation"];
        }
    }

    static fromJS(data: any): GetModeResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetModeResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["gameId"] = this.gameId;
        data["name"] = this.name;
        data["abbreviation"] = this.abbreviation;
        return data;
    }
}

export interface IGetModeResp {
    /** Mode Id */
    id?: number;
    gameId?: number;
    name?: string | undefined;
    abbreviation?: string | undefined;
}

export class GetModeRespApiRespBase implements IGetModeRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetModeResp;

    constructor(data?: IGetModeRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetModeResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetModeRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetModeRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetModeRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetModeResp;
}

export class GetModeTranslation implements IGetModeTranslation {
    name?: string | undefined;
    abbreviation?: string | undefined;
    status?: string | undefined;
    locale?: GetModeLocale;

    constructor(data?: IGetModeTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.abbreviation = _data["abbreviation"];
            this.status = _data["status"];
            this.locale = _data["locale"] ? GetModeLocale.fromJS(_data["locale"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetModeTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new GetModeTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["abbreviation"] = this.abbreviation;
        data["status"] = this.status;
        data["locale"] = this.locale ? this.locale.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetModeTranslation {
    name?: string | undefined;
    abbreviation?: string | undefined;
    status?: string | undefined;
    locale?: GetModeLocale;
}

export class GetModeTranslationsResp implements IGetModeTranslationsResp {
    id?: number;
    name?: string | undefined;
    abbreviation?: string | undefined;
    translations?: GetModeTranslation[] | undefined;

    constructor(data?: IGetModeTranslationsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.abbreviation = _data["abbreviation"];
            if (Array.isArray(_data["translations"])) {
                this.translations = [] as any;
                for (let item of _data["translations"])
                    this.translations!.push(GetModeTranslation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetModeTranslationsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetModeTranslationsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["abbreviation"] = this.abbreviation;
        if (Array.isArray(this.translations)) {
            data["translations"] = [];
            for (let item of this.translations)
                data["translations"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetModeTranslationsResp {
    id?: number;
    name?: string | undefined;
    abbreviation?: string | undefined;
    translations?: GetModeTranslation[] | undefined;
}

export class GetModeTranslationsRespApiRespBase implements IGetModeTranslationsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetModeTranslationsResp;

    constructor(data?: IGetModeTranslationsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetModeTranslationsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetModeTranslationsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetModeTranslationsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetModeTranslationsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetModeTranslationsResp;
}

export class GetModesResp implements IGetModesResp {
    modes?: GetMode[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetModesResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["modes"])) {
                this.modes = [] as any;
                for (let item of _data["modes"])
                    this.modes!.push(GetMode.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetModesResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetModesResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.modes)) {
            data["modes"] = [];
            for (let item of this.modes)
                data["modes"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetModesResp {
    modes?: GetMode[] | undefined;
    paging?: PagingRespBase;
}

export class GetModesRespApiRespBase implements IGetModesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetModesResp;

    constructor(data?: IGetModesRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetModesResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetModesRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetModesRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetModesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetModesResp;
}

export class GetNotificationTemplateResp implements IGetNotificationTemplateResp {
    detail?: NotificationTemplateDetail;
    arguments?: NotificationTemplateArgument[] | undefined;

    constructor(data?: IGetNotificationTemplateResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.detail = _data["detail"] ? NotificationTemplateDetail.fromJS(_data["detail"]) : <any>undefined;
            if (Array.isArray(_data["arguments"])) {
                this.arguments = [] as any;
                for (let item of _data["arguments"])
                    this.arguments!.push(NotificationTemplateArgument.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationTemplateResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetNotificationTemplateResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["detail"] = this.detail ? this.detail.toJSON() : <any>undefined;
        if (Array.isArray(this.arguments)) {
            data["arguments"] = [];
            for (let item of this.arguments)
                data["arguments"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetNotificationTemplateResp {
    detail?: NotificationTemplateDetail;
    arguments?: NotificationTemplateArgument[] | undefined;
}

export class GetNotificationTemplateRespApiRespBase implements IGetNotificationTemplateRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetNotificationTemplateResp;

    constructor(data?: IGetNotificationTemplateRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetNotificationTemplateResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetNotificationTemplateRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetNotificationTemplateRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetNotificationTemplateRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetNotificationTemplateResp;
}

export class GetNotificationTemplatesResp implements IGetNotificationTemplatesResp {
    /** Notification Templates */
    notificationTemplates?: NotificationTemplateListItem[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetNotificationTemplatesResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["notificationTemplates"])) {
                this.notificationTemplates = [] as any;
                for (let item of _data["notificationTemplates"])
                    this.notificationTemplates!.push(NotificationTemplateListItem.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetNotificationTemplatesResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetNotificationTemplatesResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.notificationTemplates)) {
            data["notificationTemplates"] = [];
            for (let item of this.notificationTemplates)
                data["notificationTemplates"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetNotificationTemplatesResp {
    /** Notification Templates */
    notificationTemplates?: NotificationTemplateListItem[] | undefined;
    paging?: PagingRespBase;
}

export class GetNotificationTemplatesRespApiRespBase implements IGetNotificationTemplatesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetNotificationTemplatesResp;

    constructor(data?: IGetNotificationTemplatesRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetNotificationTemplatesResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetNotificationTemplatesRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetNotificationTemplatesRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetNotificationTemplatesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetNotificationTemplatesResp;
}

export class GetNotificationTypeOptionsResp implements IGetNotificationTypeOptionsResp {
    /** Notification Type Options */
    notificationTypeOptions?: Int16Item[] | undefined;

    constructor(data?: IGetNotificationTypeOptionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["notificationTypeOptions"])) {
                this.notificationTypeOptions = [] as any;
                for (let item of _data["notificationTypeOptions"])
                    this.notificationTypeOptions!.push(Int16Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationTypeOptionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetNotificationTypeOptionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.notificationTypeOptions)) {
            data["notificationTypeOptions"] = [];
            for (let item of this.notificationTypeOptions)
                data["notificationTypeOptions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetNotificationTypeOptionsResp {
    /** Notification Type Options */
    notificationTypeOptions?: Int16Item[] | undefined;
}

export class GetNotificationTypeOptionsRespApiRespBase implements IGetNotificationTypeOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetNotificationTypeOptionsResp;

    constructor(data?: IGetNotificationTypeOptionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetNotificationTypeOptionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetNotificationTypeOptionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetNotificationTypeOptionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetNotificationTypeOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetNotificationTypeOptionsResp;
}

export class GetOneSignalAppResp implements IGetOneSignalAppResp {
    oneSignalAppDetail?: OneSignalAppListItem;

    constructor(data?: IGetOneSignalAppResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oneSignalAppDetail = _data["oneSignalAppDetail"] ? OneSignalAppListItem.fromJS(_data["oneSignalAppDetail"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetOneSignalAppResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetOneSignalAppResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oneSignalAppDetail"] = this.oneSignalAppDetail ? this.oneSignalAppDetail.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetOneSignalAppResp {
    oneSignalAppDetail?: OneSignalAppListItem;
}

export class GetOneSignalAppRespApiRespBase implements IGetOneSignalAppRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetOneSignalAppResp;

    constructor(data?: IGetOneSignalAppRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetOneSignalAppResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetOneSignalAppRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetOneSignalAppRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetOneSignalAppRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetOneSignalAppResp;
}

export class GetOneSignalAppsResp implements IGetOneSignalAppsResp {
    /** Messaging One Signal Apps */
    onesignalApps?: OneSignalAppListItem[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetOneSignalAppsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["onesignalApps"])) {
                this.onesignalApps = [] as any;
                for (let item of _data["onesignalApps"])
                    this.onesignalApps!.push(OneSignalAppListItem.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetOneSignalAppsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetOneSignalAppsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.onesignalApps)) {
            data["onesignalApps"] = [];
            for (let item of this.onesignalApps)
                data["onesignalApps"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetOneSignalAppsResp {
    /** Messaging One Signal Apps */
    onesignalApps?: OneSignalAppListItem[] | undefined;
    paging?: PagingRespBase;
}

export class GetOneSignalAppsRespApiRespBase implements IGetOneSignalAppsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetOneSignalAppsResp;

    constructor(data?: IGetOneSignalAppsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetOneSignalAppsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetOneSignalAppsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetOneSignalAppsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetOneSignalAppsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetOneSignalAppsResp;
}

export class GetPageResp implements IGetPageResp {
    /** Page id */
    pageId?: number;
    /** Frontend id */
    frontendId?: number;
    /** Title */
    title?: string | undefined;
    /** Content */
    content?: string | undefined;
    /** Extra css */
    extraCss?: string | undefined;
    /** Time spent */
    timeSpent?: number;
    /** Comments enabled */
    commentsEnabled?: boolean;

    constructor(data?: IGetPageResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageId = _data["pageId"];
            this.frontendId = _data["frontendId"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.extraCss = _data["extraCss"];
            this.timeSpent = _data["timeSpent"];
            this.commentsEnabled = _data["commentsEnabled"];
        }
    }

    static fromJS(data: any): GetPageResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetPageResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageId"] = this.pageId;
        data["frontendId"] = this.frontendId;
        data["title"] = this.title;
        data["content"] = this.content;
        data["extraCss"] = this.extraCss;
        data["timeSpent"] = this.timeSpent;
        data["commentsEnabled"] = this.commentsEnabled;
        return data;
    }
}

export interface IGetPageResp {
    /** Page id */
    pageId?: number;
    /** Frontend id */
    frontendId?: number;
    /** Title */
    title?: string | undefined;
    /** Content */
    content?: string | undefined;
    /** Extra css */
    extraCss?: string | undefined;
    /** Time spent */
    timeSpent?: number;
    /** Comments enabled */
    commentsEnabled?: boolean;
}

export class GetPageRespApiRespBase implements IGetPageRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetPageResp;

    constructor(data?: IGetPageRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetPageResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPageRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetPageRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetPageRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetPageResp;
}

export class GetPagesResp implements IGetPagesResp {
    /** Pages */
    pages?: PageListItem[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetPagesResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["pages"])) {
                this.pages = [] as any;
                for (let item of _data["pages"])
                    this.pages!.push(PageListItem.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPagesResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetPagesResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.pages)) {
            data["pages"] = [];
            for (let item of this.pages)
                data["pages"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetPagesResp {
    /** Pages */
    pages?: PageListItem[] | undefined;
    paging?: PagingRespBase;
}

export class GetPagesRespApiRespBase implements IGetPagesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetPagesResp;

    constructor(data?: IGetPagesRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetPagesResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPagesRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetPagesRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetPagesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetPagesResp;
}

export class GetPlayerMediaItems implements IGetPlayerMediaItems {
    playerId?: number;
    mediaItemId?: number;
    title?: string | undefined;
    type?: string | undefined;
    urlSafeTitle?: string | undefined;
    viewCount?: number;

    constructor(data?: IGetPlayerMediaItems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.playerId = _data["playerId"];
            this.mediaItemId = _data["mediaItemId"];
            this.title = _data["title"];
            this.type = _data["type"];
            this.urlSafeTitle = _data["urlSafeTitle"];
            this.viewCount = _data["viewCount"];
        }
    }

    static fromJS(data: any): GetPlayerMediaItems {
        data = typeof data === 'object' ? data : {};
        let result = new GetPlayerMediaItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["playerId"] = this.playerId;
        data["mediaItemId"] = this.mediaItemId;
        data["title"] = this.title;
        data["type"] = this.type;
        data["urlSafeTitle"] = this.urlSafeTitle;
        data["viewCount"] = this.viewCount;
        return data;
    }
}

export interface IGetPlayerMediaItems {
    playerId?: number;
    mediaItemId?: number;
    title?: string | undefined;
    type?: string | undefined;
    urlSafeTitle?: string | undefined;
    viewCount?: number;
}

export class GetPlayerMediaItemsResp implements IGetPlayerMediaItemsResp {
    mediaItems?: GetPlayerMediaItems[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetPlayerMediaItemsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["mediaItems"])) {
                this.mediaItems = [] as any;
                for (let item of _data["mediaItems"])
                    this.mediaItems!.push(GetPlayerMediaItems.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPlayerMediaItemsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetPlayerMediaItemsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.mediaItems)) {
            data["mediaItems"] = [];
            for (let item of this.mediaItems)
                data["mediaItems"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetPlayerMediaItemsResp {
    mediaItems?: GetPlayerMediaItems[] | undefined;
    paging?: PagingRespBase;
}

export class GetPlayerMediaItemsRespApiRespBase implements IGetPlayerMediaItemsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetPlayerMediaItemsResp;

    constructor(data?: IGetPlayerMediaItemsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetPlayerMediaItemsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPlayerMediaItemsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetPlayerMediaItemsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetPlayerMediaItemsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetPlayerMediaItemsResp;
}

export class GetPlayerResp implements IGetPlayerResp {
    playerId?: number;
    userId?: number | undefined;
    nickName?: string | undefined;
    isActive?: boolean;
    firstName?: string | undefined;
    lastName?: string | undefined;
    gender?: EnumGender;
    genderName?: string | undefined;
    dateOfBirth?: Date;
    countryId?: number | undefined;
    country?: string | undefined;
    initialRating?: number | undefined;
    primaryGameId?: number | undefined;
    primaryGame?: string | undefined;
    description?: string | undefined;
    imageFileName?: string | undefined;
    facebook?: string | undefined;
    twitter?: string | undefined;
    youtube?: string | undefined;

    constructor(data?: IGetPlayerResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.playerId = _data["playerId"];
            this.userId = _data["userId"];
            this.nickName = _data["nickName"];
            this.isActive = _data["isActive"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.gender = _data["gender"];
            this.genderName = _data["genderName"];
            this.dateOfBirth = _data["dateOfBirth"] ? parseDateOnly(_data["dateOfBirth"].toString()) : <any>undefined;
            this.countryId = _data["countryId"];
            this.country = _data["country"];
            this.initialRating = _data["initialRating"];
            this.primaryGameId = _data["primaryGameId"];
            this.primaryGame = _data["primaryGame"];
            this.description = _data["description"];
            this.imageFileName = _data["imageFileName"];
            this.facebook = _data["facebook"];
            this.twitter = _data["twitter"];
            this.youtube = _data["youtube"];
        }
    }

    static fromJS(data: any): GetPlayerResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetPlayerResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["playerId"] = this.playerId;
        data["userId"] = this.userId;
        data["nickName"] = this.nickName;
        data["isActive"] = this.isActive;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["gender"] = this.gender;
        data["genderName"] = this.genderName;
        data["dateOfBirth"] = this.dateOfBirth ? formatDate(this.dateOfBirth) : <any>undefined;
        data["countryId"] = this.countryId;
        data["country"] = this.country;
        data["initialRating"] = this.initialRating;
        data["primaryGameId"] = this.primaryGameId;
        data["primaryGame"] = this.primaryGame;
        data["description"] = this.description;
        data["imageFileName"] = this.imageFileName;
        data["facebook"] = this.facebook;
        data["twitter"] = this.twitter;
        data["youtube"] = this.youtube;
        return data;
    }
}

export interface IGetPlayerResp {
    playerId?: number;
    userId?: number | undefined;
    nickName?: string | undefined;
    isActive?: boolean;
    firstName?: string | undefined;
    lastName?: string | undefined;
    gender?: EnumGender;
    genderName?: string | undefined;
    dateOfBirth?: Date;
    countryId?: number | undefined;
    country?: string | undefined;
    initialRating?: number | undefined;
    primaryGameId?: number | undefined;
    primaryGame?: string | undefined;
    description?: string | undefined;
    imageFileName?: string | undefined;
    facebook?: string | undefined;
    twitter?: string | undefined;
    youtube?: string | undefined;
}

export class GetPlayerRespApiRespBase implements IGetPlayerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetPlayerResp;

    constructor(data?: IGetPlayerRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetPlayerResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPlayerRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetPlayerRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetPlayerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetPlayerResp;
}

export class GetPlayersDetail implements IGetPlayersDetail {
    playerId?: number;
    nickName?: string | undefined;
    name?: string | undefined;
    urlSafeName?: string | undefined;
    countryName?: string | undefined;
    countryCode?: string | undefined;
    primaryGameId?: number | undefined;
    primaryGame?: string | undefined;
    primaryGameUrlSafeName?: string | undefined;
    isActive?: boolean;
    createdAt?: number;

    constructor(data?: IGetPlayersDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.playerId = _data["playerId"];
            this.nickName = _data["nickName"];
            this.name = _data["name"];
            this.urlSafeName = _data["urlSafeName"];
            this.countryName = _data["countryName"];
            this.countryCode = _data["countryCode"];
            this.primaryGameId = _data["primaryGameId"];
            this.primaryGame = _data["primaryGame"];
            this.primaryGameUrlSafeName = _data["primaryGameUrlSafeName"];
            this.isActive = _data["isActive"];
            this.createdAt = _data["createdAt"];
        }
    }

    static fromJS(data: any): GetPlayersDetail {
        data = typeof data === 'object' ? data : {};
        let result = new GetPlayersDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["playerId"] = this.playerId;
        data["nickName"] = this.nickName;
        data["name"] = this.name;
        data["urlSafeName"] = this.urlSafeName;
        data["countryName"] = this.countryName;
        data["countryCode"] = this.countryCode;
        data["primaryGameId"] = this.primaryGameId;
        data["primaryGame"] = this.primaryGame;
        data["primaryGameUrlSafeName"] = this.primaryGameUrlSafeName;
        data["isActive"] = this.isActive;
        data["createdAt"] = this.createdAt;
        return data;
    }
}

export interface IGetPlayersDetail {
    playerId?: number;
    nickName?: string | undefined;
    name?: string | undefined;
    urlSafeName?: string | undefined;
    countryName?: string | undefined;
    countryCode?: string | undefined;
    primaryGameId?: number | undefined;
    primaryGame?: string | undefined;
    primaryGameUrlSafeName?: string | undefined;
    isActive?: boolean;
    createdAt?: number;
}

export class GetPlayersResp implements IGetPlayersResp {
    players?: GetPlayersDetail[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetPlayersResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["players"])) {
                this.players = [] as any;
                for (let item of _data["players"])
                    this.players!.push(GetPlayersDetail.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPlayersResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetPlayersResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.players)) {
            data["players"] = [];
            for (let item of this.players)
                data["players"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetPlayersResp {
    players?: GetPlayersDetail[] | undefined;
    paging?: PagingRespBase;
}

export class GetPlayersRespApiRespBase implements IGetPlayersRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetPlayersResp;

    constructor(data?: IGetPlayersRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetPlayersResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPlayersRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetPlayersRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetPlayersRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetPlayersResp;
}

export class GetRoleBlankPermissionsResp implements IGetRoleBlankPermissionsResp {
    /** Frontend permissions */
    frontendPermissions?: Int16Item[] | undefined;
    /** Backoffice permissions */
    backofficePermissions?: SimpleBackOfficePermissionItem[] | undefined;

    constructor(data?: IGetRoleBlankPermissionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["frontendPermissions"])) {
                this.frontendPermissions = [] as any;
                for (let item of _data["frontendPermissions"])
                    this.frontendPermissions!.push(Int16Item.fromJS(item));
            }
            if (Array.isArray(_data["backofficePermissions"])) {
                this.backofficePermissions = [] as any;
                for (let item of _data["backofficePermissions"])
                    this.backofficePermissions!.push(SimpleBackOfficePermissionItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRoleBlankPermissionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoleBlankPermissionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.frontendPermissions)) {
            data["frontendPermissions"] = [];
            for (let item of this.frontendPermissions)
                data["frontendPermissions"].push(item.toJSON());
        }
        if (Array.isArray(this.backofficePermissions)) {
            data["backofficePermissions"] = [];
            for (let item of this.backofficePermissions)
                data["backofficePermissions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetRoleBlankPermissionsResp {
    /** Frontend permissions */
    frontendPermissions?: Int16Item[] | undefined;
    /** Backoffice permissions */
    backofficePermissions?: SimpleBackOfficePermissionItem[] | undefined;
}

export class GetRoleBlankPermissionsRespApiRespBase implements IGetRoleBlankPermissionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetRoleBlankPermissionsResp;

    constructor(data?: IGetRoleBlankPermissionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetRoleBlankPermissionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRoleBlankPermissionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoleBlankPermissionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetRoleBlankPermissionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetRoleBlankPermissionsResp;
}

export class GetRoleOptionsByGroupResp implements IGetRoleOptionsByGroupResp {
    /** Roles */
    roles?: UInt32Item[] | undefined;

    constructor(data?: IGetRoleOptionsByGroupResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(UInt32Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRoleOptionsByGroupResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoleOptionsByGroupResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetRoleOptionsByGroupResp {
    /** Roles */
    roles?: UInt32Item[] | undefined;
}

export class GetRoleOptionsByGroupRespApiRespBase implements IGetRoleOptionsByGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetRoleOptionsByGroupResp;

    constructor(data?: IGetRoleOptionsByGroupRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetRoleOptionsByGroupResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRoleOptionsByGroupRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoleOptionsByGroupRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetRoleOptionsByGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetRoleOptionsByGroupResp;
}

export class GetRoleResp implements IGetRoleResp {
    /** Group id */
    groupId!: number;
    /** Role id */
    roleId!: number;
    /** Role name */
    name!: string;
    /** Group Name */
    groupName!: string;
    /** Remark */
    remark!: string;
    /** Role frontend permissions */
    frontendPermissions!: Int16Item[];
    /** Role backoffice permissions */
    backofficePermissions!: SimpleBackOfficePermissionItem[];

    constructor(data?: IGetRoleResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.frontendPermissions = [];
            this.backofficePermissions = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            this.roleId = _data["roleId"];
            this.name = _data["name"];
            this.groupName = _data["groupName"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["frontendPermissions"])) {
                this.frontendPermissions = [] as any;
                for (let item of _data["frontendPermissions"])
                    this.frontendPermissions!.push(Int16Item.fromJS(item));
            }
            if (Array.isArray(_data["backofficePermissions"])) {
                this.backofficePermissions = [] as any;
                for (let item of _data["backofficePermissions"])
                    this.backofficePermissions!.push(SimpleBackOfficePermissionItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRoleResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoleResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["roleId"] = this.roleId;
        data["name"] = this.name;
        data["groupName"] = this.groupName;
        data["remark"] = this.remark;
        if (Array.isArray(this.frontendPermissions)) {
            data["frontendPermissions"] = [];
            for (let item of this.frontendPermissions)
                data["frontendPermissions"].push(item.toJSON());
        }
        if (Array.isArray(this.backofficePermissions)) {
            data["backofficePermissions"] = [];
            for (let item of this.backofficePermissions)
                data["backofficePermissions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetRoleResp {
    /** Group id */
    groupId: number;
    /** Role id */
    roleId: number;
    /** Role name */
    name: string;
    /** Group Name */
    groupName: string;
    /** Remark */
    remark: string;
    /** Role frontend permissions */
    frontendPermissions: Int16Item[];
    /** Role backoffice permissions */
    backofficePermissions: SimpleBackOfficePermissionItem[];
}

export class GetRoleRespApiRespBase implements IGetRoleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetRoleResp;

    constructor(data?: IGetRoleRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetRoleResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRoleRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoleRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetRoleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetRoleResp;
}

export class GetRoleTemplatesByGroupResp implements IGetRoleTemplatesByGroupResp {
    /** Templates */
    templates?: RoleTemplate[] | undefined;

    constructor(data?: IGetRoleTemplatesByGroupResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["templates"])) {
                this.templates = [] as any;
                for (let item of _data["templates"])
                    this.templates!.push(RoleTemplate.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRoleTemplatesByGroupResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoleTemplatesByGroupResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.templates)) {
            data["templates"] = [];
            for (let item of this.templates)
                data["templates"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetRoleTemplatesByGroupResp {
    /** Templates */
    templates?: RoleTemplate[] | undefined;
}

export class GetRoleTemplatesByGroupRespApiRespBase implements IGetRoleTemplatesByGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetRoleTemplatesByGroupResp;

    constructor(data?: IGetRoleTemplatesByGroupRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetRoleTemplatesByGroupResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRoleTemplatesByGroupRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoleTemplatesByGroupRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetRoleTemplatesByGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetRoleTemplatesByGroupResp;
}

export class GetRolesByGroupResp implements IGetRolesByGroupResp {
    /** Roles */
    roles?: RoleListItem[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetRolesByGroupResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(RoleListItem.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRolesByGroupResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetRolesByGroupResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetRolesByGroupResp {
    /** Roles */
    roles?: RoleListItem[] | undefined;
    paging?: PagingRespBase;
}

export class GetRolesByGroupRespApiRespBase implements IGetRolesByGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetRolesByGroupResp;

    constructor(data?: IGetRolesByGroupRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetRolesByGroupResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRolesByGroupRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetRolesByGroupRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetRolesByGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetRolesByGroupResp;
}

export class GetServerOptionsResp implements IGetServerOptionsResp {
    serverId?: number;
    gameId?: number;
    name?: string | undefined;
    isFrozen?: boolean;

    constructor(data?: IGetServerOptionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.serverId = _data["serverId"];
            this.gameId = _data["gameId"];
            this.name = _data["name"];
            this.isFrozen = _data["isFrozen"];
        }
    }

    static fromJS(data: any): GetServerOptionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetServerOptionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["serverId"] = this.serverId;
        data["gameId"] = this.gameId;
        data["name"] = this.name;
        data["isFrozen"] = this.isFrozen;
        return data;
    }
}

export interface IGetServerOptionsResp {
    serverId?: number;
    gameId?: number;
    name?: string | undefined;
    isFrozen?: boolean;
}

export class GetServerOptionsRespApiRespBase implements IGetServerOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetServerOptionsResp;

    constructor(data?: IGetServerOptionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetServerOptionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetServerOptionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetServerOptionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetServerOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetServerOptionsResp;
}

export class GetServerResp implements IGetServerResp {
    id?: number;
    name?: string | undefined;
    isFrozen?: boolean;
    accountNameFormat?: string | undefined;
    accountNameRegex?: string | undefined;
    gameId?: number;

    constructor(data?: IGetServerResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.isFrozen = _data["isFrozen"];
            this.accountNameFormat = _data["accountNameFormat"];
            this.accountNameRegex = _data["accountNameRegex"];
            this.gameId = _data["gameId"];
        }
    }

    static fromJS(data: any): GetServerResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetServerResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["isFrozen"] = this.isFrozen;
        data["accountNameFormat"] = this.accountNameFormat;
        data["accountNameRegex"] = this.accountNameRegex;
        data["gameId"] = this.gameId;
        return data;
    }
}

export interface IGetServerResp {
    id?: number;
    name?: string | undefined;
    isFrozen?: boolean;
    accountNameFormat?: string | undefined;
    accountNameRegex?: string | undefined;
    gameId?: number;
}

export class GetServerRespApiRespBase implements IGetServerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetServerResp;

    constructor(data?: IGetServerRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetServerResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetServerRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetServerRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetServerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetServerResp;
}

export class GetServers implements IGetServers {
    id?: number;
    name?: string | undefined;
    gameId?: number;
    isFrozen?: boolean;
    accountNameFormat?: string | undefined;
    gameName?: string | undefined;
    gameIconImageUrl?: string | undefined;

    constructor(data?: IGetServers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.gameId = _data["gameId"];
            this.isFrozen = _data["isFrozen"];
            this.accountNameFormat = _data["accountNameFormat"];
            this.gameName = _data["gameName"];
            this.gameIconImageUrl = _data["gameIconImageUrl"];
        }
    }

    static fromJS(data: any): GetServers {
        data = typeof data === 'object' ? data : {};
        let result = new GetServers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["gameId"] = this.gameId;
        data["isFrozen"] = this.isFrozen;
        data["accountNameFormat"] = this.accountNameFormat;
        data["gameName"] = this.gameName;
        data["gameIconImageUrl"] = this.gameIconImageUrl;
        return data;
    }
}

export interface IGetServers {
    id?: number;
    name?: string | undefined;
    gameId?: number;
    isFrozen?: boolean;
    accountNameFormat?: string | undefined;
    gameName?: string | undefined;
    gameIconImageUrl?: string | undefined;
}

export class GetServersResp implements IGetServersResp {
    servers?: GetServers[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetServersResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["servers"])) {
                this.servers = [] as any;
                for (let item of _data["servers"])
                    this.servers!.push(GetServers.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetServersResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetServersResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.servers)) {
            data["servers"] = [];
            for (let item of this.servers)
                data["servers"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetServersResp {
    servers?: GetServers[] | undefined;
    paging?: PagingRespBase;
}

export class GetServersRespApiRespBase implements IGetServersRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetServersResp;

    constructor(data?: IGetServersRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetServersResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetServersRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetServersRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetServersRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetServersResp;
}

export class GetSide implements IGetSide {
    /** Side Id */
    id?: number;
    name?: string | undefined;
    gameName?: string | undefined;
    translations?: GetSideTranslation[] | undefined;

    constructor(data?: IGetSide) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.gameName = _data["gameName"];
            if (Array.isArray(_data["translations"])) {
                this.translations = [] as any;
                for (let item of _data["translations"])
                    this.translations!.push(GetSideTranslation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetSide {
        data = typeof data === 'object' ? data : {};
        let result = new GetSide();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["gameName"] = this.gameName;
        if (Array.isArray(this.translations)) {
            data["translations"] = [];
            for (let item of this.translations)
                data["translations"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetSide {
    /** Side Id */
    id?: number;
    name?: string | undefined;
    gameName?: string | undefined;
    translations?: GetSideTranslation[] | undefined;
}

export class GetSideLocale implements IGetSideLocale {
    id?: number;
    bcp47Identifier?: string | undefined;
    displayName?: string | undefined;

    constructor(data?: IGetSideLocale) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.bcp47Identifier = _data["bcp47Identifier"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): GetSideLocale {
        data = typeof data === 'object' ? data : {};
        let result = new GetSideLocale();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["bcp47Identifier"] = this.bcp47Identifier;
        data["displayName"] = this.displayName;
        return data;
    }
}

export interface IGetSideLocale {
    id?: number;
    bcp47Identifier?: string | undefined;
    displayName?: string | undefined;
}

export class GetSideResp implements IGetSideResp {
    /** Side Id */
    id?: number;
    gameId?: number;
    name?: string | undefined;
    iconFileName?: string | undefined;

    constructor(data?: IGetSideResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.gameId = _data["gameId"];
            this.name = _data["name"];
            this.iconFileName = _data["iconFileName"];
        }
    }

    static fromJS(data: any): GetSideResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetSideResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["gameId"] = this.gameId;
        data["name"] = this.name;
        data["iconFileName"] = this.iconFileName;
        return data;
    }
}

export interface IGetSideResp {
    /** Side Id */
    id?: number;
    gameId?: number;
    name?: string | undefined;
    iconFileName?: string | undefined;
}

export class GetSideRespApiRespBase implements IGetSideRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetSideResp;

    constructor(data?: IGetSideRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetSideResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSideRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetSideRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetSideRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetSideResp;
}

export class GetSideTranslation implements IGetSideTranslation {
    name?: string | undefined;
    status?: string | undefined;
    locale?: GetSideLocale;

    constructor(data?: IGetSideTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.status = _data["status"];
            this.locale = _data["locale"] ? GetSideLocale.fromJS(_data["locale"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSideTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new GetSideTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["status"] = this.status;
        data["locale"] = this.locale ? this.locale.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetSideTranslation {
    name?: string | undefined;
    status?: string | undefined;
    locale?: GetSideLocale;
}

export class GetSideTranslationsResp implements IGetSideTranslationsResp {
    id?: number;
    name?: string | undefined;
    translations?: GetSideTranslation[] | undefined;

    constructor(data?: IGetSideTranslationsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["translations"])) {
                this.translations = [] as any;
                for (let item of _data["translations"])
                    this.translations!.push(GetSideTranslation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetSideTranslationsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetSideTranslationsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.translations)) {
            data["translations"] = [];
            for (let item of this.translations)
                data["translations"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetSideTranslationsResp {
    id?: number;
    name?: string | undefined;
    translations?: GetSideTranslation[] | undefined;
}

export class GetSideTranslationsRespApiRespBase implements IGetSideTranslationsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetSideTranslationsResp;

    constructor(data?: IGetSideTranslationsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetSideTranslationsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSideTranslationsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetSideTranslationsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetSideTranslationsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetSideTranslationsResp;
}

export class GetSidesResp implements IGetSidesResp {
    sides?: GetSide[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetSidesResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["sides"])) {
                this.sides = [] as any;
                for (let item of _data["sides"])
                    this.sides!.push(GetSide.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSidesResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetSidesResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sides)) {
            data["sides"] = [];
            for (let item of this.sides)
                data["sides"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetSidesResp {
    sides?: GetSide[] | undefined;
    paging?: PagingRespBase;
}

export class GetSidesRespApiRespBase implements IGetSidesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetSidesResp;

    constructor(data?: IGetSidesRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetSidesResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSidesRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetSidesRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetSidesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetSidesResp;
}

export class GetSiteSectionResp implements IGetSiteSectionResp {
    id?: number;
    gameId?: number | undefined;
    name?: string | undefined;
    hidden?: boolean;
    urlSafeName?: string | undefined;
    position?: number;
    headerImageUrl?: string | undefined;
    backGroundImageUrl?: string | undefined;
    iconImageUrl?: string | undefined;
    logoImageUrl?: string | undefined;

    constructor(data?: IGetSiteSectionResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.gameId = _data["gameId"];
            this.name = _data["name"];
            this.hidden = _data["hidden"];
            this.urlSafeName = _data["urlSafeName"];
            this.position = _data["position"];
            this.headerImageUrl = _data["headerImageUrl"];
            this.backGroundImageUrl = _data["backGroundImageUrl"];
            this.iconImageUrl = _data["iconImageUrl"];
            this.logoImageUrl = _data["logoImageUrl"];
        }
    }

    static fromJS(data: any): GetSiteSectionResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetSiteSectionResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["gameId"] = this.gameId;
        data["name"] = this.name;
        data["hidden"] = this.hidden;
        data["urlSafeName"] = this.urlSafeName;
        data["position"] = this.position;
        data["headerImageUrl"] = this.headerImageUrl;
        data["backGroundImageUrl"] = this.backGroundImageUrl;
        data["iconImageUrl"] = this.iconImageUrl;
        data["logoImageUrl"] = this.logoImageUrl;
        return data;
    }
}

export interface IGetSiteSectionResp {
    id?: number;
    gameId?: number | undefined;
    name?: string | undefined;
    hidden?: boolean;
    urlSafeName?: string | undefined;
    position?: number;
    headerImageUrl?: string | undefined;
    backGroundImageUrl?: string | undefined;
    iconImageUrl?: string | undefined;
    logoImageUrl?: string | undefined;
}

export class GetSiteSectionRespApiRespBase implements IGetSiteSectionRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetSiteSectionResp;

    constructor(data?: IGetSiteSectionRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetSiteSectionResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSiteSectionRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetSiteSectionRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetSiteSectionRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetSiteSectionResp;
}

export class GetSiteSections implements IGetSiteSections {
    id?: number;
    name?: string | undefined;
    urlSafeName?: string | undefined;
    hidden?: boolean;
    gameName?: string | undefined;
    gameUrlSafeName?: string | undefined;

    constructor(data?: IGetSiteSections) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.urlSafeName = _data["urlSafeName"];
            this.hidden = _data["hidden"];
            this.gameName = _data["gameName"];
            this.gameUrlSafeName = _data["gameUrlSafeName"];
        }
    }

    static fromJS(data: any): GetSiteSections {
        data = typeof data === 'object' ? data : {};
        let result = new GetSiteSections();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["urlSafeName"] = this.urlSafeName;
        data["hidden"] = this.hidden;
        data["gameName"] = this.gameName;
        data["gameUrlSafeName"] = this.gameUrlSafeName;
        return data;
    }
}

export interface IGetSiteSections {
    id?: number;
    name?: string | undefined;
    urlSafeName?: string | undefined;
    hidden?: boolean;
    gameName?: string | undefined;
    gameUrlSafeName?: string | undefined;
}

export class GetSiteSectionsOptionsResp implements IGetSiteSectionsOptionsResp {
    siteSectionOptions?: Int16Item[] | undefined;

    constructor(data?: IGetSiteSectionsOptionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["siteSectionOptions"])) {
                this.siteSectionOptions = [] as any;
                for (let item of _data["siteSectionOptions"])
                    this.siteSectionOptions!.push(Int16Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetSiteSectionsOptionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetSiteSectionsOptionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.siteSectionOptions)) {
            data["siteSectionOptions"] = [];
            for (let item of this.siteSectionOptions)
                data["siteSectionOptions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetSiteSectionsOptionsResp {
    siteSectionOptions?: Int16Item[] | undefined;
}

export class GetSiteSectionsOptionsRespApiRespBase implements IGetSiteSectionsOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetSiteSectionsOptionsResp;

    constructor(data?: IGetSiteSectionsOptionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetSiteSectionsOptionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSiteSectionsOptionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetSiteSectionsOptionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetSiteSectionsOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetSiteSectionsOptionsResp;
}

export class GetSiteSectionsResp implements IGetSiteSectionsResp {
    siteSections?: GetSiteSections[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetSiteSectionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["siteSections"])) {
                this.siteSections = [] as any;
                for (let item of _data["siteSections"])
                    this.siteSections!.push(GetSiteSections.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSiteSectionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetSiteSectionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.siteSections)) {
            data["siteSections"] = [];
            for (let item of this.siteSections)
                data["siteSections"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetSiteSectionsResp {
    siteSections?: GetSiteSections[] | undefined;
    paging?: PagingRespBase;
}

export class GetSiteSectionsRespApiRespBase implements IGetSiteSectionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetSiteSectionsResp;

    constructor(data?: IGetSiteSectionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetSiteSectionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSiteSectionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetSiteSectionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetSiteSectionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetSiteSectionsResp;
}

export class GetSponsorResp implements IGetSponsorResp {
    id?: number;
    name?: string | undefined;
    imageFileName?: string | undefined;
    description?: string | undefined;
    url?: string | undefined;

    constructor(data?: IGetSponsorResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.imageFileName = _data["imageFileName"];
            this.description = _data["description"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): GetSponsorResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetSponsorResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["imageFileName"] = this.imageFileName;
        data["description"] = this.description;
        data["url"] = this.url;
        return data;
    }
}

export interface IGetSponsorResp {
    id?: number;
    name?: string | undefined;
    imageFileName?: string | undefined;
    description?: string | undefined;
    url?: string | undefined;
}

export class GetSponsorRespApiRespBase implements IGetSponsorRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetSponsorResp;

    constructor(data?: IGetSponsorRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetSponsorResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSponsorRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetSponsorRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetSponsorRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetSponsorResp;
}

export class GetSponsors implements IGetSponsors {
    id?: number;
    name?: string | undefined;
    imageFileName?: string | undefined;
    urlSafeName?: string | undefined;
    url?: string | undefined;
    createdAt?: number;
    updatedAt?: number | undefined;
    createdBy?: number;
    userName?: string | undefined;

    constructor(data?: IGetSponsors) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.imageFileName = _data["imageFileName"];
            this.urlSafeName = _data["urlSafeName"];
            this.url = _data["url"];
            this.createdAt = _data["createdAt"];
            this.updatedAt = _data["updatedAt"];
            this.createdBy = _data["createdBy"];
            this.userName = _data["userName"];
        }
    }

    static fromJS(data: any): GetSponsors {
        data = typeof data === 'object' ? data : {};
        let result = new GetSponsors();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["imageFileName"] = this.imageFileName;
        data["urlSafeName"] = this.urlSafeName;
        data["url"] = this.url;
        data["createdAt"] = this.createdAt;
        data["updatedAt"] = this.updatedAt;
        data["createdBy"] = this.createdBy;
        data["userName"] = this.userName;
        return data;
    }
}

export interface IGetSponsors {
    id?: number;
    name?: string | undefined;
    imageFileName?: string | undefined;
    urlSafeName?: string | undefined;
    url?: string | undefined;
    createdAt?: number;
    updatedAt?: number | undefined;
    createdBy?: number;
    userName?: string | undefined;
}

export class GetSponsorsResp implements IGetSponsorsResp {
    sponsors?: GetSponsors[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetSponsorsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["sponsors"])) {
                this.sponsors = [] as any;
                for (let item of _data["sponsors"])
                    this.sponsors!.push(GetSponsors.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSponsorsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetSponsorsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sponsors)) {
            data["sponsors"] = [];
            for (let item of this.sponsors)
                data["sponsors"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetSponsorsResp {
    sponsors?: GetSponsors[] | undefined;
    paging?: PagingRespBase;
}

export class GetSponsorsRespApiRespBase implements IGetSponsorsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetSponsorsResp;

    constructor(data?: IGetSponsorsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetSponsorsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSponsorsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetSponsorsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetSponsorsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetSponsorsResp;
}

export class GetStateOptionsResp implements IGetStateOptionsResp {
    /** Func states */
    states?: ByteItem[] | undefined;

    constructor(data?: IGetStateOptionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["states"])) {
                this.states = [] as any;
                for (let item of _data["states"])
                    this.states!.push(ByteItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetStateOptionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetStateOptionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.states)) {
            data["states"] = [];
            for (let item of this.states)
                data["states"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetStateOptionsResp {
    /** Func states */
    states?: ByteItem[] | undefined;
}

export class GetStateOptionsRespApiRespBase implements IGetStateOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetStateOptionsResp;

    constructor(data?: IGetStateOptionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetStateOptionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetStateOptionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetStateOptionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetStateOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetStateOptionsResp;
}

export class GetStreamResp implements IGetStreamResp {
    id?: number;
    platform?: number;
    streamId?: string | undefined;
    streamUrl?: string | undefined;
    screenCapUrl?: string | undefined;
    gameId?: number;
    languageId?: number;
    isEventStream?: boolean;
    isProPlayer?: boolean;
    isCelebCaster?: boolean;
    nextBroadcastAt?: number | undefined;
    title?: string | undefined;
    isFeatured?: boolean;
    description?: string | undefined;
    tags?: MediaTag[] | undefined;

    constructor(data?: IGetStreamResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.platform = _data["platform"];
            this.streamId = _data["streamId"];
            this.streamUrl = _data["streamUrl"];
            this.screenCapUrl = _data["screenCapUrl"];
            this.gameId = _data["gameId"];
            this.languageId = _data["languageId"];
            this.isEventStream = _data["isEventStream"];
            this.isProPlayer = _data["isProPlayer"];
            this.isCelebCaster = _data["isCelebCaster"];
            this.nextBroadcastAt = _data["nextBroadcastAt"];
            this.title = _data["title"];
            this.isFeatured = _data["isFeatured"];
            this.description = _data["description"];
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(MediaTag.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetStreamResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetStreamResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["platform"] = this.platform;
        data["streamId"] = this.streamId;
        data["streamUrl"] = this.streamUrl;
        data["screenCapUrl"] = this.screenCapUrl;
        data["gameId"] = this.gameId;
        data["languageId"] = this.languageId;
        data["isEventStream"] = this.isEventStream;
        data["isProPlayer"] = this.isProPlayer;
        data["isCelebCaster"] = this.isCelebCaster;
        data["nextBroadcastAt"] = this.nextBroadcastAt;
        data["title"] = this.title;
        data["isFeatured"] = this.isFeatured;
        data["description"] = this.description;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetStreamResp {
    id?: number;
    platform?: number;
    streamId?: string | undefined;
    streamUrl?: string | undefined;
    screenCapUrl?: string | undefined;
    gameId?: number;
    languageId?: number;
    isEventStream?: boolean;
    isProPlayer?: boolean;
    isCelebCaster?: boolean;
    nextBroadcastAt?: number | undefined;
    title?: string | undefined;
    isFeatured?: boolean;
    description?: string | undefined;
    tags?: MediaTag[] | undefined;
}

export class GetStreamRespApiRespBase implements IGetStreamRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetStreamResp;

    constructor(data?: IGetStreamRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetStreamResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetStreamRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetStreamRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetStreamRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetStreamResp;
}

export class GetStreams implements IGetStreams {
    id?: number;
    title?: string | undefined;
    platform?: number;
    streamId?: string | undefined;
    streamUrl?: string | undefined;
    gameId?: number;
    isLive?: boolean;
    userId?: number;
    createdAt?: number;
    gameName?: string | undefined;
    gameUrlSafeName?: string | undefined;
    userName?: string | undefined;

    constructor(data?: IGetStreams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.platform = _data["platform"];
            this.streamId = _data["streamId"];
            this.streamUrl = _data["streamUrl"];
            this.gameId = _data["gameId"];
            this.isLive = _data["isLive"];
            this.userId = _data["userId"];
            this.createdAt = _data["createdAt"];
            this.gameName = _data["gameName"];
            this.gameUrlSafeName = _data["gameUrlSafeName"];
            this.userName = _data["userName"];
        }
    }

    static fromJS(data: any): GetStreams {
        data = typeof data === 'object' ? data : {};
        let result = new GetStreams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["platform"] = this.platform;
        data["streamId"] = this.streamId;
        data["streamUrl"] = this.streamUrl;
        data["gameId"] = this.gameId;
        data["isLive"] = this.isLive;
        data["userId"] = this.userId;
        data["createdAt"] = this.createdAt;
        data["gameName"] = this.gameName;
        data["gameUrlSafeName"] = this.gameUrlSafeName;
        data["userName"] = this.userName;
        return data;
    }
}

export interface IGetStreams {
    id?: number;
    title?: string | undefined;
    platform?: number;
    streamId?: string | undefined;
    streamUrl?: string | undefined;
    gameId?: number;
    isLive?: boolean;
    userId?: number;
    createdAt?: number;
    gameName?: string | undefined;
    gameUrlSafeName?: string | undefined;
    userName?: string | undefined;
}

export class GetStreamsResp implements IGetStreamsResp {
    streams?: GetStreams[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetStreamsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["streams"])) {
                this.streams = [] as any;
                for (let item of _data["streams"])
                    this.streams!.push(GetStreams.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetStreamsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetStreamsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.streams)) {
            data["streams"] = [];
            for (let item of this.streams)
                data["streams"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetStreamsResp {
    streams?: GetStreams[] | undefined;
    paging?: PagingRespBase;
}

export class GetStreamsRespApiRespBase implements IGetStreamsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetStreamsResp;

    constructor(data?: IGetStreamsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetStreamsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetStreamsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetStreamsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetStreamsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetStreamsResp;
}

export class GetSystemLogResp implements IGetSystemLogResp {
    log?: SystemLogDetail;

    constructor(data?: IGetSystemLogResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.log = _data["log"] ? SystemLogDetail.fromJS(_data["log"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSystemLogResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetSystemLogResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["log"] = this.log ? this.log.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetSystemLogResp {
    log?: SystemLogDetail;
}

export class GetSystemLogRespApiRespBase implements IGetSystemLogRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetSystemLogResp;

    constructor(data?: IGetSystemLogRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetSystemLogResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSystemLogRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetSystemLogRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetSystemLogRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetSystemLogResp;
}

export class GetSystemLogsResp implements IGetSystemLogsResp {
    /** Api Logs */
    logs?: SystemLogListItem[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetSystemLogsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["logs"])) {
                this.logs = [] as any;
                for (let item of _data["logs"])
                    this.logs!.push(SystemLogListItem.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSystemLogsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetSystemLogsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.logs)) {
            data["logs"] = [];
            for (let item of this.logs)
                data["logs"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetSystemLogsResp {
    /** Api Logs */
    logs?: SystemLogListItem[] | undefined;
    paging?: PagingRespBase;
}

export class GetSystemLogsRespApiRespBase implements IGetSystemLogsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetSystemLogsResp;

    constructor(data?: IGetSystemLogsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetSystemLogsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSystemLogsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetSystemLogsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetSystemLogsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetSystemLogsResp;
}

export class GetTeamPlayer implements IGetTeamPlayer {
    teamPlayerId?: number;
    playerId?: number;
    teamId?: number;
    playerName?: string | undefined;
    playerUrlSafeName?: string | undefined;
    joinDate?: number;
    leaveDate?: number | undefined;
    isHidden?: boolean;
    position?: string | undefined;

    constructor(data?: IGetTeamPlayer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.teamPlayerId = _data["teamPlayerId"];
            this.playerId = _data["playerId"];
            this.teamId = _data["teamId"];
            this.playerName = _data["playerName"];
            this.playerUrlSafeName = _data["playerUrlSafeName"];
            this.joinDate = _data["joinDate"];
            this.leaveDate = _data["leaveDate"];
            this.isHidden = _data["isHidden"];
            this.position = _data["position"];
        }
    }

    static fromJS(data: any): GetTeamPlayer {
        data = typeof data === 'object' ? data : {};
        let result = new GetTeamPlayer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["teamPlayerId"] = this.teamPlayerId;
        data["playerId"] = this.playerId;
        data["teamId"] = this.teamId;
        data["playerName"] = this.playerName;
        data["playerUrlSafeName"] = this.playerUrlSafeName;
        data["joinDate"] = this.joinDate;
        data["leaveDate"] = this.leaveDate;
        data["isHidden"] = this.isHidden;
        data["position"] = this.position;
        return data;
    }
}

export interface IGetTeamPlayer {
    teamPlayerId?: number;
    playerId?: number;
    teamId?: number;
    playerName?: string | undefined;
    playerUrlSafeName?: string | undefined;
    joinDate?: number;
    leaveDate?: number | undefined;
    isHidden?: boolean;
    position?: string | undefined;
}

export class GetTeamPlayerResp implements IGetTeamPlayerResp {
    teamPlayerId?: number;
    playerId?: number;
    teamId?: number;
    joinDate?: number;
    leaveDate?: number | undefined;
    isHidden?: boolean;

    constructor(data?: IGetTeamPlayerResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.teamPlayerId = _data["teamPlayerId"];
            this.playerId = _data["playerId"];
            this.teamId = _data["teamId"];
            this.joinDate = _data["joinDate"];
            this.leaveDate = _data["leaveDate"];
            this.isHidden = _data["isHidden"];
        }
    }

    static fromJS(data: any): GetTeamPlayerResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetTeamPlayerResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["teamPlayerId"] = this.teamPlayerId;
        data["playerId"] = this.playerId;
        data["teamId"] = this.teamId;
        data["joinDate"] = this.joinDate;
        data["leaveDate"] = this.leaveDate;
        data["isHidden"] = this.isHidden;
        return data;
    }
}

export interface IGetTeamPlayerResp {
    teamPlayerId?: number;
    playerId?: number;
    teamId?: number;
    joinDate?: number;
    leaveDate?: number | undefined;
    isHidden?: boolean;
}

export class GetTeamPlayerRespApiRespBase implements IGetTeamPlayerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetTeamPlayerResp;

    constructor(data?: IGetTeamPlayerRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetTeamPlayerResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTeamPlayerRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetTeamPlayerRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetTeamPlayerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetTeamPlayerResp;
}

export class GetTeamPlayersResp implements IGetTeamPlayersResp {
    players?: GetTeamPlayer[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetTeamPlayersResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["players"])) {
                this.players = [] as any;
                for (let item of _data["players"])
                    this.players!.push(GetTeamPlayer.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTeamPlayersResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetTeamPlayersResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.players)) {
            data["players"] = [];
            for (let item of this.players)
                data["players"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetTeamPlayersResp {
    players?: GetTeamPlayer[] | undefined;
    paging?: PagingRespBase;
}

export class GetTeamPlayersRespApiRespBase implements IGetTeamPlayersRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetTeamPlayersResp;

    constructor(data?: IGetTeamPlayersRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetTeamPlayersResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTeamPlayersRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetTeamPlayersRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetTeamPlayersRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetTeamPlayersResp;
}

export class GetTeamResp implements IGetTeamResp {
    teamId?: number;
    teamName?: string | undefined;
    teamTag?: string | undefined;
    ownerId?: number | undefined;
    ownerName?: string | undefined;
    captainId?: number | undefined;
    captainName?: string | undefined;
    manageId?: number | undefined;
    manageName?: string | undefined;
    excludedRankings?: boolean;
    imageFileName?: string | undefined;
    gameId?: number;
    gameName?: string | undefined;
    countryId?: number | undefined;
    countryName?: string | undefined;
    description?: string | undefined;
    facebook?: string | undefined;
    twitter?: string | undefined;
    youtube?: string | undefined;

    constructor(data?: IGetTeamResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.teamId = _data["teamId"];
            this.teamName = _data["teamName"];
            this.teamTag = _data["teamTag"];
            this.ownerId = _data["ownerId"];
            this.ownerName = _data["ownerName"];
            this.captainId = _data["captainId"];
            this.captainName = _data["captainName"];
            this.manageId = _data["manageId"];
            this.manageName = _data["manageName"];
            this.excludedRankings = _data["excludedRankings"];
            this.imageFileName = _data["imageFileName"];
            this.gameId = _data["gameId"];
            this.gameName = _data["gameName"];
            this.countryId = _data["countryId"];
            this.countryName = _data["countryName"];
            this.description = _data["description"];
            this.facebook = _data["facebook"];
            this.twitter = _data["twitter"];
            this.youtube = _data["youtube"];
        }
    }

    static fromJS(data: any): GetTeamResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetTeamResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["teamId"] = this.teamId;
        data["teamName"] = this.teamName;
        data["teamTag"] = this.teamTag;
        data["ownerId"] = this.ownerId;
        data["ownerName"] = this.ownerName;
        data["captainId"] = this.captainId;
        data["captainName"] = this.captainName;
        data["manageId"] = this.manageId;
        data["manageName"] = this.manageName;
        data["excludedRankings"] = this.excludedRankings;
        data["imageFileName"] = this.imageFileName;
        data["gameId"] = this.gameId;
        data["gameName"] = this.gameName;
        data["countryId"] = this.countryId;
        data["countryName"] = this.countryName;
        data["description"] = this.description;
        data["facebook"] = this.facebook;
        data["twitter"] = this.twitter;
        data["youtube"] = this.youtube;
        return data;
    }
}

export interface IGetTeamResp {
    teamId?: number;
    teamName?: string | undefined;
    teamTag?: string | undefined;
    ownerId?: number | undefined;
    ownerName?: string | undefined;
    captainId?: number | undefined;
    captainName?: string | undefined;
    manageId?: number | undefined;
    manageName?: string | undefined;
    excludedRankings?: boolean;
    imageFileName?: string | undefined;
    gameId?: number;
    gameName?: string | undefined;
    countryId?: number | undefined;
    countryName?: string | undefined;
    description?: string | undefined;
    facebook?: string | undefined;
    twitter?: string | undefined;
    youtube?: string | undefined;
}

export class GetTeamRespApiRespBase implements IGetTeamRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetTeamResp;

    constructor(data?: IGetTeamRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetTeamResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTeamRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetTeamRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetTeamRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetTeamResp;
}

export class GetTeamsDetail implements IGetTeamsDetail {
    teamId?: number;
    teamName?: string | undefined;
    teamTag?: string | undefined;
    countryId?: number | undefined;
    countryName?: string | undefined;
    countryCode?: string | undefined;
    gameId?: number | undefined;
    gameName?: string | undefined;
    gameUrlSafeName?: string | undefined;
    isRanked?: boolean;
    updatedAt?: number | undefined;
    updatedBy?: number | undefined;

    constructor(data?: IGetTeamsDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.teamId = _data["teamId"];
            this.teamName = _data["teamName"];
            this.teamTag = _data["teamTag"];
            this.countryId = _data["countryId"];
            this.countryName = _data["countryName"];
            this.countryCode = _data["countryCode"];
            this.gameId = _data["gameId"];
            this.gameName = _data["gameName"];
            this.gameUrlSafeName = _data["gameUrlSafeName"];
            this.isRanked = _data["isRanked"];
            this.updatedAt = _data["updatedAt"];
            this.updatedBy = _data["updatedBy"];
        }
    }

    static fromJS(data: any): GetTeamsDetail {
        data = typeof data === 'object' ? data : {};
        let result = new GetTeamsDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["teamId"] = this.teamId;
        data["teamName"] = this.teamName;
        data["teamTag"] = this.teamTag;
        data["countryId"] = this.countryId;
        data["countryName"] = this.countryName;
        data["countryCode"] = this.countryCode;
        data["gameId"] = this.gameId;
        data["gameName"] = this.gameName;
        data["gameUrlSafeName"] = this.gameUrlSafeName;
        data["isRanked"] = this.isRanked;
        data["updatedAt"] = this.updatedAt;
        data["updatedBy"] = this.updatedBy;
        return data;
    }
}

export interface IGetTeamsDetail {
    teamId?: number;
    teamName?: string | undefined;
    teamTag?: string | undefined;
    countryId?: number | undefined;
    countryName?: string | undefined;
    countryCode?: string | undefined;
    gameId?: number | undefined;
    gameName?: string | undefined;
    gameUrlSafeName?: string | undefined;
    isRanked?: boolean;
    updatedAt?: number | undefined;
    updatedBy?: number | undefined;
}

export class GetTeamsResp implements IGetTeamsResp {
    teams?: GetTeamsDetail[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetTeamsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["teams"])) {
                this.teams = [] as any;
                for (let item of _data["teams"])
                    this.teams!.push(GetTeamsDetail.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTeamsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetTeamsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.teams)) {
            data["teams"] = [];
            for (let item of this.teams)
                data["teams"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetTeamsResp {
    teams?: GetTeamsDetail[] | undefined;
    paging?: PagingRespBase;
}

export class GetTeamsRespApiRespBase implements IGetTeamsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetTeamsResp;

    constructor(data?: IGetTeamsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetTeamsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTeamsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetTeamsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetTeamsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetTeamsResp;
}

export class GetUserForPlayerResp implements IGetUserForPlayerResp {
    userId?: number;
    userName?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    countryId?: number | undefined;
    countryName?: string | undefined;
    dateOfBirth?: Date | undefined;
    gender?: EnumGender;
    primaryGameId?: number | undefined;
    primaryGame?: string | undefined;

    constructor(data?: IGetUserForPlayerResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.userName = _data["userName"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.countryId = _data["countryId"];
            this.countryName = _data["countryName"];
            this.dateOfBirth = _data["dateOfBirth"] ? parseDateOnly(_data["dateOfBirth"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.primaryGameId = _data["primaryGameId"];
            this.primaryGame = _data["primaryGame"];
        }
    }

    static fromJS(data: any): GetUserForPlayerResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserForPlayerResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["countryId"] = this.countryId;
        data["countryName"] = this.countryName;
        data["dateOfBirth"] = this.dateOfBirth ? formatDate(this.dateOfBirth) : <any>undefined;
        data["gender"] = this.gender;
        data["primaryGameId"] = this.primaryGameId;
        data["primaryGame"] = this.primaryGame;
        return data;
    }
}

export interface IGetUserForPlayerResp {
    userId?: number;
    userName?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    countryId?: number | undefined;
    countryName?: string | undefined;
    dateOfBirth?: Date | undefined;
    gender?: EnumGender;
    primaryGameId?: number | undefined;
    primaryGame?: string | undefined;
}

export class GetUserForPlayerRespApiRespBase implements IGetUserForPlayerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetUserForPlayerResp;

    constructor(data?: IGetUserForPlayerRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetUserForPlayerResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetUserForPlayerRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserForPlayerRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetUserForPlayerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetUserForPlayerResp;
}

export class GetUserFrontEnd implements IGetUserFrontEnd {
    frontendId?: number;
    name?: string | undefined;

    constructor(data?: IGetUserFrontEnd) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.frontendId = _data["frontendId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): GetUserFrontEnd {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserFrontEnd();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frontendId"] = this.frontendId;
        data["name"] = this.name;
        return data;
    }
}

export interface IGetUserFrontEnd {
    frontendId?: number;
    name?: string | undefined;
}

export class GetUserGroup implements IGetUserGroup {
    groupId?: number;
    name?: string | undefined;

    constructor(data?: IGetUserGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): GetUserGroup {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["name"] = this.name;
        return data;
    }
}

export interface IGetUserGroup {
    groupId?: number;
    name?: string | undefined;
}

export class GetUserResp implements IGetUserResp {
    userId?: number;
    userName?: string | undefined;
    password?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    city?: string | undefined;
    userTypeId?: number | undefined;
    userType?: string | undefined;
    countryId?: number | undefined;
    countryName?: string | undefined;
    dateOfBirth?: Date | undefined;
    gender?: EnumGender;
    aboutMe?: string | undefined;
    avatarImagePath?: string | undefined;
    userGroups?: GetUserGroup[] | undefined;
    userRoles?: GetUserRole[] | undefined;
    userFrontEnds?: GetUserFrontEnd[] | undefined;

    constructor(data?: IGetUserResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.city = _data["city"];
            this.userTypeId = _data["userTypeId"];
            this.userType = _data["userType"];
            this.countryId = _data["countryId"];
            this.countryName = _data["countryName"];
            this.dateOfBirth = _data["dateOfBirth"] ? parseDateOnly(_data["dateOfBirth"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.aboutMe = _data["aboutMe"];
            this.avatarImagePath = _data["avatarImagePath"];
            if (Array.isArray(_data["userGroups"])) {
                this.userGroups = [] as any;
                for (let item of _data["userGroups"])
                    this.userGroups!.push(GetUserGroup.fromJS(item));
            }
            if (Array.isArray(_data["userRoles"])) {
                this.userRoles = [] as any;
                for (let item of _data["userRoles"])
                    this.userRoles!.push(GetUserRole.fromJS(item));
            }
            if (Array.isArray(_data["userFrontEnds"])) {
                this.userFrontEnds = [] as any;
                for (let item of _data["userFrontEnds"])
                    this.userFrontEnds!.push(GetUserFrontEnd.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUserResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["city"] = this.city;
        data["userTypeId"] = this.userTypeId;
        data["userType"] = this.userType;
        data["countryId"] = this.countryId;
        data["countryName"] = this.countryName;
        data["dateOfBirth"] = this.dateOfBirth ? formatDate(this.dateOfBirth) : <any>undefined;
        data["gender"] = this.gender;
        data["aboutMe"] = this.aboutMe;
        data["avatarImagePath"] = this.avatarImagePath;
        if (Array.isArray(this.userGroups)) {
            data["userGroups"] = [];
            for (let item of this.userGroups)
                data["userGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.userRoles)) {
            data["userRoles"] = [];
            for (let item of this.userRoles)
                data["userRoles"].push(item.toJSON());
        }
        if (Array.isArray(this.userFrontEnds)) {
            data["userFrontEnds"] = [];
            for (let item of this.userFrontEnds)
                data["userFrontEnds"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetUserResp {
    userId?: number;
    userName?: string | undefined;
    password?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    city?: string | undefined;
    userTypeId?: number | undefined;
    userType?: string | undefined;
    countryId?: number | undefined;
    countryName?: string | undefined;
    dateOfBirth?: Date | undefined;
    gender?: EnumGender;
    aboutMe?: string | undefined;
    avatarImagePath?: string | undefined;
    userGroups?: GetUserGroup[] | undefined;
    userRoles?: GetUserRole[] | undefined;
    userFrontEnds?: GetUserFrontEnd[] | undefined;
}

export class GetUserRespApiRespBase implements IGetUserRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetUserResp;

    constructor(data?: IGetUserRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetUserResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetUserRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetUserRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetUserResp;
}

export class GetUserRole implements IGetUserRole {
    roleId?: number;
    name?: string | undefined;

    constructor(data?: IGetUserRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleId = _data["roleId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): GetUserRole {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["name"] = this.name;
        return data;
    }
}

export interface IGetUserRole {
    roleId?: number;
    name?: string | undefined;
}

export class GetUserSessionResp implements IGetUserSessionResp {
    userProfile?: UserProfile;
    menuList?: MenuItem[] | undefined;
    funcItem?: { [key: string]: { [key: string]: number; }; } | undefined;

    constructor(data?: IGetUserSessionResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userProfile = _data["userProfile"] ? UserProfile.fromJS(_data["userProfile"]) : <any>undefined;
            if (Array.isArray(_data["menuList"])) {
                this.menuList = [] as any;
                for (let item of _data["menuList"])
                    this.menuList!.push(MenuItem.fromJS(item));
            }
            if (_data["funcItem"]) {
                this.funcItem = {} as any;
                for (let key in _data["funcItem"]) {
                    if (_data["funcItem"].hasOwnProperty(key))
                        (<any>this.funcItem)![key] = _data["funcItem"][key] !== undefined ? _data["funcItem"][key] : {};
                }
            }
        }
    }

    static fromJS(data: any): GetUserSessionResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserSessionResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userProfile"] = this.userProfile ? this.userProfile.toJSON() : <any>undefined;
        if (Array.isArray(this.menuList)) {
            data["menuList"] = [];
            for (let item of this.menuList)
                data["menuList"].push(item.toJSON());
        }
        if (this.funcItem) {
            data["funcItem"] = {};
            for (let key in this.funcItem) {
                if (this.funcItem.hasOwnProperty(key))
                    (<any>data["funcItem"])[key] = (<any>this.funcItem)[key];
            }
        }
        return data;
    }
}

export interface IGetUserSessionResp {
    userProfile?: UserProfile;
    menuList?: MenuItem[] | undefined;
    funcItem?: { [key: string]: { [key: string]: number; }; } | undefined;
}

export class GetUserSessionRespApiRespBase implements IGetUserSessionRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetUserSessionResp;

    constructor(data?: IGetUserSessionRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetUserSessionResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetUserSessionRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserSessionRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetUserSessionRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetUserSessionResp;
}

export class GetUserTypeOptionsResp implements IGetUserTypeOptionsResp {
    userTypeOptions?: UserType[] | undefined;

    constructor(data?: IGetUserTypeOptionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["userTypeOptions"])) {
                this.userTypeOptions = [] as any;
                for (let item of _data["userTypeOptions"])
                    this.userTypeOptions!.push(UserType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUserTypeOptionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserTypeOptionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userTypeOptions)) {
            data["userTypeOptions"] = [];
            for (let item of this.userTypeOptions)
                data["userTypeOptions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetUserTypeOptionsResp {
    userTypeOptions?: UserType[] | undefined;
}

export class GetUserTypeOptionsRespApiRespBase implements IGetUserTypeOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetUserTypeOptionsResp;

    constructor(data?: IGetUserTypeOptionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetUserTypeOptionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetUserTypeOptionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserTypeOptionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetUserTypeOptionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetUserTypeOptionsResp;
}

export class GetUsers implements IGetUsers {
    userId?: number;
    userName?: string | undefined;
    updatedAt?: number;
    updatedUserName?: string | undefined;

    constructor(data?: IGetUsers) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.userName = _data["userName"];
            this.updatedAt = _data["updatedAt"];
            this.updatedUserName = _data["updatedUserName"];
        }
    }

    static fromJS(data: any): GetUsers {
        data = typeof data === 'object' ? data : {};
        let result = new GetUsers();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["updatedAt"] = this.updatedAt;
        data["updatedUserName"] = this.updatedUserName;
        return data;
    }
}

export interface IGetUsers {
    userId?: number;
    userName?: string | undefined;
    updatedAt?: number;
    updatedUserName?: string | undefined;
}

export class GetUsersByGroupResp implements IGetUsersByGroupResp {
    /** Users */
    users?: GroupUserListItem[] | undefined;

    constructor(data?: IGetUsersByGroupResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(GroupUserListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUsersByGroupResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetUsersByGroupResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetUsersByGroupResp {
    /** Users */
    users?: GroupUserListItem[] | undefined;
}

export class GetUsersByGroupRespApiRespBase implements IGetUsersByGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetUsersByGroupResp;

    constructor(data?: IGetUsersByGroupRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetUsersByGroupResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetUsersByGroupRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetUsersByGroupRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetUsersByGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetUsersByGroupResp;
}

export class GetUsersByRoleResp implements IGetUsersByRoleResp {
    /** Users */
    users?: RoleUserListItem[] | undefined;

    constructor(data?: IGetUsersByRoleResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(RoleUserListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUsersByRoleResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetUsersByRoleResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetUsersByRoleResp {
    /** Users */
    users?: RoleUserListItem[] | undefined;
}

export class GetUsersByRoleRespApiRespBase implements IGetUsersByRoleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetUsersByRoleResp;

    constructor(data?: IGetUsersByRoleRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetUsersByRoleResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetUsersByRoleRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetUsersByRoleRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetUsersByRoleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetUsersByRoleResp;
}

export class GetUsersResp implements IGetUsersResp {
    users?: GetUsers[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetUsersResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(GetUsers.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetUsersResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetUsersResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetUsersResp {
    users?: GetUsers[] | undefined;
    paging?: PagingRespBase;
}

export class GetUsersRespApiRespBase implements IGetUsersRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetUsersResp;

    constructor(data?: IGetUsersRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetUsersResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetUsersRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetUsersRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetUsersRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetUsersResp;
}

export class GetVenueResp implements IGetVenueResp {
    id?: number;
    city?: string | undefined;
    coordinates?: string | undefined;
    name?: string | undefined;
    imageFileName?: string | undefined;
    countryId?: number;
    address?: string | undefined;

    constructor(data?: IGetVenueResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.city = _data["city"];
            this.coordinates = _data["coordinates"];
            this.name = _data["name"];
            this.imageFileName = _data["imageFileName"];
            this.countryId = _data["countryId"];
            this.address = _data["address"];
        }
    }

    static fromJS(data: any): GetVenueResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetVenueResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["city"] = this.city;
        data["coordinates"] = this.coordinates;
        data["name"] = this.name;
        data["imageFileName"] = this.imageFileName;
        data["countryId"] = this.countryId;
        data["address"] = this.address;
        return data;
    }
}

export interface IGetVenueResp {
    id?: number;
    city?: string | undefined;
    coordinates?: string | undefined;
    name?: string | undefined;
    imageFileName?: string | undefined;
    countryId?: number;
    address?: string | undefined;
}

export class GetVenueRespApiRespBase implements IGetVenueRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetVenueResp;

    constructor(data?: IGetVenueRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetVenueResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetVenueRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetVenueRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetVenueRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetVenueResp;
}

export class GetVenues implements IGetVenues {
    id?: number;
    city?: string | undefined;
    coordinates?: string | undefined;
    readonly hasCoordinates?: boolean;
    name?: string | undefined;
    imageFileName?: string | undefined;
    readonly hasImage?: boolean;
    createdAt?: number;
    updatedAt?: number | undefined;
    countryName?: string | undefined;
    username?: string | undefined;

    constructor(data?: IGetVenues) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.city = _data["city"];
            this.coordinates = _data["coordinates"];
            (<any>this).hasCoordinates = _data["hasCoordinates"];
            this.name = _data["name"];
            this.imageFileName = _data["imageFileName"];
            (<any>this).hasImage = _data["hasImage"];
            this.createdAt = _data["createdAt"];
            this.updatedAt = _data["updatedAt"];
            this.countryName = _data["countryName"];
            this.username = _data["username"];
        }
    }

    static fromJS(data: any): GetVenues {
        data = typeof data === 'object' ? data : {};
        let result = new GetVenues();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["city"] = this.city;
        data["coordinates"] = this.coordinates;
        data["hasCoordinates"] = this.hasCoordinates;
        data["name"] = this.name;
        data["imageFileName"] = this.imageFileName;
        data["hasImage"] = this.hasImage;
        data["createdAt"] = this.createdAt;
        data["updatedAt"] = this.updatedAt;
        data["countryName"] = this.countryName;
        data["username"] = this.username;
        return data;
    }
}

export interface IGetVenues {
    id?: number;
    city?: string | undefined;
    coordinates?: string | undefined;
    hasCoordinates?: boolean;
    name?: string | undefined;
    imageFileName?: string | undefined;
    hasImage?: boolean;
    createdAt?: number;
    updatedAt?: number | undefined;
    countryName?: string | undefined;
    username?: string | undefined;
}

export class GetVenuesResp implements IGetVenuesResp {
    venues?: GetVenues[] | undefined;
    paging?: PagingRespBase;

    constructor(data?: IGetVenuesResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["venues"])) {
                this.venues = [] as any;
                for (let item of _data["venues"])
                    this.venues!.push(GetVenues.fromJS(item));
            }
            this.paging = _data["paging"] ? PagingRespBase.fromJS(_data["paging"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetVenuesResp {
        data = typeof data === 'object' ? data : {};
        let result = new GetVenuesResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.venues)) {
            data["venues"] = [];
            for (let item of this.venues)
                data["venues"].push(item.toJSON());
        }
        data["paging"] = this.paging ? this.paging.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetVenuesResp {
    venues?: GetVenues[] | undefined;
    paging?: PagingRespBase;
}

export class GetVenuesRespApiRespBase implements IGetVenuesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: GetVenuesResp;

    constructor(data?: IGetVenuesRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? GetVenuesResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetVenuesRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new GetVenuesRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetVenuesRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: GetVenuesResp;
}

export class GroupListItem implements IGroupListItem {
    /** Group id */
    groupId?: number;
    /** User group name */
    name?: string | undefined;
    /** Remark */
    remark?: string | undefined;
    /** Updated At */
    updatedAt?: number;
    /** User name */
    updatedUserName?: string | undefined;
    /** Frontend names */
    frontendNames?: string[] | undefined;

    constructor(data?: IGroupListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.updatedAt = _data["updatedAt"];
            this.updatedUserName = _data["updatedUserName"];
            if (Array.isArray(_data["frontendNames"])) {
                this.frontendNames = [] as any;
                for (let item of _data["frontendNames"])
                    this.frontendNames!.push(item);
            }
        }
    }

    static fromJS(data: any): GroupListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GroupListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["updatedAt"] = this.updatedAt;
        data["updatedUserName"] = this.updatedUserName;
        if (Array.isArray(this.frontendNames)) {
            data["frontendNames"] = [];
            for (let item of this.frontendNames)
                data["frontendNames"].push(item);
        }
        return data;
    }
}

export interface IGroupListItem {
    /** Group id */
    groupId?: number;
    /** User group name */
    name?: string | undefined;
    /** Remark */
    remark?: string | undefined;
    /** Updated At */
    updatedAt?: number;
    /** User name */
    updatedUserName?: string | undefined;
    /** Frontend names */
    frontendNames?: string[] | undefined;
}

export class GroupTemplate implements IGroupTemplate {
    /** Group template id */
    templateId?: number;
    /** Group template name */
    name?: string | undefined;
    /** Frontend permissions */
    frontendPermissions?: Int16Item[] | undefined;
    /** Backoffice permissions */
    backofficePermissions?: SimpleBackOfficePermissionItem[] | undefined;

    constructor(data?: IGroupTemplate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.templateId = _data["templateId"];
            this.name = _data["name"];
            if (Array.isArray(_data["frontendPermissions"])) {
                this.frontendPermissions = [] as any;
                for (let item of _data["frontendPermissions"])
                    this.frontendPermissions!.push(Int16Item.fromJS(item));
            }
            if (Array.isArray(_data["backofficePermissions"])) {
                this.backofficePermissions = [] as any;
                for (let item of _data["backofficePermissions"])
                    this.backofficePermissions!.push(SimpleBackOfficePermissionItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GroupTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new GroupTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["templateId"] = this.templateId;
        data["name"] = this.name;
        if (Array.isArray(this.frontendPermissions)) {
            data["frontendPermissions"] = [];
            for (let item of this.frontendPermissions)
                data["frontendPermissions"].push(item.toJSON());
        }
        if (Array.isArray(this.backofficePermissions)) {
            data["backofficePermissions"] = [];
            for (let item of this.backofficePermissions)
                data["backofficePermissions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGroupTemplate {
    /** Group template id */
    templateId?: number;
    /** Group template name */
    name?: string | undefined;
    /** Frontend permissions */
    frontendPermissions?: Int16Item[] | undefined;
    /** Backoffice permissions */
    backofficePermissions?: SimpleBackOfficePermissionItem[] | undefined;
}

export class GroupUserListItem implements IGroupUserListItem {
    /** User id */
    userId?: number;
    /** User name */
    userName?: string | undefined;

    constructor(data?: IGroupUserListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.userName = _data["userName"];
        }
    }

    static fromJS(data: any): GroupUserListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GroupUserListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        return data;
    }
}

export interface IGroupUserListItem {
    /** User id */
    userId?: number;
    /** User name */
    userName?: string | undefined;
}

export class Int16Item implements IInt16Item {
    id?: number;
    name?: string | undefined;

    constructor(data?: IInt16Item) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Int16Item {
        data = typeof data === 'object' ? data : {};
        let result = new Int16Item();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IInt16Item {
    id?: number;
    name?: string | undefined;
}

export class Int16ItemWithSubItem implements IInt16ItemWithSubItem {
    id?: number;
    name?: string | undefined;
    subItems?: Int16Item[] | undefined;

    constructor(data?: IInt16ItemWithSubItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["subItems"])) {
                this.subItems = [] as any;
                for (let item of _data["subItems"])
                    this.subItems!.push(Int16Item.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Int16ItemWithSubItem {
        data = typeof data === 'object' ? data : {};
        let result = new Int16ItemWithSubItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.subItems)) {
            data["subItems"] = [];
            for (let item of this.subItems)
                data["subItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface IInt16ItemWithSubItem {
    id?: number;
    name?: string | undefined;
    subItems?: Int16Item[] | undefined;
}

export class Int32Item implements IInt32Item {
    id?: number;
    name?: string | undefined;

    constructor(data?: IInt32Item) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Int32Item {
        data = typeof data === 'object' ? data : {};
        let result = new Int32Item();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IInt32Item {
    id?: number;
    name?: string | undefined;
}

export class Int32StringDictionaryApiRespBase implements IInt32StringDictionaryApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: { [key: string]: string; } | undefined;

    constructor(data?: IInt32StringDictionaryApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
        }
    }

    static fromJS(data: any): Int32StringDictionaryApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new Int32StringDictionaryApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = (<any>this.data)[key];
            }
        }
        return data;
    }
}

export interface IInt32StringDictionaryApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: { [key: string]: string; } | undefined;
}

export class LanguageOption implements ILanguageOption {
    id?: number;
    name?: string | undefined;

    constructor(data?: ILanguageOption) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): LanguageOption {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageOption();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface ILanguageOption {
    id?: number;
    name?: string | undefined;
}

export enum LogLevel {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
}

export class LogoutResp implements ILogoutResp {

    constructor(data?: ILogoutResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): LogoutResp {
        data = typeof data === 'object' ? data : {};
        let result = new LogoutResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface ILogoutResp {
}

export class LogoutRespApiRespBase implements ILogoutRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: LogoutResp;

    constructor(data?: ILogoutRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? LogoutResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LogoutRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new LogoutRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILogoutRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: LogoutResp;
}

export class MediaTag implements IMediaTag {
    /** Media Tag Id */
    id?: number;
    /** Media Item Id */
    mediaItemId?: number;
    /** Media Item Name */
    name?: string | undefined;

    constructor(data?: IMediaTag) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.mediaItemId = _data["mediaItemId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): MediaTag {
        data = typeof data === 'object' ? data : {};
        let result = new MediaTag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["mediaItemId"] = this.mediaItemId;
        data["name"] = this.name;
        return data;
    }
}

export interface IMediaTag {
    /** Media Tag Id */
    id?: number;
    /** Media Item Id */
    mediaItemId?: number;
    /** Media Item Name */
    name?: string | undefined;
}

export class MediaVodListItem implements IMediaVodListItem {
    /** Vod id */
    vodId!: number;
    /** Vod title */
    title!: string;
    /** Host name */
    hostName!: string;
    /** Host video id */
    hostVideoId!: string;
    /** Creator */
    creator!: string;
    /** Create at */
    createdAt!: number;
    /** Update at */
    updateAt!: number;
    /** Is in game */
    isInGame!: boolean;
    /** Host view count */
    hostViewCount!: number;

    constructor(data?: IMediaVodListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vodId = _data["vodId"];
            this.title = _data["title"];
            this.hostName = _data["hostName"];
            this.hostVideoId = _data["hostVideoId"];
            this.creator = _data["creator"];
            this.createdAt = _data["createdAt"];
            this.updateAt = _data["updateAt"];
            this.isInGame = _data["isInGame"];
            this.hostViewCount = _data["hostViewCount"];
        }
    }

    static fromJS(data: any): MediaVodListItem {
        data = typeof data === 'object' ? data : {};
        let result = new MediaVodListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vodId"] = this.vodId;
        data["title"] = this.title;
        data["hostName"] = this.hostName;
        data["hostVideoId"] = this.hostVideoId;
        data["creator"] = this.creator;
        data["createdAt"] = this.createdAt;
        data["updateAt"] = this.updateAt;
        data["isInGame"] = this.isInGame;
        data["hostViewCount"] = this.hostViewCount;
        return data;
    }
}

export interface IMediaVodListItem {
    /** Vod id */
    vodId: number;
    /** Vod title */
    title: string;
    /** Host name */
    hostName: string;
    /** Host video id */
    hostVideoId: string;
    /** Creator */
    creator: string;
    /** Create at */
    createdAt: number;
    /** Update at */
    updateAt: number;
    /** Is in game */
    isInGame: boolean;
    /** Host view count */
    hostViewCount: number;
}

export class MenuItem implements IMenuItem {
    /** Backoffice func id */
    funcId?: number;
    /** Backoffice func name */
    name?: string | undefined;
    /** Parent func id */
    parentId?: number;
    /** Func level */
    level?: number;
    /** Func position */
    position?: number;
    /** Api url */
    url?: string | undefined;
    /** Sub Menus */
    subMenus?: MenuItem[] | undefined;

    constructor(data?: IMenuItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.funcId = _data["funcId"];
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.level = _data["level"];
            this.position = _data["position"];
            this.url = _data["url"];
            if (Array.isArray(_data["subMenus"])) {
                this.subMenus = [] as any;
                for (let item of _data["subMenus"])
                    this.subMenus!.push(MenuItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MenuItem {
        data = typeof data === 'object' ? data : {};
        let result = new MenuItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["funcId"] = this.funcId;
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["level"] = this.level;
        data["position"] = this.position;
        data["url"] = this.url;
        if (Array.isArray(this.subMenus)) {
            data["subMenus"] = [];
            for (let item of this.subMenus)
                data["subMenus"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMenuItem {
    /** Backoffice func id */
    funcId?: number;
    /** Backoffice func name */
    name?: string | undefined;
    /** Parent func id */
    parentId?: number;
    /** Func level */
    level?: number;
    /** Func position */
    position?: number;
    /** Api url */
    url?: string | undefined;
    /** Sub Menus */
    subMenus?: MenuItem[] | undefined;
}

export class ModArticleResp implements IModArticleResp {

    constructor(data?: IModArticleResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModArticleResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModArticleResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModArticleResp {
}

export class ModArticleRespApiRespBase implements IModArticleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModArticleResp;

    constructor(data?: IModArticleRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModArticleResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModArticleRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModArticleRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModArticleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModArticleResp;
}

export class ModBroadcastTalentResp implements IModBroadcastTalentResp {

    constructor(data?: IModBroadcastTalentResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModBroadcastTalentResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModBroadcastTalentResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModBroadcastTalentResp {
}

export class ModBroadcastTalentRespApiRespBase implements IModBroadcastTalentRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModBroadcastTalentResp;

    constructor(data?: IModBroadcastTalentRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModBroadcastTalentResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModBroadcastTalentRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModBroadcastTalentRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModBroadcastTalentRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModBroadcastTalentResp;
}

export class ModFileResp implements IModFileResp {
    fileId?: number;
    folderId?: number;
    fileName?: string | undefined;

    constructor(data?: IModFileResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileId = _data["fileId"];
            this.folderId = _data["folderId"];
            this.fileName = _data["fileName"];
        }
    }

    static fromJS(data: any): ModFileResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModFileResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileId"] = this.fileId;
        data["folderId"] = this.folderId;
        data["fileName"] = this.fileName;
        return data;
    }
}

export interface IModFileResp {
    fileId?: number;
    folderId?: number;
    fileName?: string | undefined;
}

export class ModFileRespApiRespBase implements IModFileRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModFileResp;

    constructor(data?: IModFileRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModFileResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModFileRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModFileRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModFileRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModFileResp;
}

export class ModFolderResp implements IModFolderResp {
    id?: number;
    name?: string | undefined;

    constructor(data?: IModFolderResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ModFolderResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModFolderResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IModFolderResp {
    id?: number;
    name?: string | undefined;
}

export class ModFolderRespApiRespBase implements IModFolderRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModFolderResp;

    constructor(data?: IModFolderRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModFolderResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModFolderRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModFolderRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModFolderRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModFolderResp;
}

export class ModFrontendSiteSectionReq implements IModFrontendSiteSectionReq {
    /** Frontend id */
    frontendId!: number;
    /** Site section id */
    siteSectionId!: number;

    constructor(data?: IModFrontendSiteSectionReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.frontendId = _data["frontendId"];
            this.siteSectionId = _data["siteSectionId"];
        }
    }

    static fromJS(data: any): ModFrontendSiteSectionReq {
        data = typeof data === 'object' ? data : {};
        let result = new ModFrontendSiteSectionReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frontendId"] = this.frontendId;
        data["siteSectionId"] = this.siteSectionId;
        return data;
    }
}

export interface IModFrontendSiteSectionReq {
    /** Frontend id */
    frontendId: number;
    /** Site section id */
    siteSectionId: number;
}

export class ModFrontendSiteSectionResp implements IModFrontendSiteSectionResp {
    /** Frontend id */
    frontendId?: number;
    /** Site section id */
    siteSectionId?: number;

    constructor(data?: IModFrontendSiteSectionResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.frontendId = _data["frontendId"];
            this.siteSectionId = _data["siteSectionId"];
        }
    }

    static fromJS(data: any): ModFrontendSiteSectionResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModFrontendSiteSectionResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frontendId"] = this.frontendId;
        data["siteSectionId"] = this.siteSectionId;
        return data;
    }
}

export interface IModFrontendSiteSectionResp {
    /** Frontend id */
    frontendId?: number;
    /** Site section id */
    siteSectionId?: number;
}

export class ModFrontendSiteSectionRespApiRespBase implements IModFrontendSiteSectionRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModFrontendSiteSectionResp;

    constructor(data?: IModFrontendSiteSectionRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModFrontendSiteSectionResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModFrontendSiteSectionRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModFrontendSiteSectionRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModFrontendSiteSectionRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModFrontendSiteSectionResp;
}

export class ModFuncResp implements IModFuncResp {
    /** Backoffice func id */
    funcId?: number;

    constructor(data?: IModFuncResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.funcId = _data["funcId"];
        }
    }

    static fromJS(data: any): ModFuncResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModFuncResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["funcId"] = this.funcId;
        return data;
    }
}

export interface IModFuncResp {
    /** Backoffice func id */
    funcId?: number;
}

export class ModFuncRespApiRespBase implements IModFuncRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModFuncResp;

    constructor(data?: IModFuncRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModFuncResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModFuncRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModFuncRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModFuncRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModFuncResp;
}

export class ModGameAccountReq implements IModGameAccountReq {
    /** GameAccount Id */
    gameAccountId!: number;
    /** PlayerId */
    playerId!: number;
    /** GameAccount Name */
    gameAccountName!: string;

    constructor(data?: IModGameAccountReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gameAccountId = _data["gameAccountId"];
            this.playerId = _data["playerId"];
            this.gameAccountName = _data["gameAccountName"];
        }
    }

    static fromJS(data: any): ModGameAccountReq {
        data = typeof data === 'object' ? data : {};
        let result = new ModGameAccountReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gameAccountId"] = this.gameAccountId;
        data["playerId"] = this.playerId;
        data["gameAccountName"] = this.gameAccountName;
        return data;
    }
}

export interface IModGameAccountReq {
    /** GameAccount Id */
    gameAccountId: number;
    /** PlayerId */
    playerId: number;
    /** GameAccount Name */
    gameAccountName: string;
}

export class ModGameAccountResp implements IModGameAccountResp {

    constructor(data?: IModGameAccountResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModGameAccountResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModGameAccountResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModGameAccountResp {
}

export class ModGameAccountRespApiRespBase implements IModGameAccountRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModGameAccountResp;

    constructor(data?: IModGameAccountRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModGameAccountResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModGameAccountRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModGameAccountRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModGameAccountRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModGameAccountResp;
}

export class ModGameRegionReq implements IModGameRegionReq {
    /** RegionId */
    regionId!: number;
    /** Region name */
    regionName!: string;
    /** Game id */
    gameId!: number;
    /** Country Ids */
    countryIds!: number[];

    constructor(data?: IModGameRegionReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.countryIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.regionId = _data["regionId"];
            this.regionName = _data["regionName"];
            this.gameId = _data["gameId"];
            if (Array.isArray(_data["countryIds"])) {
                this.countryIds = [] as any;
                for (let item of _data["countryIds"])
                    this.countryIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ModGameRegionReq {
        data = typeof data === 'object' ? data : {};
        let result = new ModGameRegionReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regionId"] = this.regionId;
        data["regionName"] = this.regionName;
        data["gameId"] = this.gameId;
        if (Array.isArray(this.countryIds)) {
            data["countryIds"] = [];
            for (let item of this.countryIds)
                data["countryIds"].push(item);
        }
        return data;
    }
}

export interface IModGameRegionReq {
    /** RegionId */
    regionId: number;
    /** Region name */
    regionName: string;
    /** Game id */
    gameId: number;
    /** Country Ids */
    countryIds: number[];
}

export class ModGameRegionResp implements IModGameRegionResp {
    /** Region id */
    regionId!: number;

    constructor(data?: IModGameRegionResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.regionId = _data["regionId"];
        }
    }

    static fromJS(data: any): ModGameRegionResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModGameRegionResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regionId"] = this.regionId;
        return data;
    }
}

export interface IModGameRegionResp {
    /** Region id */
    regionId: number;
}

export class ModGameRegionTranslationReq implements IModGameRegionTranslationReq {
    /** Region id */
    regionId!: number;
    /** Locale Id */
    localeId!: number;
    /** Map translations Name */
    regionName!: string;

    constructor(data?: IModGameRegionTranslationReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.regionId = _data["regionId"];
            this.localeId = _data["localeId"];
            this.regionName = _data["regionName"];
        }
    }

    static fromJS(data: any): ModGameRegionTranslationReq {
        data = typeof data === 'object' ? data : {};
        let result = new ModGameRegionTranslationReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["regionId"] = this.regionId;
        data["localeId"] = this.localeId;
        data["regionName"] = this.regionName;
        return data;
    }
}

export interface IModGameRegionTranslationReq {
    /** Region id */
    regionId: number;
    /** Locale Id */
    localeId: number;
    /** Map translations Name */
    regionName: string;
}

export class ModGameRegionTranslationResp implements IModGameRegionTranslationResp {

    constructor(data?: IModGameRegionTranslationResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModGameRegionTranslationResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModGameRegionTranslationResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModGameRegionTranslationResp {
}

export class ModGameRegionTranslationRespApiRespBase implements IModGameRegionTranslationRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModGameRegionTranslationResp;

    constructor(data?: IModGameRegionTranslationRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModGameRegionTranslationResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModGameRegionTranslationRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModGameRegionTranslationRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModGameRegionTranslationRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModGameRegionTranslationResp;
}

export class ModGameResp implements IModGameResp {
    /** Game id */
    gameId?: number;

    constructor(data?: IModGameResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gameId = _data["gameId"];
        }
    }

    static fromJS(data: any): ModGameResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModGameResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gameId"] = this.gameId;
        return data;
    }
}

export interface IModGameResp {
    /** Game id */
    gameId?: number;
}

export class ModGameRespApiRespBase implements IModGameRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModGameResp;

    constructor(data?: IModGameRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModGameResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModGameRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModGameRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModGameRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModGameResp;
}

export class ModGameTranslationsReq implements IModGameTranslationsReq {
    /** Game id */
    gameId!: number;
    /** Locale Id */
    localeId!: number;
    /** Side translations Name */
    name!: string;

    constructor(data?: IModGameTranslationsReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gameId = _data["gameId"];
            this.localeId = _data["localeId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ModGameTranslationsReq {
        data = typeof data === 'object' ? data : {};
        let result = new ModGameTranslationsReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gameId"] = this.gameId;
        data["localeId"] = this.localeId;
        data["name"] = this.name;
        return data;
    }
}

export interface IModGameTranslationsReq {
    /** Game id */
    gameId: number;
    /** Locale Id */
    localeId: number;
    /** Side translations Name */
    name: string;
}

export class ModGameTranslationsResp implements IModGameTranslationsResp {

    constructor(data?: IModGameTranslationsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModGameTranslationsResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModGameTranslationsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModGameTranslationsResp {
}

export class ModGameTranslationsRespApiRespBase implements IModGameTranslationsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModGameTranslationsResp;

    constructor(data?: IModGameTranslationsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModGameTranslationsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModGameTranslationsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModGameTranslationsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModGameTranslationsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModGameTranslationsResp;
}

export class ModGroupReq implements IModGroupReq {
    /** Group id */
    groupId!: number;
    /** User group name */
    name!: string;
    /** Remark */
    remark?: string | undefined;
    /** Frontend ids */
    frontendIds?: number[] | undefined;
    /** Backoffice func ids */
    backofficeFuncIds?: number[] | undefined;

    constructor(data?: IModGroupReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["frontendIds"])) {
                this.frontendIds = [] as any;
                for (let item of _data["frontendIds"])
                    this.frontendIds!.push(item);
            }
            if (Array.isArray(_data["backofficeFuncIds"])) {
                this.backofficeFuncIds = [] as any;
                for (let item of _data["backofficeFuncIds"])
                    this.backofficeFuncIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ModGroupReq {
        data = typeof data === 'object' ? data : {};
        let result = new ModGroupReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        data["name"] = this.name;
        data["remark"] = this.remark;
        if (Array.isArray(this.frontendIds)) {
            data["frontendIds"] = [];
            for (let item of this.frontendIds)
                data["frontendIds"].push(item);
        }
        if (Array.isArray(this.backofficeFuncIds)) {
            data["backofficeFuncIds"] = [];
            for (let item of this.backofficeFuncIds)
                data["backofficeFuncIds"].push(item);
        }
        return data;
    }
}

export interface IModGroupReq {
    /** Group id */
    groupId: number;
    /** User group name */
    name: string;
    /** Remark */
    remark?: string | undefined;
    /** Frontend ids */
    frontendIds?: number[] | undefined;
    /** Backoffice func ids */
    backofficeFuncIds?: number[] | undefined;
}

export class ModGroupResp implements IModGroupResp {
    /** Group id */
    groupId?: number | undefined;

    constructor(data?: IModGroupResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
        }
    }

    static fromJS(data: any): ModGroupResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModGroupResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        return data;
    }
}

export interface IModGroupResp {
    /** Group id */
    groupId?: number | undefined;
}

export class ModGroupRespApiRespBase implements IModGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModGroupResp;

    constructor(data?: IModGroupRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModGroupResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModGroupRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModGroupRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModGroupResp;
}

export class ModHeroResp implements IModHeroResp {

    constructor(data?: IModHeroResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModHeroResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModHeroResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModHeroResp {
}

export class ModHeroRespApiRespBase implements IModHeroRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModHeroResp;

    constructor(data?: IModHeroRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModHeroResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModHeroRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModHeroRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModHeroRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModHeroResp;
}

export class ModHeroTranslationsReq implements IModHeroTranslationsReq {
    /** game hero Id */
    id!: number;
    /** Locale Id */
    localeId!: number;
    /** Map translations Name */
    name!: string;
    /** Title */
    title!: string;
    /** Tagline */
    tagline!: string;
    /** Description */
    description!: string;

    constructor(data?: IModHeroTranslationsReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.localeId = _data["localeId"];
            this.name = _data["name"];
            this.title = _data["title"];
            this.tagline = _data["tagline"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): ModHeroTranslationsReq {
        data = typeof data === 'object' ? data : {};
        let result = new ModHeroTranslationsReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["localeId"] = this.localeId;
        data["name"] = this.name;
        data["title"] = this.title;
        data["tagline"] = this.tagline;
        data["description"] = this.description;
        return data;
    }
}

export interface IModHeroTranslationsReq {
    /** game hero Id */
    id: number;
    /** Locale Id */
    localeId: number;
    /** Map translations Name */
    name: string;
    /** Title */
    title: string;
    /** Tagline */
    tagline: string;
    /** Description */
    description: string;
}

export class ModHeroTranslationsResp implements IModHeroTranslationsResp {

    constructor(data?: IModHeroTranslationsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModHeroTranslationsResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModHeroTranslationsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModHeroTranslationsResp {
}

export class ModHeroTranslationsRespApiRespBase implements IModHeroTranslationsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModHeroTranslationsResp;

    constructor(data?: IModHeroTranslationsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModHeroTranslationsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModHeroTranslationsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModHeroTranslationsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModHeroTranslationsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModHeroTranslationsResp;
}

export class ModMapResp implements IModMapResp {

    constructor(data?: IModMapResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModMapResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModMapResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModMapResp {
}

export class ModMapRespApiRespBase implements IModMapRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModMapResp;

    constructor(data?: IModMapRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModMapResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModMapRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModMapRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModMapRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModMapResp;
}

export class ModMapTranslationsReq implements IModMapTranslationsReq {
    /** game maps Id */
    id!: number;
    /** Locale Id */
    localeId!: number;
    /** Map translations Name */
    name!: string;

    constructor(data?: IModMapTranslationsReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.localeId = _data["localeId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ModMapTranslationsReq {
        data = typeof data === 'object' ? data : {};
        let result = new ModMapTranslationsReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["localeId"] = this.localeId;
        data["name"] = this.name;
        return data;
    }
}

export interface IModMapTranslationsReq {
    /** game maps Id */
    id: number;
    /** Locale Id */
    localeId: number;
    /** Map translations Name */
    name: string;
}

export class ModMapTranslationsResp implements IModMapTranslationsResp {

    constructor(data?: IModMapTranslationsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModMapTranslationsResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModMapTranslationsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModMapTranslationsResp {
}

export class ModMapTranslationsRespApiRespBase implements IModMapTranslationsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModMapTranslationsResp;

    constructor(data?: IModMapTranslationsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModMapTranslationsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModMapTranslationsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModMapTranslationsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModMapTranslationsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModMapTranslationsResp;
}

export class ModMediaVodReq implements IModMediaVodReq {
    /** Vod id */
    vodId!: number;
    /** Vod title */
    title!: string;
    /** Site section ids */
    siteSectionIds!: number[];
    /** Host id */
    hostId!: number;
    /** Host video id */
    hostVideoId!: string;
    /** Start time */
    startTime!: number;
    /** Description */
    description?: string | undefined;
    /** Tags */
    tags?: string[] | undefined;
    /** Is in game */
    isInGame!: boolean;
    /** Is featured */
    isFeatured!: boolean;
    /** Related players */
    playerIds?: number[] | undefined;
    /** Related teams */
    teamIds?: number[] | undefined;

    constructor(data?: IModMediaVodReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.siteSectionIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vodId = _data["vodId"];
            this.title = _data["title"];
            if (Array.isArray(_data["siteSectionIds"])) {
                this.siteSectionIds = [] as any;
                for (let item of _data["siteSectionIds"])
                    this.siteSectionIds!.push(item);
            }
            this.hostId = _data["hostId"];
            this.hostVideoId = _data["hostVideoId"];
            this.startTime = _data["startTime"];
            this.description = _data["description"];
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
            this.isInGame = _data["isInGame"];
            this.isFeatured = _data["isFeatured"];
            if (Array.isArray(_data["playerIds"])) {
                this.playerIds = [] as any;
                for (let item of _data["playerIds"])
                    this.playerIds!.push(item);
            }
            if (Array.isArray(_data["teamIds"])) {
                this.teamIds = [] as any;
                for (let item of _data["teamIds"])
                    this.teamIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ModMediaVodReq {
        data = typeof data === 'object' ? data : {};
        let result = new ModMediaVodReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vodId"] = this.vodId;
        data["title"] = this.title;
        if (Array.isArray(this.siteSectionIds)) {
            data["siteSectionIds"] = [];
            for (let item of this.siteSectionIds)
                data["siteSectionIds"].push(item);
        }
        data["hostId"] = this.hostId;
        data["hostVideoId"] = this.hostVideoId;
        data["startTime"] = this.startTime;
        data["description"] = this.description;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        data["isInGame"] = this.isInGame;
        data["isFeatured"] = this.isFeatured;
        if (Array.isArray(this.playerIds)) {
            data["playerIds"] = [];
            for (let item of this.playerIds)
                data["playerIds"].push(item);
        }
        if (Array.isArray(this.teamIds)) {
            data["teamIds"] = [];
            for (let item of this.teamIds)
                data["teamIds"].push(item);
        }
        return data;
    }
}

export interface IModMediaVodReq {
    /** Vod id */
    vodId: number;
    /** Vod title */
    title: string;
    /** Site section ids */
    siteSectionIds: number[];
    /** Host id */
    hostId: number;
    /** Host video id */
    hostVideoId: string;
    /** Start time */
    startTime: number;
    /** Description */
    description?: string | undefined;
    /** Tags */
    tags?: string[] | undefined;
    /** Is in game */
    isInGame: boolean;
    /** Is featured */
    isFeatured: boolean;
    /** Related players */
    playerIds?: number[] | undefined;
    /** Related teams */
    teamIds?: number[] | undefined;
}

export class ModMediaVodResp implements IModMediaVodResp {
    /** Vod id */
    vodId!: number;

    constructor(data?: IModMediaVodResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vodId = _data["vodId"];
        }
    }

    static fromJS(data: any): ModMediaVodResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModMediaVodResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vodId"] = this.vodId;
        return data;
    }
}

export interface IModMediaVodResp {
    /** Vod id */
    vodId: number;
}

export class ModMediaVodRespApiRespBase implements IModMediaVodRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModMediaVodResp;

    constructor(data?: IModMediaVodRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModMediaVodResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModMediaVodRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModMediaVodRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModMediaVodRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModMediaVodResp;
}

export class ModModeReq implements IModModeReq {
    /** Modes Id */
    id!: number;
    /** Modes Name */
    name!: string;
    /** Modes Abbreviation */
    abbreviation?: string | undefined;
    /** Modes Game Id */
    gameId!: number;

    constructor(data?: IModModeReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.abbreviation = _data["abbreviation"];
            this.gameId = _data["gameId"];
        }
    }

    static fromJS(data: any): ModModeReq {
        data = typeof data === 'object' ? data : {};
        let result = new ModModeReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["abbreviation"] = this.abbreviation;
        data["gameId"] = this.gameId;
        return data;
    }
}

export interface IModModeReq {
    /** Modes Id */
    id: number;
    /** Modes Name */
    name: string;
    /** Modes Abbreviation */
    abbreviation?: string | undefined;
    /** Modes Game Id */
    gameId: number;
}

export class ModModeResp implements IModModeResp {

    constructor(data?: IModModeResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModModeResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModModeResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModModeResp {
}

export class ModModeRespApiRespBase implements IModModeRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModModeResp;

    constructor(data?: IModModeRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModModeResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModModeRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModModeRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModModeRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModModeResp;
}

export class ModModeTranslationsReq implements IModModeTranslationsReq {
    /** game modes Id */
    id!: number;
    /** Locale Id */
    localeId!: number;
    /** Map translations Name */
    name!: string;
    /** Map translations Abbreviation */
    abbreviation?: string | undefined;

    constructor(data?: IModModeTranslationsReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.localeId = _data["localeId"];
            this.name = _data["name"];
            this.abbreviation = _data["abbreviation"];
        }
    }

    static fromJS(data: any): ModModeTranslationsReq {
        data = typeof data === 'object' ? data : {};
        let result = new ModModeTranslationsReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["localeId"] = this.localeId;
        data["name"] = this.name;
        data["abbreviation"] = this.abbreviation;
        return data;
    }
}

export interface IModModeTranslationsReq {
    /** game modes Id */
    id: number;
    /** Locale Id */
    localeId: number;
    /** Map translations Name */
    name: string;
    /** Map translations Abbreviation */
    abbreviation?: string | undefined;
}

export class ModModeTranslationsResp implements IModModeTranslationsResp {

    constructor(data?: IModModeTranslationsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModModeTranslationsResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModModeTranslationsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModModeTranslationsResp {
}

export class ModModeTranslationsRespApiRespBase implements IModModeTranslationsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModModeTranslationsResp;

    constructor(data?: IModModeTranslationsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModModeTranslationsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModModeTranslationsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModModeTranslationsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModModeTranslationsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModModeTranslationsResp;
}

export class ModNotificationTemplateReq implements IModNotificationTemplateReq {
    /** Notification Template Id */
    notificationTemplateId!: number;
    webTitle!: string;
    webBody!: string;
    pushTitle?: string | undefined;
    pushBody?: string | undefined;
    emailSubject?: string | undefined;
    emailTextBody?: string | undefined;
    emailHtmlBody?: string | undefined;

    constructor(data?: IModNotificationTemplateReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.notificationTemplateId = _data["notificationTemplateId"];
            this.webTitle = _data["webTitle"];
            this.webBody = _data["webBody"];
            this.pushTitle = _data["pushTitle"];
            this.pushBody = _data["pushBody"];
            this.emailSubject = _data["emailSubject"];
            this.emailTextBody = _data["emailTextBody"];
            this.emailHtmlBody = _data["emailHtmlBody"];
        }
    }

    static fromJS(data: any): ModNotificationTemplateReq {
        data = typeof data === 'object' ? data : {};
        let result = new ModNotificationTemplateReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["notificationTemplateId"] = this.notificationTemplateId;
        data["webTitle"] = this.webTitle;
        data["webBody"] = this.webBody;
        data["pushTitle"] = this.pushTitle;
        data["pushBody"] = this.pushBody;
        data["emailSubject"] = this.emailSubject;
        data["emailTextBody"] = this.emailTextBody;
        data["emailHtmlBody"] = this.emailHtmlBody;
        return data;
    }
}

export interface IModNotificationTemplateReq {
    /** Notification Template Id */
    notificationTemplateId: number;
    webTitle: string;
    webBody: string;
    pushTitle?: string | undefined;
    pushBody?: string | undefined;
    emailSubject?: string | undefined;
    emailTextBody?: string | undefined;
    emailHtmlBody?: string | undefined;
}

export class ModNotificationTemplateResp implements IModNotificationTemplateResp {
    /** Notification Template Id */
    notificationTemplateId?: number;

    constructor(data?: IModNotificationTemplateResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.notificationTemplateId = _data["notificationTemplateId"];
        }
    }

    static fromJS(data: any): ModNotificationTemplateResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModNotificationTemplateResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["notificationTemplateId"] = this.notificationTemplateId;
        return data;
    }
}

export interface IModNotificationTemplateResp {
    /** Notification Template Id */
    notificationTemplateId?: number;
}

export class ModNotificationTemplateRespApiRespBase implements IModNotificationTemplateRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModNotificationTemplateResp;

    constructor(data?: IModNotificationTemplateRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModNotificationTemplateResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModNotificationTemplateRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModNotificationTemplateRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModNotificationTemplateRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModNotificationTemplateResp;
}

export class ModOneSignalAppReq implements IModOneSignalAppReq {
    /** One Signal App Id */
    oneSignalAppId!: number;
    /** App Id */
    appId!: string;
    /** Api Key */
    apiKey!: string;
    /** Safari Web Id */
    safariWebId!: string;
    /** Player Match Starting Notification Android Channel Id */
    playerMatchStartingNotificationAndroidChannelId?: string | undefined;
    /** Team Match Starting Notification Android Channel Id */
    teamMatchStartingNotificationAndroidChannelId?: string | undefined;
    /** Player Article Notification Android Channel Id */
    playerArticleNotificationAndroidChannelId?: string | undefined;
    /** Team Article Notification Android Channel Id */
    teamArticleNotificationAndroidChannelId?: string | undefined;
    /** Player Match Resulted Notification Android Channel Id */
    playerMatchResultedNotificationAndroidChannelId?: string | undefined;
    /** Team Match Resulted Notification Android Channel Id */
    teamMatchResultedNotificationAndroidChannelId?: string | undefined;
    /** Team Transfer Notification Android Channel Id */
    teamTransferNotificationAndroidChannelId?: string | undefined;
    /** Player Transfer Notification Android Channel Id */
    playerTransferNotificationAndroidChannelId?: string | undefined;

    constructor(data?: IModOneSignalAppReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oneSignalAppId = _data["oneSignalAppId"];
            this.appId = _data["appId"];
            this.apiKey = _data["apiKey"];
            this.safariWebId = _data["safariWebId"];
            this.playerMatchStartingNotificationAndroidChannelId = _data["playerMatchStartingNotificationAndroidChannelId"];
            this.teamMatchStartingNotificationAndroidChannelId = _data["teamMatchStartingNotificationAndroidChannelId"];
            this.playerArticleNotificationAndroidChannelId = _data["playerArticleNotificationAndroidChannelId"];
            this.teamArticleNotificationAndroidChannelId = _data["teamArticleNotificationAndroidChannelId"];
            this.playerMatchResultedNotificationAndroidChannelId = _data["playerMatchResultedNotificationAndroidChannelId"];
            this.teamMatchResultedNotificationAndroidChannelId = _data["teamMatchResultedNotificationAndroidChannelId"];
            this.teamTransferNotificationAndroidChannelId = _data["teamTransferNotificationAndroidChannelId"];
            this.playerTransferNotificationAndroidChannelId = _data["playerTransferNotificationAndroidChannelId"];
        }
    }

    static fromJS(data: any): ModOneSignalAppReq {
        data = typeof data === 'object' ? data : {};
        let result = new ModOneSignalAppReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oneSignalAppId"] = this.oneSignalAppId;
        data["appId"] = this.appId;
        data["apiKey"] = this.apiKey;
        data["safariWebId"] = this.safariWebId;
        data["playerMatchStartingNotificationAndroidChannelId"] = this.playerMatchStartingNotificationAndroidChannelId;
        data["teamMatchStartingNotificationAndroidChannelId"] = this.teamMatchStartingNotificationAndroidChannelId;
        data["playerArticleNotificationAndroidChannelId"] = this.playerArticleNotificationAndroidChannelId;
        data["teamArticleNotificationAndroidChannelId"] = this.teamArticleNotificationAndroidChannelId;
        data["playerMatchResultedNotificationAndroidChannelId"] = this.playerMatchResultedNotificationAndroidChannelId;
        data["teamMatchResultedNotificationAndroidChannelId"] = this.teamMatchResultedNotificationAndroidChannelId;
        data["teamTransferNotificationAndroidChannelId"] = this.teamTransferNotificationAndroidChannelId;
        data["playerTransferNotificationAndroidChannelId"] = this.playerTransferNotificationAndroidChannelId;
        return data;
    }
}

export interface IModOneSignalAppReq {
    /** One Signal App Id */
    oneSignalAppId: number;
    /** App Id */
    appId: string;
    /** Api Key */
    apiKey: string;
    /** Safari Web Id */
    safariWebId: string;
    /** Player Match Starting Notification Android Channel Id */
    playerMatchStartingNotificationAndroidChannelId?: string | undefined;
    /** Team Match Starting Notification Android Channel Id */
    teamMatchStartingNotificationAndroidChannelId?: string | undefined;
    /** Player Article Notification Android Channel Id */
    playerArticleNotificationAndroidChannelId?: string | undefined;
    /** Team Article Notification Android Channel Id */
    teamArticleNotificationAndroidChannelId?: string | undefined;
    /** Player Match Resulted Notification Android Channel Id */
    playerMatchResultedNotificationAndroidChannelId?: string | undefined;
    /** Team Match Resulted Notification Android Channel Id */
    teamMatchResultedNotificationAndroidChannelId?: string | undefined;
    /** Team Transfer Notification Android Channel Id */
    teamTransferNotificationAndroidChannelId?: string | undefined;
    /** Player Transfer Notification Android Channel Id */
    playerTransferNotificationAndroidChannelId?: string | undefined;
}

export class ModOneSignalAppResp implements IModOneSignalAppResp {
    /** One Signal App Id */
    oneSignalAppId?: number | undefined;

    constructor(data?: IModOneSignalAppResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oneSignalAppId = _data["oneSignalAppId"];
        }
    }

    static fromJS(data: any): ModOneSignalAppResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModOneSignalAppResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oneSignalAppId"] = this.oneSignalAppId;
        return data;
    }
}

export interface IModOneSignalAppResp {
    /** One Signal App Id */
    oneSignalAppId?: number | undefined;
}

export class ModOneSignalAppRespApiRespBase implements IModOneSignalAppRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModOneSignalAppResp;

    constructor(data?: IModOneSignalAppRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModOneSignalAppResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModOneSignalAppRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModOneSignalAppRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModOneSignalAppRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModOneSignalAppResp;
}

export class ModPageReq implements IModPageReq {
    /** Page id */
    pageId!: number;
    /** Title */
    title!: string;
    /** Content */
    content!: string;
    /** Frontend id */
    frontendId!: number;
    /** Extra css */
    extraCss?: string | undefined;

    constructor(data?: IModPageReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageId = _data["pageId"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.frontendId = _data["frontendId"];
            this.extraCss = _data["extraCss"];
        }
    }

    static fromJS(data: any): ModPageReq {
        data = typeof data === 'object' ? data : {};
        let result = new ModPageReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageId"] = this.pageId;
        data["title"] = this.title;
        data["content"] = this.content;
        data["frontendId"] = this.frontendId;
        data["extraCss"] = this.extraCss;
        return data;
    }
}

export interface IModPageReq {
    /** Page id */
    pageId: number;
    /** Title */
    title: string;
    /** Content */
    content: string;
    /** Frontend id */
    frontendId: number;
    /** Extra css */
    extraCss?: string | undefined;
}

export class ModPageResp implements IModPageResp {
    /** Page id */
    pageId?: number | undefined;

    constructor(data?: IModPageResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageId = _data["pageId"];
        }
    }

    static fromJS(data: any): ModPageResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModPageResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageId"] = this.pageId;
        return data;
    }
}

export interface IModPageResp {
    /** Page id */
    pageId?: number | undefined;
}

export class ModPageRespApiRespBase implements IModPageRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModPageResp;

    constructor(data?: IModPageRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModPageResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModPageRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModPageRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModPageRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModPageResp;
}

export class ModPlayerResp implements IModPlayerResp {

    constructor(data?: IModPlayerResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModPlayerResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModPlayerResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModPlayerResp {
}

export class ModPlayerRespApiRespBase implements IModPlayerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModPlayerResp;

    constructor(data?: IModPlayerRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModPlayerResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModPlayerRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModPlayerRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModPlayerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModPlayerResp;
}

export class ModRoleReq implements IModRoleReq {
    /** Role id */
    roleId!: number;
    /** Role name */
    name!: string;
    /** Remark */
    remark!: string;
    /** Backoffice Func Ids */
    backofficeFuncIds?: number[] | undefined;
    /** Frontend ids */
    frontendIds?: number[] | undefined;

    constructor(data?: IModRoleReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleId = _data["roleId"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["backofficeFuncIds"])) {
                this.backofficeFuncIds = [] as any;
                for (let item of _data["backofficeFuncIds"])
                    this.backofficeFuncIds!.push(item);
            }
            if (Array.isArray(_data["frontendIds"])) {
                this.frontendIds = [] as any;
                for (let item of _data["frontendIds"])
                    this.frontendIds!.push(item);
            }
        }
    }

    static fromJS(data: any): ModRoleReq {
        data = typeof data === 'object' ? data : {};
        let result = new ModRoleReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["name"] = this.name;
        data["remark"] = this.remark;
        if (Array.isArray(this.backofficeFuncIds)) {
            data["backofficeFuncIds"] = [];
            for (let item of this.backofficeFuncIds)
                data["backofficeFuncIds"].push(item);
        }
        if (Array.isArray(this.frontendIds)) {
            data["frontendIds"] = [];
            for (let item of this.frontendIds)
                data["frontendIds"].push(item);
        }
        return data;
    }
}

export interface IModRoleReq {
    /** Role id */
    roleId: number;
    /** Role name */
    name: string;
    /** Remark */
    remark: string;
    /** Backoffice Func Ids */
    backofficeFuncIds?: number[] | undefined;
    /** Frontend ids */
    frontendIds?: number[] | undefined;
}

export class ModRoleResp implements IModRoleResp {
    /** Role id */
    roleId?: number | undefined;

    constructor(data?: IModRoleResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleId = _data["roleId"];
        }
    }

    static fromJS(data: any): ModRoleResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModRoleResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        return data;
    }
}

export interface IModRoleResp {
    /** Role id */
    roleId?: number | undefined;
}

export class ModRoleRespApiRespBase implements IModRoleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModRoleResp;

    constructor(data?: IModRoleRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModRoleResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModRoleRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModRoleRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModRoleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModRoleResp;
}

export class ModServerResp implements IModServerResp {

    constructor(data?: IModServerResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModServerResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModServerResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModServerResp {
}

export class ModServerRespApiRespBase implements IModServerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModServerResp;

    constructor(data?: IModServerRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModServerResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModServerRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModServerRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModServerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModServerResp;
}

export class ModSideResp implements IModSideResp {

    constructor(data?: IModSideResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModSideResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModSideResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModSideResp {
}

export class ModSideRespApiRespBase implements IModSideRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModSideResp;

    constructor(data?: IModSideRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModSideResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModSideRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModSideRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModSideRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModSideResp;
}

export class ModSideTranslationsReq implements IModSideTranslationsReq {
    /** game side Id */
    id!: number;
    /** Locale Id */
    localeId!: number;
    /** Side translations Name */
    name!: string;

    constructor(data?: IModSideTranslationsReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.localeId = _data["localeId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ModSideTranslationsReq {
        data = typeof data === 'object' ? data : {};
        let result = new ModSideTranslationsReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["localeId"] = this.localeId;
        data["name"] = this.name;
        return data;
    }
}

export interface IModSideTranslationsReq {
    /** game side Id */
    id: number;
    /** Locale Id */
    localeId: number;
    /** Side translations Name */
    name: string;
}

export class ModSideTranslationsResp implements IModSideTranslationsResp {

    constructor(data?: IModSideTranslationsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModSideTranslationsResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModSideTranslationsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModSideTranslationsResp {
}

export class ModSideTranslationsRespApiRespBase implements IModSideTranslationsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModSideTranslationsResp;

    constructor(data?: IModSideTranslationsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModSideTranslationsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModSideTranslationsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModSideTranslationsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModSideTranslationsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModSideTranslationsResp;
}

export class ModSiteSectionsResp implements IModSiteSectionsResp {

    constructor(data?: IModSiteSectionsResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModSiteSectionsResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModSiteSectionsResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModSiteSectionsResp {
}

export class ModSiteSectionsRespApiRespBase implements IModSiteSectionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModSiteSectionsResp;

    constructor(data?: IModSiteSectionsRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModSiteSectionsResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModSiteSectionsRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModSiteSectionsRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModSiteSectionsRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModSiteSectionsResp;
}

export class ModSponsorResp implements IModSponsorResp {

    constructor(data?: IModSponsorResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModSponsorResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModSponsorResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModSponsorResp {
}

export class ModSponsorRespApiRespBase implements IModSponsorRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModSponsorResp;

    constructor(data?: IModSponsorRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModSponsorResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModSponsorRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModSponsorRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModSponsorRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModSponsorResp;
}

export class ModStreamResp implements IModStreamResp {

    constructor(data?: IModStreamResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModStreamResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModStreamResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModStreamResp {
}

export class ModStreamRespApiRespBase implements IModStreamRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModStreamResp;

    constructor(data?: IModStreamRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModStreamResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModStreamRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModStreamRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModStreamRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModStreamResp;
}

export class ModStreamTag implements IModStreamTag {
    /** Media Tag Id */
    id?: number | undefined;
    /** Media Item Name */
    name?: string | undefined;

    constructor(data?: IModStreamTag) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ModStreamTag {
        data = typeof data === 'object' ? data : {};
        let result = new ModStreamTag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IModStreamTag {
    /** Media Tag Id */
    id?: number | undefined;
    /** Media Item Name */
    name?: string | undefined;
}

export class ModTeamPlayerResp implements IModTeamPlayerResp {

    constructor(data?: IModTeamPlayerResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModTeamPlayerResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModTeamPlayerResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModTeamPlayerResp {
}

export class ModTeamPlayerRespApiRespBase implements IModTeamPlayerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModTeamPlayerResp;

    constructor(data?: IModTeamPlayerRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModTeamPlayerResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModTeamPlayerRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModTeamPlayerRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModTeamPlayerRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModTeamPlayerResp;
}

export class ModTeamResp implements IModTeamResp {

    constructor(data?: IModTeamResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModTeamResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModTeamResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModTeamResp {
}

export class ModTeamRespApiRespBase implements IModTeamRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModTeamResp;

    constructor(data?: IModTeamRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModTeamResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModTeamRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModTeamRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModTeamRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModTeamResp;
}

export class ModUserResp implements IModUserResp {

    constructor(data?: IModUserResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModUserResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModUserResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModUserResp {
}

export class ModUserRespApiRespBase implements IModUserRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModUserResp;

    constructor(data?: IModUserRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModUserResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModUserRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModUserRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModUserRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModUserResp;
}

export class ModVenueResp implements IModVenueResp {

    constructor(data?: IModVenueResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ModVenueResp {
        data = typeof data === 'object' ? data : {};
        let result = new ModVenueResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IModVenueResp {
}

export class ModVenueRespApiRespBase implements IModVenueRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: ModVenueResp;

    constructor(data?: IModVenueRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? ModVenueResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModVenueRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new ModVenueRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModVenueRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: ModVenueResp;
}

export class NotificationTemplateArgument implements INotificationTemplateArgument {
    name?: string | undefined;
    scope?: string | undefined;
    example?: string | undefined;

    constructor(data?: INotificationTemplateArgument) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.scope = _data["scope"];
            this.example = _data["example"];
        }
    }

    static fromJS(data: any): NotificationTemplateArgument {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationTemplateArgument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["scope"] = this.scope;
        data["example"] = this.example;
        return data;
    }
}

export interface INotificationTemplateArgument {
    name?: string | undefined;
    scope?: string | undefined;
    example?: string | undefined;
}

export class NotificationTemplateDetail implements INotificationTemplateDetail {
    id!: number;
    frontEndId!: number;
    messagingNotificationTypeId?: number | undefined;
    typeIdentifier?: string | undefined;
    webSupported?: boolean;
    webTitle?: string | undefined;
    webBody?: string | undefined;
    pushSupported?: boolean;
    pushTitle?: string | undefined;
    pushBody?: string | undefined;
    emailSupported?: boolean;
    emailSubject?: string | undefined;
    emailTextBody?: string | undefined;
    emailHtmlBody?: string | undefined;
    createdAt!: number;
    updatedAt!: number;

    constructor(data?: INotificationTemplateDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.frontEndId = _data["frontEndId"];
            this.messagingNotificationTypeId = _data["messagingNotificationTypeId"];
            this.typeIdentifier = _data["typeIdentifier"];
            this.webSupported = _data["webSupported"];
            this.webTitle = _data["webTitle"];
            this.webBody = _data["webBody"];
            this.pushSupported = _data["pushSupported"];
            this.pushTitle = _data["pushTitle"];
            this.pushBody = _data["pushBody"];
            this.emailSupported = _data["emailSupported"];
            this.emailSubject = _data["emailSubject"];
            this.emailTextBody = _data["emailTextBody"];
            this.emailHtmlBody = _data["emailHtmlBody"];
            this.createdAt = _data["createdAt"];
            this.updatedAt = _data["updatedAt"];
        }
    }

    static fromJS(data: any): NotificationTemplateDetail {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationTemplateDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["frontEndId"] = this.frontEndId;
        data["messagingNotificationTypeId"] = this.messagingNotificationTypeId;
        data["typeIdentifier"] = this.typeIdentifier;
        data["webSupported"] = this.webSupported;
        data["webTitle"] = this.webTitle;
        data["webBody"] = this.webBody;
        data["pushSupported"] = this.pushSupported;
        data["pushTitle"] = this.pushTitle;
        data["pushBody"] = this.pushBody;
        data["emailSupported"] = this.emailSupported;
        data["emailSubject"] = this.emailSubject;
        data["emailTextBody"] = this.emailTextBody;
        data["emailHtmlBody"] = this.emailHtmlBody;
        data["createdAt"] = this.createdAt;
        data["updatedAt"] = this.updatedAt;
        return data;
    }
}

export interface INotificationTemplateDetail {
    id: number;
    frontEndId: number;
    messagingNotificationTypeId?: number | undefined;
    typeIdentifier?: string | undefined;
    webSupported?: boolean;
    webTitle?: string | undefined;
    webBody?: string | undefined;
    pushSupported?: boolean;
    pushTitle?: string | undefined;
    pushBody?: string | undefined;
    emailSupported?: boolean;
    emailSubject?: string | undefined;
    emailTextBody?: string | undefined;
    emailHtmlBody?: string | undefined;
    createdAt: number;
    updatedAt: number;
}

export class NotificationTemplateListItem implements INotificationTemplateListItem {
    /** Notification Template Id */
    id!: number;
    /** Messaging Notification Type Id */
    messagingNotificationTypeId!: number;
    /** Frontend Name */
    feName!: string;
    /** Notification Template Name */
    name!: string;
    /** Notification Template Description */
    desc!: string;
    /** Is Web Set */
    webSupported!: boolean;
    /** Is Email Set */
    emailSupported!: boolean;
    /** Is Push Set */
    pushSupported!: boolean;

    constructor(data?: INotificationTemplateListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.messagingNotificationTypeId = _data["messagingNotificationTypeId"];
            this.feName = _data["feName"];
            this.name = _data["name"];
            this.desc = _data["desc"];
            this.webSupported = _data["webSupported"];
            this.emailSupported = _data["emailSupported"];
            this.pushSupported = _data["pushSupported"];
        }
    }

    static fromJS(data: any): NotificationTemplateListItem {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationTemplateListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["messagingNotificationTypeId"] = this.messagingNotificationTypeId;
        data["feName"] = this.feName;
        data["name"] = this.name;
        data["desc"] = this.desc;
        data["webSupported"] = this.webSupported;
        data["emailSupported"] = this.emailSupported;
        data["pushSupported"] = this.pushSupported;
        return data;
    }
}

export interface INotificationTemplateListItem {
    /** Notification Template Id */
    id: number;
    /** Messaging Notification Type Id */
    messagingNotificationTypeId: number;
    /** Frontend Name */
    feName: string;
    /** Notification Template Name */
    name: string;
    /** Notification Template Description */
    desc: string;
    /** Is Web Set */
    webSupported: boolean;
    /** Is Email Set */
    emailSupported: boolean;
    /** Is Push Set */
    pushSupported: boolean;
}

export class OneSignalAppListItem implements IOneSignalAppListItem {
    id?: number;
    appId?: string | undefined;
    apiKey?: string | undefined;
    safariWebId?: string | undefined;
    playerMatchStartingNotificationAndroidChannelId?: string | undefined;
    teamMatchStartingNotificationAndroidChannelId?: string | undefined;
    playerArticleNotificationAndroidChannelId?: string | undefined;
    teamArticleNotificationAndroidChannelId?: string | undefined;
    playerMatchResultedNotificationAndroidChannelId?: string | undefined;
    teamMatchResultedNotificationAndroidChannelId?: string | undefined;
    teamTransferNotificationAndroidChannelId?: string | undefined;
    playerTransferNotificationAndroidChannelId?: string | undefined;

    constructor(data?: IOneSignalAppListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.appId = _data["appId"];
            this.apiKey = _data["apiKey"];
            this.safariWebId = _data["safariWebId"];
            this.playerMatchStartingNotificationAndroidChannelId = _data["playerMatchStartingNotificationAndroidChannelId"];
            this.teamMatchStartingNotificationAndroidChannelId = _data["teamMatchStartingNotificationAndroidChannelId"];
            this.playerArticleNotificationAndroidChannelId = _data["playerArticleNotificationAndroidChannelId"];
            this.teamArticleNotificationAndroidChannelId = _data["teamArticleNotificationAndroidChannelId"];
            this.playerMatchResultedNotificationAndroidChannelId = _data["playerMatchResultedNotificationAndroidChannelId"];
            this.teamMatchResultedNotificationAndroidChannelId = _data["teamMatchResultedNotificationAndroidChannelId"];
            this.teamTransferNotificationAndroidChannelId = _data["teamTransferNotificationAndroidChannelId"];
            this.playerTransferNotificationAndroidChannelId = _data["playerTransferNotificationAndroidChannelId"];
        }
    }

    static fromJS(data: any): OneSignalAppListItem {
        data = typeof data === 'object' ? data : {};
        let result = new OneSignalAppListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["appId"] = this.appId;
        data["apiKey"] = this.apiKey;
        data["safariWebId"] = this.safariWebId;
        data["playerMatchStartingNotificationAndroidChannelId"] = this.playerMatchStartingNotificationAndroidChannelId;
        data["teamMatchStartingNotificationAndroidChannelId"] = this.teamMatchStartingNotificationAndroidChannelId;
        data["playerArticleNotificationAndroidChannelId"] = this.playerArticleNotificationAndroidChannelId;
        data["teamArticleNotificationAndroidChannelId"] = this.teamArticleNotificationAndroidChannelId;
        data["playerMatchResultedNotificationAndroidChannelId"] = this.playerMatchResultedNotificationAndroidChannelId;
        data["teamMatchResultedNotificationAndroidChannelId"] = this.teamMatchResultedNotificationAndroidChannelId;
        data["teamTransferNotificationAndroidChannelId"] = this.teamTransferNotificationAndroidChannelId;
        data["playerTransferNotificationAndroidChannelId"] = this.playerTransferNotificationAndroidChannelId;
        return data;
    }
}

export interface IOneSignalAppListItem {
    id?: number;
    appId?: string | undefined;
    apiKey?: string | undefined;
    safariWebId?: string | undefined;
    playerMatchStartingNotificationAndroidChannelId?: string | undefined;
    teamMatchStartingNotificationAndroidChannelId?: string | undefined;
    playerArticleNotificationAndroidChannelId?: string | undefined;
    teamArticleNotificationAndroidChannelId?: string | undefined;
    playerMatchResultedNotificationAndroidChannelId?: string | undefined;
    teamMatchResultedNotificationAndroidChannelId?: string | undefined;
    teamTransferNotificationAndroidChannelId?: string | undefined;
    playerTransferNotificationAndroidChannelId?: string | undefined;
}

export class Option implements IOption {
    /** Option id */
    id!: number;
    /** Option order */
    order!: number;
    /** Option text */
    text!: string;

    constructor(data?: IOption) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.order = _data["order"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): Option {
        data = typeof data === 'object' ? data : {};
        let result = new Option();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["order"] = this.order;
        data["text"] = this.text;
        return data;
    }
}

export interface IOption {
    /** Option id */
    id: number;
    /** Option order */
    order: number;
    /** Option text */
    text: string;
}

export class PageListItem implements IPageListItem {
    /** Page id */
    pageId?: number;
    /** Frontend name */
    feName?: string | undefined;
    /** Title */
    title?: string | undefined;
    /** Url */
    url?: string | undefined;
    /** Author */
    author?: string | undefined;
    /** Edited At */
    updatedAt?: number | undefined;
    /** View count */
    viewCount?: number;

    constructor(data?: IPageListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageId = _data["pageId"];
            this.feName = _data["feName"];
            this.title = _data["title"];
            this.url = _data["url"];
            this.author = _data["author"];
            this.updatedAt = _data["updatedAt"];
            this.viewCount = _data["viewCount"];
        }
    }

    static fromJS(data: any): PageListItem {
        data = typeof data === 'object' ? data : {};
        let result = new PageListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageId"] = this.pageId;
        data["feName"] = this.feName;
        data["title"] = this.title;
        data["url"] = this.url;
        data["author"] = this.author;
        data["updatedAt"] = this.updatedAt;
        data["viewCount"] = this.viewCount;
        return data;
    }
}

export interface IPageListItem {
    /** Page id */
    pageId?: number;
    /** Frontend name */
    feName?: string | undefined;
    /** Title */
    title?: string | undefined;
    /** Url */
    url?: string | undefined;
    /** Author */
    author?: string | undefined;
    /** Edited At */
    updatedAt?: number | undefined;
    /** View count */
    viewCount?: number;
}

export class PagingRespBase implements IPagingRespBase {
    pageNo!: number;
    pageSize!: number;
    readonly totalPages!: number;
    totalRows!: number;

    constructor(data?: IPagingRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageNo = _data["pageNo"];
            this.pageSize = _data["pageSize"];
            (<any>this).totalPages = _data["totalPages"];
            this.totalRows = _data["totalRows"];
        }
    }

    static fromJS(data: any): PagingRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new PagingRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNo"] = this.pageNo;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        data["totalRows"] = this.totalRows;
        return data;
    }
}

export interface IPagingRespBase {
    pageNo: number;
    pageSize: number;
    totalPages: number;
    totalRows: number;
}

export class ParentFolder implements IParentFolder {
    /** Folder Id */
    id?: number;
    /** ParentId */
    parentId?: number | undefined;
    /** Folder name */
    name?: string | undefined;
    /** Folder path */
    path?: string | undefined;

    constructor(data?: IParentFolder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.parentId = _data["parentId"];
            this.name = _data["name"];
            this.path = _data["path"];
        }
    }

    static fromJS(data: any): ParentFolder {
        data = typeof data === 'object' ? data : {};
        let result = new ParentFolder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["parentId"] = this.parentId;
        data["name"] = this.name;
        data["path"] = this.path;
        return data;
    }
}

export interface IParentFolder {
    /** Folder Id */
    id?: number;
    /** ParentId */
    parentId?: number | undefined;
    /** Folder name */
    name?: string | undefined;
    /** Folder path */
    path?: string | undefined;
}

export class RelatedQuickPoll implements IRelatedQuickPoll {
    /** Poll id */
    pollId!: number;
    /** Quick poll question */
    question!: string;
    /** Quick poll options */
    options?: Option[] | undefined;

    constructor(data?: IRelatedQuickPoll) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pollId = _data["pollId"];
            this.question = _data["question"];
            if (Array.isArray(_data["options"])) {
                this.options = [] as any;
                for (let item of _data["options"])
                    this.options!.push(Option.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RelatedQuickPoll {
        data = typeof data === 'object' ? data : {};
        let result = new RelatedQuickPoll();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pollId"] = this.pollId;
        data["question"] = this.question;
        if (Array.isArray(this.options)) {
            data["options"] = [];
            for (let item of this.options)
                data["options"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRelatedQuickPoll {
    /** Poll id */
    pollId: number;
    /** Quick poll question */
    question: string;
    /** Quick poll options */
    options?: Option[] | undefined;
}

export class RoleListItem implements IRoleListItem {
    /** Role id */
    roleId?: number;
    /** Role name */
    name?: string | undefined;
    /** Group id */
    groupId?: number;
    /** Group Name */
    groupName?: string | undefined;
    /** Remark */
    remark?: string | undefined;
    /** Updated At */
    updatedAt?: number;
    /** User name */
    updatedUserName?: string | undefined;
    /** Frontend names */
    frontendNames?: string[] | undefined;

    constructor(data?: IRoleListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleId = _data["roleId"];
            this.name = _data["name"];
            this.groupId = _data["groupId"];
            this.groupName = _data["groupName"];
            this.remark = _data["remark"];
            this.updatedAt = _data["updatedAt"];
            this.updatedUserName = _data["updatedUserName"];
            if (Array.isArray(_data["frontendNames"])) {
                this.frontendNames = [] as any;
                for (let item of _data["frontendNames"])
                    this.frontendNames!.push(item);
            }
        }
    }

    static fromJS(data: any): RoleListItem {
        data = typeof data === 'object' ? data : {};
        let result = new RoleListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["name"] = this.name;
        data["groupId"] = this.groupId;
        data["groupName"] = this.groupName;
        data["remark"] = this.remark;
        data["updatedAt"] = this.updatedAt;
        data["updatedUserName"] = this.updatedUserName;
        if (Array.isArray(this.frontendNames)) {
            data["frontendNames"] = [];
            for (let item of this.frontendNames)
                data["frontendNames"].push(item);
        }
        return data;
    }
}

export interface IRoleListItem {
    /** Role id */
    roleId?: number;
    /** Role name */
    name?: string | undefined;
    /** Group id */
    groupId?: number;
    /** Group Name */
    groupName?: string | undefined;
    /** Remark */
    remark?: string | undefined;
    /** Updated At */
    updatedAt?: number;
    /** User name */
    updatedUserName?: string | undefined;
    /** Frontend names */
    frontendNames?: string[] | undefined;
}

export class RoleTemplate implements IRoleTemplate {
    /** Role template id */
    templateId?: number;
    /** Role template name */
    name?: string | undefined;
    /** Frontend permissions */
    frontendPermissions?: Int16Item[] | undefined;
    /** Backoffice permissions */
    backofficePermissions?: SimpleBackOfficePermissionItem[] | undefined;

    constructor(data?: IRoleTemplate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.templateId = _data["templateId"];
            this.name = _data["name"];
            if (Array.isArray(_data["frontendPermissions"])) {
                this.frontendPermissions = [] as any;
                for (let item of _data["frontendPermissions"])
                    this.frontendPermissions!.push(Int16Item.fromJS(item));
            }
            if (Array.isArray(_data["backofficePermissions"])) {
                this.backofficePermissions = [] as any;
                for (let item of _data["backofficePermissions"])
                    this.backofficePermissions!.push(SimpleBackOfficePermissionItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoleTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new RoleTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["templateId"] = this.templateId;
        data["name"] = this.name;
        if (Array.isArray(this.frontendPermissions)) {
            data["frontendPermissions"] = [];
            for (let item of this.frontendPermissions)
                data["frontendPermissions"].push(item.toJSON());
        }
        if (Array.isArray(this.backofficePermissions)) {
            data["backofficePermissions"] = [];
            for (let item of this.backofficePermissions)
                data["backofficePermissions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRoleTemplate {
    /** Role template id */
    templateId?: number;
    /** Role template name */
    name?: string | undefined;
    /** Frontend permissions */
    frontendPermissions?: Int16Item[] | undefined;
    /** Backoffice permissions */
    backofficePermissions?: SimpleBackOfficePermissionItem[] | undefined;
}

export class RoleUserListItem implements IRoleUserListItem {
    /** User id */
    userId?: number;
    /** User name */
    userName?: string | undefined;
    /** User Type Name */
    userTypeName?: string | undefined;

    constructor(data?: IRoleUserListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.userName = _data["userName"];
            this.userTypeName = _data["userTypeName"];
        }
    }

    static fromJS(data: any): RoleUserListItem {
        data = typeof data === 'object' ? data : {};
        let result = new RoleUserListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["userTypeName"] = this.userTypeName;
        return data;
    }
}

export interface IRoleUserListItem {
    /** User id */
    userId?: number;
    /** User name */
    userName?: string | undefined;
    /** User Type Name */
    userTypeName?: string | undefined;
}

export class SimpleBackOfficePermissionItem implements ISimpleBackOfficePermissionItem {
    /** Backoffice func id */
    funcId?: number;
    /** Backoffice func name */
    name?: string | undefined;
    /** Checked */
    checked?: boolean;
    /** Sub */
    subFuncs?: SimpleBackOfficePermissionItem[] | undefined;

    constructor(data?: ISimpleBackOfficePermissionItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.funcId = _data["funcId"];
            this.name = _data["name"];
            this.checked = _data["checked"];
            if (Array.isArray(_data["subFuncs"])) {
                this.subFuncs = [] as any;
                for (let item of _data["subFuncs"])
                    this.subFuncs!.push(SimpleBackOfficePermissionItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SimpleBackOfficePermissionItem {
        data = typeof data === 'object' ? data : {};
        let result = new SimpleBackOfficePermissionItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["funcId"] = this.funcId;
        data["name"] = this.name;
        data["checked"] = this.checked;
        if (Array.isArray(this.subFuncs)) {
            data["subFuncs"] = [];
            for (let item of this.subFuncs)
                data["subFuncs"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISimpleBackOfficePermissionItem {
    /** Backoffice func id */
    funcId?: number;
    /** Backoffice func name */
    name?: string | undefined;
    /** Checked */
    checked?: boolean;
    /** Sub */
    subFuncs?: SimpleBackOfficePermissionItem[] | undefined;
}

export class SiteSection implements ISiteSection {
    /** Site section id */
    id?: number;
    /** Site section name */
    name?: string | undefined;

    constructor(data?: ISiteSection) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): SiteSection {
        data = typeof data === 'object' ? data : {};
        let result = new SiteSection();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface ISiteSection {
    /** Site section id */
    id?: number;
    /** Site section name */
    name?: string | undefined;
}

export class SystemLogDetail implements ISystemLogDetail {
    id?: number;
    traceId?: string | undefined;
    prefix?: string | undefined;
    serverName?: string | undefined;
    level?: LogLevel;
    logger?: string | undefined;
    method?: string | undefined;
    message?: string | undefined;
    messagePayload?: string | undefined;
    exception?: string | undefined;
    recordedAt?: number;

    constructor(data?: ISystemLogDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.traceId = _data["traceId"];
            this.prefix = _data["prefix"];
            this.serverName = _data["serverName"];
            this.level = _data["level"];
            this.logger = _data["logger"];
            this.method = _data["method"];
            this.message = _data["message"];
            this.messagePayload = _data["messagePayload"];
            this.exception = _data["exception"];
            this.recordedAt = _data["recordedAt"];
        }
    }

    static fromJS(data: any): SystemLogDetail {
        data = typeof data === 'object' ? data : {};
        let result = new SystemLogDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["traceId"] = this.traceId;
        data["prefix"] = this.prefix;
        data["serverName"] = this.serverName;
        data["level"] = this.level;
        data["logger"] = this.logger;
        data["method"] = this.method;
        data["message"] = this.message;
        data["messagePayload"] = this.messagePayload;
        data["exception"] = this.exception;
        data["recordedAt"] = this.recordedAt;
        return data;
    }
}

export interface ISystemLogDetail {
    id?: number;
    traceId?: string | undefined;
    prefix?: string | undefined;
    serverName?: string | undefined;
    level?: LogLevel;
    logger?: string | undefined;
    method?: string | undefined;
    message?: string | undefined;
    messagePayload?: string | undefined;
    exception?: string | undefined;
    recordedAt?: number;
}

export class SystemLogListItem implements ISystemLogListItem {
    /** Id */
    id?: number;
    /** Trace Id */
    traceId?: string | undefined;
    /** Prefix */
    prefix?: string | undefined;
    /** Server Name */
    serverName?: string | undefined;
    level?: LogLevel;
    /** Logger */
    logger?: string | undefined;
    /** Method */
    method?: string | undefined;
    /** Message */
    message?: string | undefined;
    /** Record At */
    recordedAt?: number;

    constructor(data?: ISystemLogListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.traceId = _data["traceId"];
            this.prefix = _data["prefix"];
            this.serverName = _data["serverName"];
            this.level = _data["level"];
            this.logger = _data["logger"];
            this.method = _data["method"];
            this.message = _data["message"];
            this.recordedAt = _data["recordedAt"];
        }
    }

    static fromJS(data: any): SystemLogListItem {
        data = typeof data === 'object' ? data : {};
        let result = new SystemLogListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["traceId"] = this.traceId;
        data["prefix"] = this.prefix;
        data["serverName"] = this.serverName;
        data["level"] = this.level;
        data["logger"] = this.logger;
        data["method"] = this.method;
        data["message"] = this.message;
        data["recordedAt"] = this.recordedAt;
        return data;
    }
}

export interface ISystemLogListItem {
    /** Id */
    id?: number;
    /** Trace Id */
    traceId?: string | undefined;
    /** Prefix */
    prefix?: string | undefined;
    /** Server Name */
    serverName?: string | undefined;
    level?: LogLevel;
    /** Logger */
    logger?: string | undefined;
    /** Method */
    method?: string | undefined;
    /** Message */
    message?: string | undefined;
    /** Record At */
    recordedAt?: number;
}

export class Translation implements ITranslation {
    name?: string | undefined;
    status?: string | undefined;
    locale?: TranslationLocale;

    constructor(data?: ITranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.status = _data["status"];
            this.locale = _data["locale"] ? TranslationLocale.fromJS(_data["locale"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Translation {
        data = typeof data === 'object' ? data : {};
        let result = new Translation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["status"] = this.status;
        data["locale"] = this.locale ? this.locale.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITranslation {
    name?: string | undefined;
    status?: string | undefined;
    locale?: TranslationLocale;
}

export class TranslationLocale implements ITranslationLocale {
    id?: number;
    bcp47Identifier?: string | undefined;
    displayName?: string | undefined;

    constructor(data?: ITranslationLocale) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.bcp47Identifier = _data["bcp47Identifier"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): TranslationLocale {
        data = typeof data === 'object' ? data : {};
        let result = new TranslationLocale();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["bcp47Identifier"] = this.bcp47Identifier;
        data["displayName"] = this.displayName;
        return data;
    }
}

export interface ITranslationLocale {
    id?: number;
    bcp47Identifier?: string | undefined;
    displayName?: string | undefined;
}

export class UInt16Item implements IUInt16Item {
    id?: number;
    name?: string | undefined;

    constructor(data?: IUInt16Item) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UInt16Item {
        data = typeof data === 'object' ? data : {};
        let result = new UInt16Item();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IUInt16Item {
    id?: number;
    name?: string | undefined;
}

export class UInt32Item implements IUInt32Item {
    id?: number;
    name?: string | undefined;

    constructor(data?: IUInt32Item) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UInt32Item {
        data = typeof data === 'object' ? data : {};
        let result = new UInt32Item();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IUInt32Item {
    id?: number;
    name?: string | undefined;
}

export class UnAssignGroupReq implements IUnAssignGroupReq {
    /** Group id */
    groupId!: number;
    /** Add user ids */
    userIds!: number[];

    constructor(data?: IUnAssignGroupReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.userIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupId = _data["groupId"];
            if (Array.isArray(_data["userIds"])) {
                this.userIds = [] as any;
                for (let item of _data["userIds"])
                    this.userIds!.push(item);
            }
        }
    }

    static fromJS(data: any): UnAssignGroupReq {
        data = typeof data === 'object' ? data : {};
        let result = new UnAssignGroupReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupId"] = this.groupId;
        if (Array.isArray(this.userIds)) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        return data;
    }
}

export interface IUnAssignGroupReq {
    /** Group id */
    groupId: number;
    /** Add user ids */
    userIds: number[];
}

export class UnAssignGroupResp implements IUnAssignGroupResp {
    /** UnAssign user ids */
    userIds?: number[] | undefined;

    constructor(data?: IUnAssignGroupResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["userIds"])) {
                this.userIds = [] as any;
                for (let item of _data["userIds"])
                    this.userIds!.push(item);
            }
        }
    }

    static fromJS(data: any): UnAssignGroupResp {
        data = typeof data === 'object' ? data : {};
        let result = new UnAssignGroupResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userIds)) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        return data;
    }
}

export interface IUnAssignGroupResp {
    /** UnAssign user ids */
    userIds?: number[] | undefined;
}

export class UnAssignGroupRespApiRespBase implements IUnAssignGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: UnAssignGroupResp;

    constructor(data?: IUnAssignGroupRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? UnAssignGroupResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UnAssignGroupRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new UnAssignGroupRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUnAssignGroupRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: UnAssignGroupResp;
}

export class UnAssignRoleReq implements IUnAssignRoleReq {
    /** Role id */
    roleId!: number;
    /** Add user ids */
    userIds!: number[];

    constructor(data?: IUnAssignRoleReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.userIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleId = _data["roleId"];
            if (Array.isArray(_data["userIds"])) {
                this.userIds = [] as any;
                for (let item of _data["userIds"])
                    this.userIds!.push(item);
            }
        }
    }

    static fromJS(data: any): UnAssignRoleReq {
        data = typeof data === 'object' ? data : {};
        let result = new UnAssignRoleReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        if (Array.isArray(this.userIds)) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        return data;
    }
}

export interface IUnAssignRoleReq {
    /** Role id */
    roleId: number;
    /** Add user ids */
    userIds: number[];
}

export class UnAssignRoleResp implements IUnAssignRoleResp {
    /** UnAssign user ids */
    userIds?: number[] | undefined;

    constructor(data?: IUnAssignRoleResp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["userIds"])) {
                this.userIds = [] as any;
                for (let item of _data["userIds"])
                    this.userIds!.push(item);
            }
        }
    }

    static fromJS(data: any): UnAssignRoleResp {
        data = typeof data === 'object' ? data : {};
        let result = new UnAssignRoleResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userIds)) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        return data;
    }
}

export interface IUnAssignRoleResp {
    /** UnAssign user ids */
    userIds?: number[] | undefined;
}

export class UnAssignRoleRespApiRespBase implements IUnAssignRoleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    readonly traceId?: string | undefined;
    data?: UnAssignRoleResp;

    constructor(data?: IUnAssignRoleRespApiRespBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ret = _data["ret"];
            this.msg = _data["msg"];
            (<any>this).traceId = _data["traceId"];
            this.data = _data["data"] ? UnAssignRoleResp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UnAssignRoleRespApiRespBase {
        data = typeof data === 'object' ? data : {};
        let result = new UnAssignRoleRespApiRespBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ret"] = this.ret;
        data["msg"] = this.msg;
        data["traceId"] = this.traceId;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUnAssignRoleRespApiRespBase {
    ret?: EnumRet;
    msg?: string | undefined;
    traceId?: string | undefined;
    data?: UnAssignRoleResp;
}

export class UserProfile implements IUserProfile {
    userName?: string | undefined;
    avatarImage?: string | undefined;

    constructor(data?: IUserProfile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.avatarImage = _data["avatarImage"];
        }
    }

    static fromJS(data: any): UserProfile {
        data = typeof data === 'object' ? data : {};
        let result = new UserProfile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["avatarImage"] = this.avatarImage;
        return data;
    }
}

export interface IUserProfile {
    userName?: string | undefined;
    avatarImage?: string | undefined;
}

export class UserType implements IUserType {
    id?: number;
    name?: string | undefined;

    constructor(data?: IUserType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UserType {
        data = typeof data === 'object' ? data : {};
        let result = new UserType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IUserType {
    id?: number;
    name?: string | undefined;
}

export function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

function parseDateOnly(s: string) {
    const date = new Date(s);
    return new Date(date.getTime() + 
        date.getTimezoneOffset() * 60000);
}
//-----/CustomTypes.File-----

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

//-----/Types.File-----

import { addResultTypeFactory } from './axios-client/helpers';
export { setBaseUrl, getBaseUrl } from './axios-client/helpers';
export { setAxiosFactory, getAxios } from './axios-client/helpers';


//-----PersistorHydrator.File-----
import type { PersistedClient } from '@tanstack/react-query-persist-client';
import type { DehydratedState, QueryKey } from '@tanstack/react-query'
import { getResultTypeFactory } from './axios-client/helpers';

/*
 * If you have Dates in QueryKeys (i.e. in request parameters), you need to deserialize them to Dates correctly
 * (otherwise they are deserialized as strings by default, and your queries are broken).
 */
export function deserializeDate(str: unknown) {
  if (!str || typeof str !== 'string') return str;
  if (!/^\d\d\d\d\-\d\d\-\d\d/.test(str)) return str;
  
  const date = new Date(str);
  const isDate = date instanceof Date && !isNaN(date as any);
  
  return isDate ? date : str;
}

export function deserializeDatesInQueryKeys(queryKey: QueryKey) {
  return queryKey
    // We need to replace `null` with `undefined` in query key, because
    // `undefined` is serialized as `null`.
    // And most probably if we have `null` in QueryKey it actually means `undefined`.
    // We can't keep nulls, because they have a different meaning, and e.g. boolean parameters are not allowed to be null.
    .map(x => (x === null ? undefined : x))
    .map(x => deserializeDate(x));
}

export function deserializeClassesInQueryData(queryKey: QueryKey, data: any) {
  if (!data) {
    return data;
  } else if (typeof data !== 'object') {
    return data;
  } else if ('pages' in data && 'pageParams' in data && Array.isArray(data.pages) && Array.isArray(data.pageParams)) {
    // infinite query
    data.pages = data.pages.map((page:any) => deserializeClassesInQueryData(queryKey, page));
  } else if (Array.isArray(data)) {
    return data.map(elem => constructDtoClass(queryKey, elem));
  } else {
    return constructDtoClass(queryKey, data);
  }
}

/*
 * Pass this function as `deserialize` option to createSyncStoragePersister/createAsyncStoragePersister
 * to correctly deserialize your DTOs (including Dates)
 */
export function persisterDeserialize(cache: string): PersistedClient {
  const client: PersistedClient = JSON.parse(cache);
  client.clientState.queries.forEach((query) => {
    query.state.data = deserializeClassesInQueryData(query.queryKey, query.state.data);
    query.queryKey = deserializeDatesInQueryKeys(query.queryKey);
  });

  return client;
}

export function constructDtoClass(queryKey: QueryKey, data: any): unknown {
  const resultTypeKey = getResultTypeClassKey(queryKey);
  const constructorFunction = getResultTypeFactory(resultTypeKey);

  if (!data || !constructorFunction)
    return data;

  return constructorFunction(data);
}

export function getResultTypeClassKey(queryKey: QueryKey): string {
  if (!Array.isArray(queryKey)) {
    return queryKey as unknown as string;
  }
  if (queryKey.length >= 2) {
    // We concatenate first and second elements, because they uniquely identify the query.
    // All other QueryKey elements are query parameters
    return `${queryKey[0]}___${queryKey[1]}`;
  }

  // We actually should never reach this point :)
  return queryKey.join('___');
}

export function initPersister() {
  
  addResultTypeFactory('Client___types', (data: any) => { const result = new GetArticleTypesRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___articlesGET', (data: any) => { const result = new GetArticlesRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___articlesGET2', (data: any) => { const result = new GetArticleRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___broadcasttalentsGET', (data: any) => { const result = new GetBroadcastTalentsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___broadcasttalentsGET2', (data: any) => { const result = new GetBroadcastTalentRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___mediaItemsGET', (data: any) => { const result = new GetMediaItemsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___enumret', (data: any) => { const result = new Int32StringDictionaryApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___crewFoldersGET', (data: any) => { const result = new GetCrewFoldersRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___crewFilesGET', (data: any) => { const result = new GetCrewFilesRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___fuzzyFolders', (data: any) => { const result = new GetFuzzyFoldersRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___frontendSiteSectionsGET', (data: any) => { const result = new GetFrontendSiteSectionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___types2', (data: any) => { const result = new GetFuncTypesRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___options', (data: any) => { const result = new GetFuncOptionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___funcsGET', (data: any) => { const result = new GetFuncsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___funcsGET2', (data: any) => { const result = new GetFuncRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___fuzzy', (data: any) => { const result = new GetFuzzyGameRaceRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___gameRegionsGET', (data: any) => { const result = new GetGameRegionsResp(); result.init(data); return result; });
  addResultTypeFactory('Client___gameRegionsGET2', (data: any) => { const result = new GetGameRegionResp(); result.init(data); return result; });
  addResultTypeFactory('Client___translationsGET', (data: any) => { const result = new GetGameRegionTranslationResp(); result.init(data); return result; });
  addResultTypeFactory('Client___gamesGET', (data: any) => { const result = new GetGamesRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___gamesGET2', (data: any) => { const result = new GetGameRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___fuzzy2', (data: any) => { const result = new GetFuzzyGamesRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___gamesidesGET', (data: any) => { const result = new GetSidesRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___gamesidesGET2', (data: any) => { const result = new GetSideRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___translationsGET2', (data: any) => { const result = new GetSideTranslationsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___groupOptions', (data: any) => { const result = new GetGroupOptionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___groupOptionsByUser', (data: any) => { const result = new GetGroupOptionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___groupsGET', (data: any) => { const result = new GetGroupsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___groupsGET2', (data: any) => { const result = new GetGroupRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___blankPermissions', (data: any) => { const result = new GetGroupBlankPermissionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___templates', (data: any) => { const result = new GetGroupTemplatesRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___usersGET', (data: any) => { const result = new GetUsersByGroupRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___fuzzyUsers', (data: any) => { const result = new GetFuzzyUsersByGroupRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___heroesGET', (data: any) => { const result = new GetHeroesRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___heroesGET2', (data: any) => { const result = new GetHeroRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___translationsGET3', (data: any) => { const result = new GetHeroTranslationsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___apiLogs', (data: any) => { const result = new GetApiLogsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___apiLogs2', (data: any) => { const result = new GetApiLogRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___systemLogs', (data: any) => { const result = new GetSystemLogsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___systemLogs2', (data: any) => { const result = new GetSystemLogRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___mapsGET', (data: any) => { const result = new GetMapsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___mapsGET2', (data: any) => { const result = new GetMapRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___translationsGET4', (data: any) => { const result = new GetMapTranslationsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___streamsGET', (data: any) => { const result = new GetStreamsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___streamsGET2', (data: any) => { const result = new GetStreamRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___fuzzyStreams', (data: any) => { const result = new GetFuzzyMediaStreamsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___fuzzyVideos', (data: any) => { const result = new GetFuzzyMediaVideosRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___hostOptions', (data: any) => { const result = new GetMediaVodHostOptionsResp(); result.init(data); return result; });
  addResultTypeFactory('Client___vodsGET', (data: any) => { const result = new GetMediaVodsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___vodsGET2', (data: any) => { const result = new GetMediaVodRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___modesGET', (data: any) => { const result = new GetModesRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___modesGET2', (data: any) => { const result = new GetModeRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___translationsGET5', (data: any) => { const result = new GetModeTranslationsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___messagingNotificationTemplatesGET', (data: any) => { const result = new GetNotificationTemplatesRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___messagingNotificationTemplatesGET2', (data: any) => { const result = new GetNotificationTemplateRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___messagingOnesignalAppsGET', (data: any) => { const result = new GetOneSignalAppsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___messagingOnesignalAppsGET2', (data: any) => { const result = new GetOneSignalAppRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___states', (data: any) => { const result = new GetStateOptionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___contactTypes', (data: any) => { const result = new GetContactTypesRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___frontends', (data: any) => { const result = new GetFrontendOptionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___frontendsByUser', (data: any) => { const result = new GetFrontendOptionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___locales', (data: any) => { const result = new GetLocaleOptionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___frontendLocales', (data: any) => { const result = new GetFrontendLocaleOptionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___siteSectionsGET', (data: any) => { const result = new GetSiteSectionsOptionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___countries', (data: any) => { const result = new GetCountryOptionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___userTypes', (data: any) => { const result = new GetUserTypeOptionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___genders', (data: any) => { const result = new GetGenderOptionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___proxy', (data: any) => { const result = new GetGgCodeInfoRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___notificationTypes', (data: any) => { const result = new GetNotificationTypeOptionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___languages', (data: any) => { const result = new GetLanguagesRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___gamesGET3', (data: any) => { const result = new GetGameOptionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___serversGET', (data: any) => { const result = new GetServerOptionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___pagesGET', (data: any) => { const result = new GetPagesRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___pagesGET2', (data: any) => { const result = new GetPageRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___playersGET', (data: any) => { const result = new GetPlayersRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___playersGET2', (data: any) => { const result = new GetPlayerRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___fuzzy3', (data: any) => { const result = new GetFuzzyPlayersRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___usersGET2', (data: any) => { const result = new GetUserForPlayerRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___mediaItemsGET2', (data: any) => { const result = new GetPlayerMediaItemsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___roleOptions', (data: any) => { const result = new GetRoleOptionsByGroupRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___usersGET3', (data: any) => { const result = new GetUsersByRoleRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___rolesGET', (data: any) => { const result = new GetRolesByGroupRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___rolesGET2', (data: any) => { const result = new GetRoleRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___blankPermissions2', (data: any) => { const result = new GetRoleBlankPermissionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___templates2', (data: any) => { const result = new GetRoleTemplatesByGroupRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___serversGET2', (data: any) => { const result = new GetServersRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___serversGET3', (data: any) => { const result = new GetServerRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___siteSectionsGET2', (data: any) => { const result = new GetSiteSectionsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___siteSectionsGET3', (data: any) => { const result = new GetSiteSectionRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___sponsorsGET', (data: any) => { const result = new GetSponsorsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___sponsorsGET2', (data: any) => { const result = new GetSponsorRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___teamsGET', (data: any) => { const result = new GetTeamsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___teamsGET2', (data: any) => { const result = new GetTeamRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___teamPlayersGET', (data: any) => { const result = new GetTeamPlayersRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___teamPlayersGET2', (data: any) => { const result = new GetTeamPlayerRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___fuzzy4', (data: any) => { const result = new GetFuzzyTeamsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___gameAccountsGET', (data: any) => { const result = new GetGameAccountsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___gameAccountsGET2', (data: any) => { const result = new GetGameAccountRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___fuzzy5', (data: any) => { const result = new GetFuzzyTournamentsRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___usersGET4', (data: any) => { const result = new GetUsersRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___usersGET5', (data: any) => { const result = new GetUserRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___fuzzy6', (data: any) => { const result = new GetFuzzyUsersRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___usersession', (data: any) => { const result = new GetUserSessionRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___venuesGET', (data: any) => { const result = new GetVenuesRespApiRespBase(); result.init(data); return result; });
  addResultTypeFactory('Client___venuesGET2', (data: any) => { const result = new GetVenueRespApiRespBase(); result.init(data); return result; });


}
//-----/PersistorHydrator.File----